/**
 * Animation helper that creates animation frames for a given duration to aid in animating from one state to another.
 */
export declare class Animator<T> {
    private startState;
    private endState;
    private duration;
    private onAnimationFrameCallback;
    /**
     * Determines whether or not the animation is in progress.
     */
    readonly isAnimating: boolean;
    /**
     * The start time of the animation in milliseconds.
     */
    private startTime?;
    /**
     * The end time of the animation in milliseconds.
     */
    private endTime?;
    /**
     * The browser's animation frame request id.
     */
    private animationFrameRequestId?;
    /**
     * Determines whether or not the animation has been cancelled.
     */
    private isCancelled;
    /**
     * Creates an animator instance.
     * @param startState The initial state of the animation.
     * @param endState The final state of the animation.
     * @param duration The duration of the animation.
     * @param onAnimationFrameCallback The callback function to be called on each animation frame.
     */
    constructor(startState: T, endState: T, duration: number, onAnimationFrameCallback: (frame: AnimationFrame<T>) => void);
    /**
     * Starts the animation.
     */
    start(): void;
    /**
     * Cancels the animation.
     */
    cancel(): void;
    /**
     * Creates an animation frame and repeats in a loop until the animation is complete or cancelled.
     */
    private animate;
    /**
     * Cancels the current animation frame request.
     */
    private cancelAnimationFrameRequest;
    /**
     * Gets the current time in milliseconds.
     */
    private readonly currentTime;
    /**
     * Gets the current progress as a number between 0 and 1.
     */
    private readonly currentProgress;
    /**
     * Determines whether or not the animation has ended based on the current time.
     */
    private readonly animationEnded;
}
/**
 * Represents a frame of an animation.
 */
export interface AnimationFrame<T> {
    /**
     * The progress of the animation at this frame represented as a number between 0 and 1.
     */
    progress: number;
    /**
     * Determines whether or not this is the final frame of the animation.
     */
    isFinalFrame: boolean;
    /**
     * The initial state of the animation.
     */
    startState: T;
    /**
     * The final state of the animation.
     */
    endState: T;
}
export declare function easeInOutSine(progress: number, initialValue: number, finalValue: number): number;
