import { Animator } from '../animator';
describe('animator', function () {
    var startState = 1;
    var endState = 2;
    var duration = 5;
    var callback = jest.fn();
    beforeEach(function () {
        jest.resetAllMocks();
        window.requestAnimationFrame = jest.fn(function (callback) {
            setTimeout(callback, 1);
            return 1;
        });
        window.cancelAnimationFrame = jest.fn();
    });
    describe('constructor', function () {
        it('does not start the animation', function () {
            var animator = new Animator(startState, endState, duration, callback);
            expect(animator.isAnimating).toEqual(false);
        });
    });
    describe('start', function () {
        it('starts the animation', function () {
            var animator = new Animator(startState, endState, duration, callback);
            animator.start();
            expect(animator.isAnimating).toEqual(true);
        });
    });
    describe('cancel', function () {
        it('stops the animation', function () {
            var animator = new Animator(startState, endState, duration, callback);
            animator.start();
            expect(animator.isAnimating).toEqual(true);
            animator.cancel();
            expect(animator.isAnimating).toEqual(false);
            expect(cancelAnimationFrame).toBeCalled();
        });
    });
    describe('callback', function () {
        var assertLastCallbackFrame = function (progress, isFinalFrame) {
            var frame = {
                progress: progress,
                isFinalFrame: isFinalFrame,
                startState: startState,
                endState: endState
            };
            expect(callback).toHaveBeenLastCalledWith(frame);
        };
        it('calls the callback for each animation frame', function () {
            jest.useFakeTimers();
            var dateMock = jest.fn();
            Date.prototype.getTime = dateMock.mockReturnValue(0);
            var animator = new Animator(startState, endState, duration, callback);
            // Initial frame
            animator.start();
            jest.runOnlyPendingTimers();
            assertLastCallbackFrame(0, false);
            // Intermediate frame
            dateMock.mockReturnValue(2);
            jest.runOnlyPendingTimers();
            assertLastCallbackFrame(0.4, false);
            // Last frame
            dateMock.mockReturnValue(5);
            jest.runOnlyPendingTimers();
            assertLastCallbackFrame(1, true);
            expect(callback).toHaveBeenCalledTimes(3);
        });
    });
});
//# sourceMappingURL=animator.test.js.map