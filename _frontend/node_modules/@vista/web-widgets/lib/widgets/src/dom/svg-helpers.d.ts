/**
 * A helper class for creating SVG <path> elements without having to remember the commands.
 */
export declare class SvgPathHelper {
    /**
     * An array of commands used by the <path> as data (d).
     */
    private commands;
    /**
     * Creates an SVG path helper.
     */
    constructor();
    /**
     * Moves the path to given coordinates without drawing a line.
     * @param x
     * @param y
     */
    moveTo(x: number, y: number, absolutePositioning?: boolean): SvgPathHelper;
    /**
     * Draws a straight line to given coordinates.
     * @param x
     * @param y
     */
    drawLineTo(x: number, y: number, absolutePositioning?: boolean): SvgPathHelper;
    /**
     * Draws a horizontal line to a given x coordinate.
     * @param x
     */
    drawHorizontalLineTo(x: number, absolutePositioning?: boolean): SvgPathHelper;
    /**
     * Draws a vertical line to a given y coordinate.
     * @param y
     */
    drawVerticalLineTo(y: number, absolutePositioning?: boolean): SvgPathHelper;
    /**
     * Draws a horizontal line of a given length to the left of the current position.
     * @param length
     */
    drawLineLeft(length: number): SvgPathHelper;
    /**
     * Draws a horizontal line of a given length to the right of the current position.
     * @param length
     */
    drawLineRight(length: number): SvgPathHelper;
    /**
     * Draws a vertical line of a given length up from the current position.
     * @param length
     */
    drawLineUp(length: number): SvgPathHelper;
    /**
     * Draws a vertical line of a given length down from the current position.
     * @param length
     */
    drawLineDown(length: number): SvgPathHelper;
    /**
     * Draws an arc.
     * @param xRadius The radius of the arc in the x dimension.
     * @param yRadius The radius of the arc in the y dimension.
     * @param x The destination x coordinate.
     * @param y The destination y coordinate.
     * @param sweep True = clockwise, False = counterclockwise.
     */
    drawArcTo(xRadius: number, yRadius: number, x: number, y: number, sweep?: boolean, absolutePositioning?: boolean): SvgPathHelper;
    /**
     * Adds a top left border radius arc, clockwise from the current position.
     * @param borderRadius
     */
    drawTopLeftBorderRadiusArc(borderRadius: number): SvgPathHelper;
    /**
     * Adds a top right border radius arc, clockwise from the current position.
     * @param borderRadius
     */
    drawTopRightBorderRadiusArc(borderRadius: number): SvgPathHelper;
    /**
     * Adds a bottom left border radius arc, clockwise from the current position.
     * @param borderRadius
     */
    drawBottomLeftBorderRadiusArc(borderRadius: number): SvgPathHelper;
    /**
     * Adds a bottom right border radius arc, clockwise from the current position.
     * @param borderRadius
     */
    drawBottomRightBorderRadiusArc(borderRadius: number): SvgPathHelper;
    /**
     * Closes the path to complete the shape.
     */
    closePath(): SvgPathHelper;
    /**
     * Returns the path commands as a string to be used as path data. E.G. <path d={data} />.
     */
    toString(): string;
    /**
     * Adds a command to the path.
     * @param command The command, as a string.
     */
    private addCommand;
}
