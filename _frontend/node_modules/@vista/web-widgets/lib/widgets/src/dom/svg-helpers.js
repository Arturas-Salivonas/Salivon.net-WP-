/**
 * A helper class for creating SVG <path> elements without having to remember the commands.
 */
var SvgPathHelper = /** @class */ (function () {
    /**
     * Creates an SVG path helper.
     */
    function SvgPathHelper() {
        this.commands = [];
    }
    /**
     * Moves the path to given coordinates without drawing a line.
     * @param x
     * @param y
     */
    SvgPathHelper.prototype.moveTo = function (x, y, absolutePositioning) {
        if (absolutePositioning === void 0) { absolutePositioning = false; }
        return this.addCommand("" + (absolutePositioning ? 'M' : 'm') + x + "," + y);
    };
    /**
     * Draws a straight line to given coordinates.
     * @param x
     * @param y
     */
    SvgPathHelper.prototype.drawLineTo = function (x, y, absolutePositioning) {
        if (absolutePositioning === void 0) { absolutePositioning = false; }
        return this.addCommand("" + (absolutePositioning ? 'L' : 'l') + x + "," + y);
    };
    /**
     * Draws a horizontal line to a given x coordinate.
     * @param x
     */
    SvgPathHelper.prototype.drawHorizontalLineTo = function (x, absolutePositioning) {
        if (absolutePositioning === void 0) { absolutePositioning = false; }
        return this.addCommand("" + (absolutePositioning ? 'H' : 'h') + x);
    };
    /**
     * Draws a vertical line to a given y coordinate.
     * @param y
     */
    SvgPathHelper.prototype.drawVerticalLineTo = function (y, absolutePositioning) {
        if (absolutePositioning === void 0) { absolutePositioning = false; }
        return this.addCommand("" + (absolutePositioning ? 'V' : 'v') + y);
    };
    /**
     * Draws a horizontal line of a given length to the left of the current position.
     * @param length
     */
    SvgPathHelper.prototype.drawLineLeft = function (length) {
        return this.drawHorizontalLineTo(-length);
    };
    /**
     * Draws a horizontal line of a given length to the right of the current position.
     * @param length
     */
    SvgPathHelper.prototype.drawLineRight = function (length) {
        return this.drawHorizontalLineTo(length);
    };
    /**
     * Draws a vertical line of a given length up from the current position.
     * @param length
     */
    SvgPathHelper.prototype.drawLineUp = function (length) {
        return this.drawVerticalLineTo(-length);
    };
    /**
     * Draws a vertical line of a given length down from the current position.
     * @param length
     */
    SvgPathHelper.prototype.drawLineDown = function (length) {
        return this.drawVerticalLineTo(length);
    };
    /**
     * Draws an arc.
     * @param xRadius The radius of the arc in the x dimension.
     * @param yRadius The radius of the arc in the y dimension.
     * @param x The destination x coordinate.
     * @param y The destination y coordinate.
     * @param sweep True = clockwise, False = counterclockwise.
     */
    SvgPathHelper.prototype.drawArcTo = function (xRadius, yRadius, x, y, sweep, absolutePositioning) {
        if (sweep === void 0) { sweep = true; }
        if (absolutePositioning === void 0) { absolutePositioning = false; }
        return this.addCommand("" + (absolutePositioning ? 'A' : 'a') + xRadius + "," + yRadius + " 0 0 " + (sweep ? 1 : 0) + " " + x + "," + y);
    };
    /**
     * Adds a top left border radius arc, clockwise from the current position.
     * @param borderRadius
     */
    SvgPathHelper.prototype.drawTopLeftBorderRadiusArc = function (borderRadius) {
        return this.drawArcTo(borderRadius, borderRadius, borderRadius, -borderRadius, true);
    };
    /**
     * Adds a top right border radius arc, clockwise from the current position.
     * @param borderRadius
     */
    SvgPathHelper.prototype.drawTopRightBorderRadiusArc = function (borderRadius) {
        return this.drawArcTo(borderRadius, borderRadius, borderRadius, borderRadius, true);
    };
    /**
     * Adds a bottom left border radius arc, clockwise from the current position.
     * @param borderRadius
     */
    SvgPathHelper.prototype.drawBottomLeftBorderRadiusArc = function (borderRadius) {
        return this.drawArcTo(borderRadius, borderRadius, -borderRadius, -borderRadius, true);
    };
    /**
     * Adds a bottom right border radius arc, clockwise from the current position.
     * @param borderRadius
     */
    SvgPathHelper.prototype.drawBottomRightBorderRadiusArc = function (borderRadius) {
        return this.drawArcTo(borderRadius, borderRadius, -borderRadius, borderRadius, true);
    };
    /**
     * Closes the path to complete the shape.
     */
    SvgPathHelper.prototype.closePath = function () {
        return this.addCommand('z');
    };
    /**
     * Returns the path commands as a string to be used as path data. E.G. <path d={data} />.
     */
    SvgPathHelper.prototype.toString = function () {
        return this.commands.join(' ');
    };
    /**
     * Adds a command to the path.
     * @param command The command, as a string.
     */
    SvgPathHelper.prototype.addCommand = function (command) {
        this.commands.push(command);
        return this;
    };
    return SvgPathHelper;
}());
export { SvgPathHelper };
//# sourceMappingURL=svg-helpers.js.map