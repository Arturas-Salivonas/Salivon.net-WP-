import { SvgPathHelper } from '../svg-helpers';
describe('SvgPathHelper', function () {
    it('returns an empty string when no commands have been added', function () {
        var path = new SvgPathHelper()
            .toString();
        expect(path).toEqual('');
    });
    it('returns a moveTo command', function () {
        var path = new SvgPathHelper()
            .moveTo(0, 0)
            .moveTo(10, 10, false)
            .moveTo(20, 20, true)
            .toString();
        expect(path).toEqual('m0,0 m10,10 M20,20');
    });
    it('returns a lineTo command', function () {
        var path = new SvgPathHelper()
            .drawLineTo(0, 0)
            .drawLineTo(10, 10, false)
            .drawLineTo(20, 20, true)
            .toString();
        expect(path).toEqual('l0,0 l10,10 L20,20');
    });
    it('returns a horizontalLineTo command', function () {
        var path = new SvgPathHelper()
            .drawHorizontalLineTo(10)
            .drawHorizontalLineTo(20, false)
            .drawHorizontalLineTo(30, true)
            .toString();
        expect(path).toEqual('h10 h20 H30');
    });
    it('returns a verticalLineTo command', function () {
        var path = new SvgPathHelper()
            .drawVerticalLineTo(10)
            .drawVerticalLineTo(20, false)
            .drawVerticalLineTo(30, true)
            .toString();
        expect(path).toEqual('v10 v20 V30');
    });
    it('returns a left line command', function () {
        var path = new SvgPathHelper()
            .drawLineLeft(10)
            .toString();
        expect(path).toEqual('h-10');
    });
    it('returns a right line command', function () {
        var path = new SvgPathHelper()
            .drawLineRight(10)
            .toString();
        expect(path).toEqual('h10');
    });
    it('returns an upward line command', function () {
        var path = new SvgPathHelper()
            .drawLineUp(10)
            .toString();
        expect(path).toEqual('v-10');
    });
    it('returns an downward line command', function () {
        var path = new SvgPathHelper()
            .drawLineDown(10)
            .toString();
        expect(path).toEqual('v10');
    });
    it('returns an arcTo command', function () {
        var path = new SvgPathHelper()
            .drawArcTo(10, 10, 50, 50)
            .drawArcTo(5, 5, 20, 20, true, false)
            .drawArcTo(15, 15, 30, 30, true, true)
            .toString();
        expect(path).toEqual('a10,10 0 0 1 50,50 a5,5 0 0 1 20,20 A15,15 0 0 1 30,30');
    });
    it('returns a top-left border radius arc command', function () {
        var path = new SvgPathHelper()
            .drawTopLeftBorderRadiusArc(10)
            .toString();
        expect(path).toEqual('a10,10 0 0 1 10,-10');
    });
    it('returns a top-right border radius arc command', function () {
        var path = new SvgPathHelper()
            .drawTopRightBorderRadiusArc(10)
            .toString();
        expect(path).toEqual('a10,10 0 0 1 10,10');
    });
    it('returns a bottom-left border radius arc command', function () {
        var path = new SvgPathHelper()
            .drawBottomLeftBorderRadiusArc(10)
            .toString();
        expect(path).toEqual('a10,10 0 0 1 -10,-10');
    });
    it('returns a bottom-right border radius arc command', function () {
        var path = new SvgPathHelper()
            .drawBottomRightBorderRadiusArc(10)
            .toString();
        expect(path).toEqual('a10,10 0 0 1 -10,10');
    });
});
//# sourceMappingURL=svg-helpers.test.js.map