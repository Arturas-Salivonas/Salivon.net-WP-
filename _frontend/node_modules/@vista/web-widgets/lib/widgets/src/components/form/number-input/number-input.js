var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { getKeyCodeForEvent, KeyCode } from '../../../dom/key-code';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { Button, ButtonColor } from '../../button/button';
import { Select } from '../select/select';
export var NumberInputType;
(function (NumberInputType) {
    NumberInputType["Spinner"] = "Spinner";
    NumberInputType["Basic"] = "Basic";
    NumberInputType["Select"] = "Select";
})(NumberInputType || (NumberInputType = {}));
var defaultProps = {
    min: 0,
    max: 10,
    step: 1,
    type: NumberInputType.Spinner,
    icons: {
        plusButton: 'plus',
        minusButton: 'minus',
        selectButton: 'chevron-down'
    }
};
/**
 * Renders the number input component
 */
var NumberInput = /** @class */ (function (_super) {
    __extends(NumberInput, _super);
    function NumberInput(props) {
        var _this = _super.call(this, props) || this;
        _this.handleChange = function (event) {
            var newValue = Number(event.target.value);
            _this.onChange(newValue);
        };
        _this.onChange = function (newValue) {
            if (isNaN(newValue))
                newValue = _this.min;
            if (newValue < _this.min)
                newValue = _this.min;
            if (newValue > _this.max)
                newValue = _this.max;
            if (_this.props.onChangeValue) {
                _this.props.onChangeValue(newValue);
            }
        };
        _this.handleKeyDown = function (event) {
            var keyCode = getKeyCodeForEvent(event);
            switch (keyCode) {
                case KeyCode.Plus:
                case KeyCode.UpArrow:
                    event.preventDefault();
                    _this.incrementValue();
                    break;
                case KeyCode.Minus:
                case KeyCode.DownArrow:
                    event.preventDefault();
                    _this.decrementValue();
                    break;
                default:
                    _this.handleChange(event);
            }
        };
        _this.handleWheel = function (event) {
            if (_this.props.disabled) {
                event.preventDefault();
                return;
            }
            var delta = event.deltaY;
            if (!delta || delta === 0)
                return; // no vertical scrolling
            if (delta > 0) { // scroll down
                _this.decrementValue();
            }
            else { // scroll up
                _this.incrementValue();
            }
            event.preventDefault();
        };
        _this.incrementValue = function () {
            var newValue = _this.value + _this.step;
            _this.onChange(newValue);
        };
        _this.handleIncrement = function (event) {
            event.preventDefault(); // prevent double tap zoom on mobile device
            _this.incrementValue();
        };
        _this.decrementValue = function () {
            var newValue = _this.value - _this.step;
            _this.onChange(newValue);
        };
        _this.handleDecrement = function (event) {
            event.preventDefault(); // prevent double tap zoom on mobile device
            _this.decrementValue();
        };
        _this.updateProps(props);
        return _this;
    }
    NumberInput.prototype.componentWillReceiveProps = function (props) {
        this.updateProps(props);
    };
    NumberInput.prototype.updateProps = function (props) {
        this.value = Number(props.value);
        this.min = props.min !== undefined ? props.min : defaultProps.min;
        this.max = props.max !== undefined ? props.max : defaultProps.max;
        this.step = props.step !== undefined ? props.step : defaultProps.step;
        this.type = props.type !== undefined ? props.type : defaultProps.type;
        this.icons = __assign({}, defaultProps.icons, props.icons);
        // Ensure that a safe number of options are rendered for the Select style
        if (this.type === 'Select' && (this.max - this.min) > 100) {
            this.min = defaultProps.min;
            this.max = defaultProps.max;
        }
        if (this.max < this.min)
            throw new RangeError("The min value: " + this.min + " must be lower than the max value: " + this.max);
        if (this.step <= 0)
            throw new RangeError('The step value must be greater than 0');
        if (this.value < this.min || this.value > this.max)
            throw new RangeError("The value: " + this.value + " must be within the min and max range of " + this.min + " & " + this.max + " respectively.");
    };
    NumberInput.prototype.render = function () {
        var _this = this;
        var _a = this.props, id = _a.id, name = _a.name, style = _a.style, disabled = _a.disabled, helpTextId = _a.helpTextId, label = _a.label;
        var b = bemClassBuilderFactory('v-number-input');
        var wrapperClass = b.block({ type: this.type });
        if (this.type === NumberInputType.Select) {
            return (React.createElement("div", { className: wrapperClass },
                React.createElement(Select, { id: id, name: name, value: this.value, icon: this.icons.selectButton, disabled: disabled, helpTextId: helpTextId, label: label, onChange: this.handleChange }, this.selectOptions())));
        }
        return (React.createElement("div", { className: wrapperClass },
            this.type === NumberInputType.Spinner &&
                React.createElement(Button, { className: b.element('button', { minus: true }), color: ButtonColor.Tertiary, onClick: this.handleDecrement, disabled: disabled || this.props.value === this.min, tabIndex: -1, icon: this.icons.minusButton, iconOnly: true }),
            React.createElement("input", { className: this.getInputClass(b.element('input'), style), type: "number", value: this.value, onChange: this.handleChange, onKeyDown: this.handleKeyDown, onWheel: this.handleWheel, ref: function (ele) { return (_this.input = ele); }, name: this.props.name, disabled: disabled, "aria-describedby": helpTextId, "aria-label": label }),
            this.type === NumberInputType.Spinner &&
                React.createElement(Button, { className: b.element('button', { plus: true }), color: ButtonColor.Tertiary, onClick: this.handleIncrement, disabled: disabled || this.props.value === this.max, tabIndex: -1, icon: this.icons.plusButton, iconOnly: true })));
    };
    NumberInput.prototype.getInputClass = function (elementClass, style) {
        var b = bemClassBuilderFactory('v-input');
        return b.block({ style: style }) + " " + elementClass;
    };
    NumberInput.prototype.selectOptions = function () {
        var options = new Array();
        for (var i = this.min; i <= this.max; i += this.step) {
            options.push(i);
        }
        return (options.map(function (value) {
            return React.createElement("option", { key: value.toString(), value: value.toString() }, value);
        }));
    };
    return NumberInput;
}(React.Component));
export { NumberInput };
//# sourceMappingURL=number-input.js.map