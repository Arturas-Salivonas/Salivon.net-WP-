import { SeatSelectionHandler } from '../../../../../api/src/stores/seating/helpers/types';
import { SeatLayout } from '../../../../../types/seating/seat-layout';
import { SeatPosition } from '../../../../../types/seating/seat-position';
import { NotificationStyle } from '../../notification/notification';
/**
 * Configuration options for the Seat Picker widget.
 * Note: All numerical sizes are relative to the parent container of the Seat Picker widget, unless otherwise specified.
 */
export interface SeatPickerWidgetConfig {
    /**
     * The seat layout to be rendered. Only required when using the Seat Picker widget to render a seat layout directly, without the API.
     */
    seatLayoutData?: SeatLayout;
    /**
     * An array of sold seat positions that should be displayed as friend seats. These seats will be highlighted in the seat map.
     */
    friendSeats?: SeatPosition[];
    /**
     * Configuration options for the seat selection handler and rules.
     */
    seatSelection?: SeatPickerWidgetSeatSelectionConfig;
    /**
     * Configuration options for the Seat Picker screen.
     */
    screen: SeatPickerWidgetScreenConfig;
    /**
     * Configuration options for the Seat Picker seats.
     */
    seats: SeatPickerWidgetSeatsConfig;
    /**
     * Configuration options for the Seat Picker row labels.
     */
    rowLabels: SeatPickerWidgetRowLabelsConfig;
    /**
     * Configuration options for the Seat Picker area labels.
     */
    areaLabels: SeatPickerWidgetAreaLabelsConfig;
    /**
     * Configuration options for the Seat Picker legend.
     */
    legend: SeatPickerWidgetLegendConfig;
    /**
     * Configuration options for the Seat Picker notification.
     */
    notification: SeatPickerWidgetNotificationConfig;
    /**
     * Configuration options for the Seat Picker map navigation.
     */
    navigation: SeatPickerWidgetNavigationConfig;
}
/**
 * Configuration options for the seat selection handler and rules.
 */
export interface SeatPickerWidgetSeatSelectionConfig {
    /**
     * A custom handler that handles selection and deselection of seats in a seat layout, and can validate the selection
     */
    handler: SeatSelectionHandler;
    /**
     * Configuration options for the seat selection rules. This property has no effect if a custom handler is being used.
     */
    rules: SeatPickerWidgetSeatSelectionRulesConfig;
}
/**
 * Configuration options for the seat selection rules.
 */
export interface SeatPickerWidgetSeatSelectionRulesConfig {
    /**
     * Prevents the user from selecting any seats that are not available.
     */
    cannotSelectUnavailableSeats: SeatPickerWidgetSeatSelectionRuleConfig;
    /**
     * Prevents the user from selecting more seats in an area category than their ticket selection allows.
     * This rule only applies to ticket-first ordering mode.
     */
    cannotExceedAllocatedSeatsForAreaCategory: SeatPickerWidgetSeatSelectionRuleConfig;
    /**
     * Fails in ticket-first ordering mode when the number of seats selected is less than the number of tickets in the order
     */
    mustSelectAllSeatsAllocatedForOrder: SeatPickerWidgetSeatSelectionRuleConfig;
    /**
     * Fails in seat-first ordering mode when no seats have been selected.
     */
    mustSelectAtLeastOneSeat: SeatPickerWidgetSeatSelectionRuleConfig;
    /**
     * Fails if any sofas have been partially selected.
     */
    mustFillSofaSeats: SeatPickerWidgetSeatSelectionRuleConfig;
    /**
     * Fails if a companion seat is selected without selecting its associated wheelchair seat.
     */
    mustSelectAssociatedWheelchairSeat: SeatPickerWidgetSeatSelectionRuleConfig;
    /**
     * Fails if there is an available seat between any selected seats.
     */
    cannotLeaveGapsBetweenSelectedSeatsRule: SeatPickerWidgetCannotLeaveGapsBetweenSelectedSeatsRuleConfig;
    /**
     * Fails if there is a single available seat from a selected seat to an unavailbale seat, unless the available seat is the only remaining available seat in the group of contiguous seats.
     */
    cannotLeaveSingleSeatGapFromUnavailableSeat: SeatPickerWidgetCannotLeaveSingleSeatGapFromUnavailableSeatRuleConfig;
    /**
     * Fails if there is a single available seat from a selected seat to an aisle, unless the available seat is the only remaining available seat in the group of contiguous seats.
     */
    cannotLeaveSingleSeatGapFromAisle: SeatPickerWidgetCannotLeaveSingleSeatGapFromAisleRuleConfig;
}
export interface SeatPickerWidgetSeatSelectionRuleConfig {
    /**
     * Determines whether or not the rule is enfoced.
     * @default true
     */
    enabled: boolean;
}
export interface SeatPickerWidgetCannotLeaveGapsBetweenSelectedSeatsRuleConfig extends SeatPickerWidgetSeatSelectionRuleConfig {
    /**
     * If true, allow gaps between selected seats in the same row if the gap is two or more seats wide.
     * @default false
     */
    allowGapsWithMultipleSeatsBetweenSelectedSeats: boolean;
}
export interface SeatPickerWidgetCannotLeaveSingleSeatGapFromUnavailableSeatRuleConfig extends SeatPickerWidgetSeatSelectionRuleConfig {
    /**
     * If true, wheelchair seats can be selected regardless of whether they leave a single available seat gap from an unavailable seat.
     * @default true
     */
    ignoreSelectedWheelchairSeats: boolean;
    /**
     * If true, sofa seats can be selected regardless of whether they leave a single available seat gap from an unavailable seat.
     * @default true
     */
    ignoreSelectedSofaSeats: boolean;
}
export interface SeatPickerWidgetCannotLeaveSingleSeatGapFromAisleRuleConfig extends SeatPickerWidgetSeatSelectionRuleConfig {
    /**
     * If true, wheelchair seats can be selected regardless of whether they leave a single available seat gap from an aisle.
     * @default true
     */
    ignoreSelectedWheelchairSeats: boolean;
    /**
     * If true, sofa seats can be selected regardless of whether they leave a single available seat gap from an aisle.
     * @default true
     */
    ignoreSelectedSofaSeats: boolean;
    /**
     * If true, a seat gap between selected seats and an aisle is allowed if all seats between the gap and the closest unavailable seat in the row are selected.
     * @default false
     */
    allowWhenAllSeatsBetweenTheSeatGapAndAnUnavailableSeatAreSelected: boolean;
}
export declare enum SeatPickerWidgetScreenPosition {
    Top = "Top",
    Bottom = "Bottom"
}
export interface SeatPickerWidgetScreenConfig {
    /**
     * Defines the height of the screen.
     * @default 35
     * @minimum 0
     */
    height: number;
    /**
     * Defines the additional margin between the screen and seating areas.
     * @default 10
     * @minimum 0
     */
    margin: number;
    /**
     * The difference in length between the top and bottom sides of the screen.
     * @default 'Top'
     */
    position: SeatPickerWidgetScreenPosition;
    /**
     * The difference in length between the top and bottom sides of the screen.
     * @default 30
     * @minimum 0
     */
    bevelOffset: number;
}
export interface SeatPickerWidgetSeatsConfig {
    /**
     * Defines the minimum seat width and height.
     * @default 44
     * @minimum 0
     */
    minimumSize: number;
    /**
     * Defines the size of seat icons as a percentage of the seat size.
     * @default 20
     * @minimum 0
     * @maximum 100
     */
    iconSize: number;
    /**
     * Defines the icons to be displayed for each seat type.
     */
    icons: SeatPickerWidgetSeatIconsConfig;
    /**
     * Defines the margin around each seat.
     * @default 4
     * @minimum 0
     */
    margin: number;
    /**
     * Defines the shape of each seat.
     * @default 'Rectangle'
     */
    shape: SeatPickerWidgetShape;
    /**
     * Defines the border radius of each seat. Only applies when the shape is rectangle.
     * @default 4
     * @minimum 0
     */
    borderRadius: number;
    /**
     * Defines the width of each seat's border.
     * @default 2
     * @minimum 0
     */
    borderWidth: number;
    /**
     * Determines whether seat labels are displayed or not.
     * @default false
     */
    showLabels: boolean;
}
export declare enum SeatPickerWidgetShape {
    Round = "Round",
    Rectangle = "Rectangle"
}
export interface SeatPickerWidgetSeatIconsConfig {
    /**
     * Defines the icon displayed on Normal seats.
     * @default undefined
     */
    normal?: string;
    /**
     * Defines the icon displayed on Wheelchair seats.
     * @default 'wheelchair'
     */
    wheelchair?: string;
    /**
     * Defines the icon displayed on Companion seats.
     * @default 'person'
     */
    companion?: string;
    /**
     * Defines the icon displayed on Left Sofa seats.
     * @default undefined
     */
    sofaLeft?: string;
    /**
     * Defines the icon displayed on Middle Sofa seats.
     * @default undefined
     */
    sofaMiddle?: string;
    /**
     * Defines the icon displayed on Right Sofa seats.
     * @default undefined
     */
    sofaRight?: string;
    /**
     * Defines the icon displayed on Friend seats.
     * @default 'star'
     */
    friend?: string;
}
export interface SeatPickerWidgetRowLabelsConfig {
    /**
     * Defines the width and height of row labels.
     * @default 25
     * @minimum 0
     */
    size: number;
    /**
     * Defines the margin between the row labels and seating areas.
     * @default 8
     * @minimum 0
     */
    margin: number;
    /**
     * Defines the shape of each row label.
     * @default 'Rectangle'
     */
    shape: SeatPickerWidgetShape;
    /**
     * Defines the border radius of each row label. Only applies when the shape is rectangle.
     * @default 3
     * @minimum 0
     */
    borderRadius: number;
    /**
     * Defines the width of each row label's border.
     * @default 0
     * @minimum 0
     */
    borderWidth: number;
}
export interface SeatPickerWidgetAreaLabelsConfig {
    /**
     * Defines the margin between the area labels and seating areas.
     * @default 10
     * @minimum 0
     */
    margin: number;
    /**
     * Determines whether the area labels are shown or not.
     * @default false
     */
    show: boolean;
}
export interface SeatPickerWidgetLegendConfig {
    /**
     * Determines the position of the legend component.
     * @default 'Top'
     */
    position: SeatPickerWidgetLegendPosition;
    /**
     * Configuration options for the Seat Picker legend items.
     */
    items: SeatPickerWidgetLegendItemsConfig;
    /**
     * Defines the width and height of the legend's seat representations.
     * @default 25
     * @minimum 0
     */
    seatSize: number;
    /**
     * Defines the icon size of the legend's seat representations as a percentage of the seat size.
     * @default 70
     * @minimum 0
     * @maximum 100
     */
    seatIconSize: number;
    /**
     * Defines the shape of the legend's seat representation.
     * @default 'Rectangle'
     */
    seatShape: SeatPickerWidgetShape;
    /**
     * Defines the border radius of the legend's seat representation. Only applies when the shape is rectangle.
     * @default 3
     * @minimum 0
     */
    seatBorderRadius: number;
    /**
     * Defines the width of the legend's seat border.
     * @default 0
     * @minimum 0
     */
    seatBorderWidth: number;
}
export declare enum SeatPickerWidgetLegendPosition {
    Top = "Top",
    Bottom = "Bottom"
}
/**
 * Configuration options for the Seat Picker legend items.
 */
export interface SeatPickerWidgetLegendItemsConfig {
    /**
     * Configuration options for the 'available' Seat Picker legend item.
     */
    available: SeatPickerWidgetLegendItemConfig;
    /**
     * Configuration options for the 'unavailable' Seat Picker legend item.
     */
    unavailable: SeatPickerWidgetLegendItemConfig;
    /**
     * Configuration options for the 'selected' Seat Picker legend item.
     */
    selected: SeatPickerWidgetLegendItemConfig;
    /**
     * Configuration options for the 'wheelchair' Seat Picker legend item.
     */
    wheelchair: SeatPickerWidgetLegendItemConfig;
    /**
     * Configuration options for the 'companion' Seat Picker legend item.
     */
    companion: SeatPickerWidgetLegendItemConfig;
    /**
     * Configuration options for the 'friend' Seat Picker legend item.
     */
    friend: SeatPickerWidgetLegendItemConfig;
}
/**
 * Configuration options for an item within the Seat Picker legend.
 */
export interface SeatPickerWidgetLegendItemConfig {
    /**
     * Determines whether or not the legend item is displayed.
     */
    show: boolean;
    /**
     * Determines the order in which this legend item appears. Must be unique.
     */
    index: number;
    /**
     * The name of the icon to be used (for example, "wheelchair").
     */
    icon?: string;
}
export interface SeatPickerWidgetNotificationConfig {
    /**
     * Determines whether the Seat Picker notification is shown or not.
     * @default true
     */
    show: boolean;
    /**
     * Defines the style of the Seat Picker notification.
     * @default 'warning'
     */
    style: NotificationStyle;
}
export interface SeatPickerWidgetNavigationConfig {
    /**
     * Determines whether the Seat Picker map pan buttons are shown or not.
     * @default false
     */
    showPanButtons: boolean;
    /**
     * Determines whether the Seat Picker map zoom buttons are shown or not.
     * @default true
     */
    showZoomButtons: boolean;
}
export declare const defaultSeatPickerConfig: SeatPickerWidgetConfig;
