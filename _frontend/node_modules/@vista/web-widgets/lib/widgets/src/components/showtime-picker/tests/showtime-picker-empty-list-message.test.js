var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { ShowtimePickerMessage, ShowtimePickerMessageType } from '../components/showtime-picker-message';
import { defaultShowtimePickerAssets } from '../types/assets';
import { defaultShowtimePickerDisplayText } from '../types/display-text';
describe('ShowtimePickerEmptyListMessage', function () {
    var testProps = {
        messageType: ShowtimePickerMessageType.NoCinemasSelected,
        displayText: defaultShowtimePickerDisplayText,
        assets: defaultShowtimePickerAssets,
    };
    var customIconsAssets = __assign({}, defaultShowtimePickerAssets, { noSitesSelectedIconName: 'star', noShowtimesIconName: 'cross' });
    describe('No Cinemas Selected Error', function () {
        var messageType = ShowtimePickerMessageType.NoCinemasSelected;
        describe('Without a custom icon', function () {
            it('should render correctly', function () {
                var props = __assign({}, testProps, { messageType: messageType });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
        describe('With a custom icon', function () {
            it('should render correctly', function () {
                var props = __assign({}, testProps, { messageType: messageType, assets: customIconsAssets });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
    });
    describe('No Showtimes For Any Date Error', function () {
        var messageType = ShowtimePickerMessageType.NoShowtimesAllDates;
        describe('Without a custom icon', function () {
            it('should render correctly', function () {
                var props = __assign({}, testProps, { messageType: messageType });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
        describe('With a custom icon', function () {
            it('should render correctly', function () {
                var props = __assign({}, testProps, { messageType: messageType, assets: customIconsAssets });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
    });
    describe('No Showtimes for film on date error', function () {
        var messageType = ShowtimePickerMessageType.NoShowtimesForFilmOnDate;
        describe('Without a custom icon', function () {
            it('should render correctly', function () {
                var props = __assign({}, testProps, { messageType: messageType });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
        describe('With a specified film', function () {
            it('should render correctly with film title', function () {
                var props = __assign({}, testProps, { messageType: messageType, selectedFilmTitle: 'A Star is Born' });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
        describe('With a custom icon', function () {
            it('should render correctly', function () {
                var props = __assign({}, testProps, { messageType: messageType, assets: customIconsAssets });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
    });
    describe('No Showtimes for selected site on date Error', function () {
        var messageType = ShowtimePickerMessageType.NoShowtimesForSitesOnDate;
        describe('Without a custom icon', function () {
            it('should render correctly', function () {
                var props = __assign({}, testProps, { messageType: messageType });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
        describe('With a custom icon', function () {
            it('should render correctly', function () {
                var props = __assign({}, testProps, { messageType: messageType, assets: customIconsAssets });
                compareToSnapshot(React.createElement(ShowtimePickerMessage, __assign({}, props)));
            });
        });
    });
});
//# sourceMappingURL=showtime-picker-empty-list-message.test.js.map