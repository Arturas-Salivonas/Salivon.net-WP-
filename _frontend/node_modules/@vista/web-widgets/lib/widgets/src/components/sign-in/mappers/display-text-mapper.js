var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { fieldValidator } from '../../../../../api/src/utils/field-validator';
import { Validator } from '../../../../../api/src/utils/validator';
import { defaultSignInDisplayText } from '../types/display-text';
/**
 * Maps the display text provided via the API to the display text required by the Sign In widget.
 * Nulls out any invalid values and logs appropriate warnings.
 * Any undefined values will be replaced during mapping by the defaults.
 */
export function mapSignInDisplayText(displayText) {
    if (!displayText)
        return defaultSignInDisplayText;
    var valid = new Validator().ofType('object').validate(displayText, 'Sign in display text');
    if (!valid)
        return defaultSignInDisplayText;
    var validatedDisplayText = getValidatedTicketPickerDisplayText(displayText);
    return __assign({}, defaultSignInDisplayText, validatedDisplayText);
}
/**
 * Validates the display text values provided for the Sign In.
 * Removes any invalid values and logs appropriate warnings.
 */
export function getValidatedTicketPickerDisplayText(displayText) {
    var validateField = fieldValidator(displayText);
    var nullableValidator = new Validator().ofType('string').minLength(1).allowNull().allowUndefined();
    var validator = new Validator().ofType('string').minLength(1);
    validateField(validator, 'fieldSignInLabel', 'Sign in fieldSignInLabel');
    validateField(validator, 'buttonBackLabel', 'Sign in buttonBackLabel');
    validateField(validator, 'buttonSignInOptionLabel', 'Sign in buttonSignInOptionLabel');
    validateField(validator, 'fieldNameLabel', 'Sign in fieldNameLabel');
    validateField(nullableValidator, 'fieldNamePlaceholder', 'Sign in fieldNamePlaceholder');
    validateField(validator, 'fieldEmailLabel', 'Sign in fieldEmailLabel');
    validateField(nullableValidator, 'fieldEmailPlaceholder', 'Sign in fieldEmailPlaceholder');
    validateField(validator, 'fieldPasswordLabel', 'Sign in fieldPasswordLabel');
    validateField(nullableValidator, 'fieldPasswordPlaceholder', 'Sign in fieldPasswordPlaceholder');
    validateField(validator, 'buttonSignInLabel', 'Sign in buttonSignInLabel');
    validateField(validator, 'errorRequiredFieldMissingInputMessage', 'Sign in errorRequiredFieldMissingInputMessage');
    validateField(validator, 'errorMissingCaptchaVerificationMessage', 'Sign in errorMissingCaptchaVerificationMessage');
    validateField(validator, 'errorApiIncorrectLoginCredentialsMessage', 'Sign in errorApiIncorrectLoginCredentialsMessage');
    validateField(validator, 'errorApiFailedLoginMessage', 'Sign in errorApiFailedLoginMessage');
    validateField(validator, 'errorAuthProviderFailedLoginMessage', 'Sign in errorAuthProviderFailedLoginMessage');
    return displayText;
}
//# sourceMappingURL=display-text-mapper.js.map