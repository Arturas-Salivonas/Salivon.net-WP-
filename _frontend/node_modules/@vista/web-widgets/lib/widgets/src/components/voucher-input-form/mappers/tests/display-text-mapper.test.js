import { defaultVoucherInputFormDisplayText } from '../../types/display-text';
import { mapVoucherInputFormDisplayText } from '../display-text-mapper';
describe('mapVoucherInputFormDisplayText', function () {
    it('returns the default display text when the provided display text is undefined', function () {
        var result = mapVoucherInputFormDisplayText(undefined);
        expect(result).toEqual(defaultVoucherInputFormDisplayText);
    });
    it('returns the default display text when the provided display text is invalid', function () {
        var result = mapVoucherInputFormDisplayText({});
        expect(result).toEqual(defaultVoucherInputFormDisplayText);
    });
    var propertyTestCases = function (defaultValue, allowNull) {
        if (allowNull === void 0) { allowNull = false; }
        return [
            { value: undefined, expected: allowNull ? undefined : defaultValue },
            { value: null, expected: allowNull ? null : defaultValue },
            { value: 0, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: {}, expected: defaultValue },
            { value: [], expected: defaultValue },
            { value: 'valid', expected: 'valid' },
        ];
    };
    describe('fieldBarcodeLabel', function () {
        var testCases = propertyTestCases(defaultVoucherInputFormDisplayText.fieldBarcodeLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    fieldBarcodeLabel: testCase.value
                };
                var result = mapVoucherInputFormDisplayText(displayText);
                expect(result.fieldBarcodeLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('fieldBarcodePlaceholder', function () {
        var testCases = propertyTestCases(defaultVoucherInputFormDisplayText.fieldBarcodePlaceholder, true);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    fieldBarcodePlaceholder: testCase.value
                };
                var result = mapVoucherInputFormDisplayText(displayText);
                expect(result.fieldBarcodePlaceholder).toEqual(testCase.expected);
            });
        });
    });
    describe('fieldPinPlaceholder', function () {
        var testCases = propertyTestCases(defaultVoucherInputFormDisplayText.fieldPinPlaceholder, true);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    fieldPinPlaceholder: testCase.value
                };
                var result = mapVoucherInputFormDisplayText(displayText);
                expect(result.fieldPinPlaceholder).toEqual(testCase.expected);
            });
        });
    });
    describe('fieldPinLabel', function () {
        var testCases = propertyTestCases(defaultVoucherInputFormDisplayText.fieldPinLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    fieldPinLabel: testCase.value
                };
                var result = mapVoucherInputFormDisplayText(displayText);
                expect(result.fieldPinLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('buttonAddLabel', function () {
        var testCases = propertyTestCases(defaultVoucherInputFormDisplayText.buttonAddLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    buttonAddLabel: testCase.value
                };
                var result = mapVoucherInputFormDisplayText(displayText);
                expect(result.buttonAddLabel).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=display-text-mapper.test.js.map