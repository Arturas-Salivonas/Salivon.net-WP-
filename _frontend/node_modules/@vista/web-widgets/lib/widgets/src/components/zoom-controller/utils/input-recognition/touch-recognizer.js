var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { distanceBetweenPoints } from '../measurement-utils';
import { getAverageTouchDistanceFromTouchCenter, getCenterPointOfTouchEvent } from '../touch-event-utils';
import { InputRecognizer } from './input-recognizer';
var TouchState;
(function (TouchState) {
    TouchState[TouchState["None"] = 0] = "None";
    TouchState[TouchState["Tap"] = 1] = "Tap";
    TouchState[TouchState["DoubleTap"] = 2] = "DoubleTap";
    TouchState[TouchState["PinchPan"] = 3] = "PinchPan";
})(TouchState || (TouchState = {}));
var TouchRecognizer = /** @class */ (function (_super) {
    __extends(TouchRecognizer, _super);
    function TouchRecognizer(singleTapDelayThreshold, singleTapPositionThreshold) {
        var _this = _super.call(this) || this;
        _this.state = TouchState.None;
        _this.singleTapDelayElapsed = false;
        _this.touchStartEvents = [];
        _this.touchMoveEvents = [];
        _this.touchEndEvents = [];
        _this.onSingleTap = function (onSingleTapHandler) { return _this.onSingleTapHandler = onSingleTapHandler; };
        _this.onDoubleTap = function (onDoubleTapHandler) { return _this.onDoubleTapHandler = onDoubleTapHandler; };
        _this.onPinch = function (onPinchHandler) { return _this.onPinchHandler = onPinchHandler; };
        _this.start = function (event) {
            event.preventDefault();
            if (event.touches.length === 1) {
                if (_this.state === TouchState.None) {
                    _this.state = TouchState.Tap;
                    _this.handleFirstTap();
                }
                else if (_this.state === TouchState.Tap) {
                    if (!_this.touchWasWithinSingleTapPositionThreshold(event)) {
                        _this.resolveTap();
                        _this.start(event);
                        return;
                    }
                    else {
                        _this.state = TouchState.DoubleTap;
                        _this.clearFirstTap();
                    }
                }
            }
            else {
                _this.clearFirstTap();
            }
            _this.touchStartEvents.push(event);
        };
        _this.move = function (event) {
            event.preventDefault();
            if (_this.state === TouchState.Tap && !_this.touchWasWithinSingleTapPositionThreshold(event)) {
                _this.clearFirstTap();
            }
            var panned = _super.prototype.handlePan.call(_this, event);
            if (panned) {
                _this.state = TouchState.PinchPan;
            }
            if (event.touches.length > 1) {
                _this.handlePinch(event);
                _this.state = TouchState.PinchPan;
            }
            _this.touchMoveEvents.push(event);
        };
        _this.end = function (event) {
            event.preventDefault();
            _this.touchEndEvents.push(event);
            if (_this.state === TouchState.Tap || _this.state === TouchState.DoubleTap) {
                _this.tryResolveFirstTap();
            }
            else {
                _this.reset();
            }
        };
        _this.singleTapDelayThreshold = singleTapDelayThreshold || 250;
        _this.singleTapPositionThreshold = singleTapPositionThreshold || 10;
        return _this;
    }
    TouchRecognizer.prototype.reset = function () {
        _super.prototype.reset.call(this);
        clearTimeout(this.singleTapDelayTimer);
        this.singleTapDelayElapsed = false;
        this.touchStartEvents = [];
        this.touchEndEvents = [];
        this.touchMoveEvents = [];
        this.state = TouchState.None;
        this.initialPinchDistance = undefined;
    };
    TouchRecognizer.prototype.handlePinch = function (event) {
        var pinchDistance = getAverageTouchDistanceFromTouchCenter(event);
        if (this.initialPinchDistance === undefined) {
            this.initialPinchDistance = pinchDistance;
        }
        else if (this.onPinchHandler) {
            this.onPinchHandler(pinchDistance / this.initialPinchDistance, getCenterPointOfTouchEvent(event));
        }
    };
    TouchRecognizer.prototype.handleFirstTap = function () {
        var _this = this;
        this.singleTapDelayTimer = setTimeout(function () {
            _this.singleTapDelayElapsed = true;
            if (_this.touchStartEvents.length === 1 && _this.touchEndEvents.length === 1) {
                _this.tryResolveFirstTap();
            }
            else {
                // Could potentially emit a long press event here in the future
                _this.reset();
            }
        }, this.singleTapDelayThreshold);
    };
    TouchRecognizer.prototype.clearFirstTap = function () {
        clearTimeout(this.singleTapDelayTimer);
    };
    TouchRecognizer.prototype.tryResolveFirstTap = function () {
        if (this.state === TouchState.Tap) {
            if (this.singleTapDelayElapsed)
                this.resolveTap();
        }
        else if (this.state === TouchState.DoubleTap) {
            this.resolveTap();
        }
    };
    TouchRecognizer.prototype.resolveTap = function () {
        var firstTouchStart = this.touchStartEvents[0];
        var touchPoint = {
            x: firstTouchStart.touches[0].pageX,
            y: firstTouchStart.touches[0].pageY
        };
        if (this.state === TouchState.Tap && this.onSingleTapHandler) {
            this.onSingleTapHandler(touchPoint, firstTouchStart.target || undefined);
        }
        else if (this.state === TouchState.DoubleTap && this.onDoubleTapHandler) {
            this.onDoubleTapHandler(touchPoint, firstTouchStart.target || undefined);
        }
        this.reset();
    };
    TouchRecognizer.prototype.touchWasWithinSingleTapPositionThreshold = function (event) {
        var firstTapPoint = getCenterPointOfTouchEvent(this.touchStartEvents[0]);
        var currentTapPoint = getCenterPointOfTouchEvent(event);
        return distanceBetweenPoints(firstTapPoint, currentTapPoint) <= this.singleTapPositionThreshold;
    };
    return TouchRecognizer;
}(InputRecognizer));
export { TouchRecognizer };
//# sourceMappingURL=touch-recognizer.js.map