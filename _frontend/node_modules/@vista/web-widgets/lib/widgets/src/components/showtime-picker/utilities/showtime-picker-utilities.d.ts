import { BrowsingService } from '../../../../../api/src/services/browsing/browsing-service';
import { OrderService } from '../../../../../api/src/services/order/order-service';
import { BrowsingStore } from '../../../../../api/src/stores/browsing/browsing-store';
import { ConfigurationStore } from '../../../../../api/src/stores/configuration/configuration-store';
import { OrderStore } from '../../../../../api/src/stores/order/order-store';
import { Showtime } from '../../../../../types/browsing/showtime';
import { ShowtimeQuery } from '../../../../../types/browsing/showtime-query';
import { ShowtimePickerMessageType } from '../components/showtime-picker-message';
import { ShowtimePickerWidgetConfig } from '../types/config';
import { ShowtimePickerWidgetEvents } from '../types/events';
/**
 * Returns a ShowtimeQuery object that contains the filmId and siteId filters for the showtime picker widget,
 * based on the current config and browsing store selections.
 */
export declare const getShowtimesQuery: (browsingStore: BrowsingStore, filmIds: string[], siteIds?: string[] | null | undefined) => ShowtimeQuery;
/**
 * Asynchronously loads screening dates from the API
 */
export declare const loadScreeningDates: (browsingService: BrowsingService, showtimesQuery: ShowtimeQuery) => Promise<import("../../../../../types/browsing/screening-date").ScreeningDate[]>;
/**
 * Asynchronously loads the showtimes for the current query.
 * If a businessDate is provided, showtimes are loaded for that date.
 * If no businessDate is provided, showtimes are loaded for the first date with showtimes.
 */
export declare const loadShowtimes: (browsingService: BrowsingService, showtimesQuery: ShowtimeQuery, businessDate?: string | undefined) => Promise<Showtime[]>;
export declare const handleApiError: (err: Error) => ShowtimePickerMessageType;
/**
 * Action performed when a showtime button is clicked.
 */
export declare const handleShowtimeClicked: (showtime: Showtime, orderStore: OrderStore, configurationStore: ConfigurationStore, orderService: OrderService, events?: ShowtimePickerWidgetEvents | undefined) => Promise<void>;
/**
 * Action performed when a date is selected in the date picker
 */
export declare const handleDateSelected: (browsingService: BrowsingService, browsingStore: BrowsingStore, showtimesQuery: ShowtimeQuery, businessDate: string) => Promise<void>;
/**
 * Action performed when the action button is clicked.
 */
export declare const handleActionButtonClicked: (events?: ShowtimePickerWidgetEvents | undefined) => void;
export declare const validateShowtimePickerData: (screeningDateData: import("../../../../../api/src/stores/cache-tools/fetched-data").FetchedData<import("../../../../../types/browsing/screening-date").ScreeningDate[]>, showtimeData: import("../../../../../api/src/stores/cache-tools/fetched-data").FetchedData<string[]>, query: ShowtimeQuery, browsingStore: BrowsingStore, config: ShowtimePickerWidgetConfig) => {
    messageType: ShowtimePickerMessageType.NoCinemasSelected | ShowtimePickerMessageType.NoShowtimesForFilmOnDate | ShowtimePickerMessageType.NoShowtimesForSitesOnDate | ShowtimePickerMessageType.NoShowtimesAllDates;
    messageFilmTitle: string | undefined;
} | undefined;
