var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
import { PopFirstSelectedSeatHandler } from '../../../../../api/src/stores/seating/helpers/handlers/pop-first-selected-seat-handler';
import { seatingStoreInstance } from '../../../../../api/src/stores/seating/seating-store';
import { mapSeatPickerSeatSelectionRules } from './rules-mapper';
/**
 * Returns the seating options for the seat picker widget.
 */
export function mapSeatPickerSeatingOptions(config) {
    var _a = configurationStoreInstance.data.ticketing, isSeatFirstOrdering = _a.isSeatFirstOrdering, maximumAllowedTicketsInAnOrder = _a.maximumAllowedTicketsInAnOrder;
    var customHandler = undefined;
    var rules = undefined;
    if (config && config.seatSelection) {
        customHandler = config.seatSelection.handler;
        rules = config.seatSelection.rules;
    }
    var selectSeatHandler = customHandler
        ? customHandler
        : new PopFirstSelectedSeatHandler(mapSeatPickerSeatSelectionRules(rules), isSeatFirstOrdering, maximumAllowedTicketsInAnOrder);
    return __assign({}, seatingStoreInstance.options, { selectSeatHandler: selectSeatHandler });
}
//# sourceMappingURL=seating-options-mapper.js.map