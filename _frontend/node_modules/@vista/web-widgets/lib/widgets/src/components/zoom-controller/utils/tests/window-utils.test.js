import { getRelativePoint, getWindowScrollPosition } from '../window-utils';
var mockWindowScrollPosition = function (scroll, setPageOffset, setDoumentScroll) {
    if (setPageOffset === void 0) { setPageOffset = true; }
    if (setDoumentScroll === void 0) { setDoumentScroll = true; }
    window.pageXOffset = setPageOffset ? scroll.x : undefined;
    window.pageYOffset = setPageOffset ? scroll.y : undefined;
    document.documentElement.scrollLeft = setDoumentScroll ? scroll.x : undefined;
    document.documentElement.scrollTop = setDoumentScroll ? scroll.y : undefined;
};
describe('getWindowScrollPosition', function () {
    var testCases = [
        {
            scrollPosition: { x: 10, y: 5 },
            setPageOffset: true,
            setDoumentScroll: false,
            expectedResult: { x: 10, y: 5 }
        },
        {
            scrollPosition: { x: 20, y: 15 },
            setPageOffset: false,
            setDoumentScroll: true,
            expectedResult: { x: 20, y: 15 }
        },
        {
            scrollPosition: { x: 25, y: 30 },
            setPageOffset: true,
            setDoumentScroll: true,
            expectedResult: { x: 25, y: 30 }
        },
    ];
    testCases.forEach(function (_a) {
        var scrollPosition = _a.scrollPosition, setPageOffset = _a.setPageOffset, setDoumentScroll = _a.setDoumentScroll, expectedResult = _a.expectedResult;
        it("returns the correct (x: " + expectedResult.x + ", y: " + expectedResult.y + ")", function () {
            mockWindowScrollPosition(scrollPosition, setPageOffset, setDoumentScroll);
            var result = getWindowScrollPosition();
            expect(result).toEqual(expectedResult);
        });
    });
});
describe('getRelativePoint', function () {
    var testCases = [
        {
            windowPoint: { x: 100, y: 100 },
            scrollPosition: { x: 50, y: 50 },
            elementPosition: { x: 100, y: 20 },
            expectedResult: { x: 50, y: 30 }
        }
    ];
    testCases.forEach(function (_a) {
        var windowPoint = _a.windowPoint, scrollPosition = _a.scrollPosition, elementPosition = _a.elementPosition, expectedResult = _a.expectedResult;
        it("returns the correct point (x: " + expectedResult.x + ", y: " + expectedResult.y + ") for window point (x: " + windowPoint.x + ", y: " + windowPoint.y + ")", function () {
            var element = {
                getBoundingClientRect: function () {
                    return {
                        left: elementPosition.x,
                        top: elementPosition.y
                    };
                }
            };
            mockWindowScrollPosition(scrollPosition);
            var result = getRelativePoint(windowPoint, element);
            expect(result).toEqual(expectedResult);
        });
    });
});
//# sourceMappingURL=window-utils.test.js.map