var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { format, isSameDay, setDate, setHours, setMinutes, startOfTomorrow } from 'date-fns';
import { browsingStoreInstance } from '../../../../../api/src/stores/browsing/browsing-store';
import { getLoadingFetchedData } from '../../../../../api/src/stores/cache-tools/fetched-data';
import { exampleCensorRatings } from '../../../../../example-data/browsing/censor-rating';
import { exampleFilm, exampleFilms } from '../../../../../example-data/browsing/film';
import { exampleGenres } from '../../../../../example-data/browsing/genre';
import { examplePeople } from '../../../../../example-data/browsing/person';
import { exampleShowtimeAttributes } from '../../../../../example-data/browsing/showtime-attributes';
import { exampleShowtimes } from '../../../../../example-data/browsing/showtimes';
import { exampleSite, exampleSites } from '../../../../../example-data/browsing/site';
import { LoadingState } from '../../../../../types/loading-state';
// TODO: Move this code out to make example services more reusable
var screeningDates = [startOfTomorrow(), setDate(startOfTomorrow(), startOfTomorrow().getDate() + 7)]
    .map(function (d) { return format(d, 'YYYY-MM-DD'); });
function delay(ms) {
    return __awaiter(this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            return [2 /*return*/, new Promise(function (resolve) { return setTimeout(resolve, ms); })];
        });
    });
}
var getExampleShowtimesForBusinessDate = function (businessDate) {
    return exampleShowtimes.map(function (showtime) {
        var newStartTime = new Date(businessDate);
        newStartTime = setHours(newStartTime, showtime.startTime.getHours());
        newStartTime = setMinutes(newStartTime, showtime.startTime.getMinutes());
        return __assign({}, showtime, { businessDate: businessDate, startTime: newStartTime });
    });
};
var setBrowsingStoreExampleRelatedData = function () {
    var attributesMap = new Map();
    Object.values(exampleShowtimeAttributes).forEach(function (exampleAttr) { return attributesMap.set(exampleAttr.id, exampleAttr); });
    var sitesMap = new Map();
    exampleSites.forEach(function (exampleSite) { return sitesMap.set(exampleSite.id, exampleSite); });
    var filmsMap = new Map();
    exampleFilms.forEach(function (film) { return filmsMap.set(film.id, film); });
    var peopleMap = new Map();
    examplePeople.forEach(function (people) { return peopleMap.set(people.id, people); });
    var censorRatingMap = new Map();
    exampleCensorRatings.forEach(function (rating) { return censorRatingMap.set(rating.id, rating); });
    var genresMap = new Map();
    exampleGenres.forEach(function (genre) { return genresMap.set(genre.id, genre); });
    var showtimesMap = new Map();
    screeningDates.forEach(function (date) {
        getExampleShowtimesForBusinessDate(date).forEach(function (showtime) { return showtimesMap.set(showtime.id, showtime); });
    });
    browsingStoreInstance.setData({
        filmsById: filmsMap,
        sitesById: sitesMap,
        showtimeAttributesById: attributesMap,
        showtimesById: showtimesMap
    });
};
var getShowtimesForFirstDateShowtimePickerExample = function (query) { return __awaiter(_this, void 0, void 0, function () {
    var showtimes, showtimesMap, showtimesForDate;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                setBrowsingStoreExampleRelatedData();
                showtimes = getExampleShowtimesForBusinessDate(screeningDates[0]);
                showtimesMap = new Map();
                showtimes.forEach(function (showtime) { return showtimesMap.set(showtime.id, showtime); });
                showtimesForDate = {
                    loadingState: LoadingState.Success,
                    payload: showtimes.map(function (showtime) { return showtime.id; }),
                    timestamp: new Date()
                };
                return [4 /*yield*/, delay(2000)];
            case 1:
                _a.sent();
                browsingStoreInstance.actions.setShowtimesForQueryOnBusinessDate(showtimesForDate, query, screeningDates[0]);
                return [2 /*return*/, showtimes];
        }
    });
}); };
var getShowtimeByIdExample = function (showtimeId) { return __awaiter(_this, void 0, void 0, function () {
    var showtime;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                setBrowsingStoreExampleRelatedData();
                showtime = getExampleShowtimesForBusinessDate(screeningDates[0])[0];
                return [4 /*yield*/, delay(2000)];
            case 1:
                _a.sent();
                browsingStoreInstance.actions.addShowtimes([showtime]);
                return [2 /*return*/, showtime];
        }
    });
}); };
var getShowtimesForBusinessDateShowtimePickerExample = function (businessDate, query) { return __awaiter(_this, void 0, void 0, function () {
    var showtimes, showtimesMap_1, showtimesForDate;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!(screeningDates.findIndex(function (screeningDate) { return isSameDay(screeningDate, businessDate); }) !== -1)) return [3 /*break*/, 2];
                setBrowsingStoreExampleRelatedData();
                showtimes = getExampleShowtimesForBusinessDate(businessDate);
                showtimesMap_1 = new Map();
                showtimes.forEach(function (showtime) { return showtimesMap_1.set(showtime.id, showtime); });
                showtimesForDate = {
                    loadingState: LoadingState.Success,
                    payload: showtimes.map(function (showtime) { return showtime.id; }),
                    timestamp: new Date()
                };
                browsingStoreInstance.actions.setShowtimesForQueryOnBusinessDate(getLoadingFetchedData(), query, businessDate);
                return [4 /*yield*/, delay(2000)];
            case 1:
                _a.sent();
                browsingStoreInstance.actions.setShowtimesForQueryOnBusinessDate(showtimesForDate, query, businessDate);
                return [2 /*return*/, showtimes];
            case 2: return [2 /*return*/, Promise.resolve([])];
        }
    });
}); };
var getScreeningDatesShowtimePickerExample = function (query) { return __awaiter(_this, void 0, void 0, function () {
    var screeningDatesForQuery;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                screeningDatesForQuery = {
                    loadingState: LoadingState.Success,
                    payload: screeningDates.map(function (date) {
                        return {
                            businessDate: date,
                            screeningDetails: []
                        };
                    }),
                    timestamp: new Date()
                };
                browsingStoreInstance.actions.setScreeningDatesForQuery(getLoadingFetchedData(), query);
                return [4 /*yield*/, delay(1000)];
            case 1:
                _a.sent();
                browsingStoreInstance.actions.setScreeningDatesForQuery(screeningDatesForQuery, query);
                return [2 /*return*/, screeningDatesForQuery.payload];
        }
    });
}); };
/**
 * Example instance of the browsing service for Showtime Picker
 */
export var showtimePickerExampleBrowsingService = {
    loadFilms: function () { return Promise.resolve([]); },
    loadFilmsForSite: function () { return Promise.resolve([]); },
    loadFilmById: function () { return Promise.resolve(exampleFilm); },
    loadSites: function () { return Promise.resolve([]); },
    loadSiteById: function () { return Promise.resolve(exampleSite); },
    loadShowtimeById: getShowtimeByIdExample,
    loadShowtimesForFirstBusinessDate: getShowtimesForFirstDateShowtimePickerExample,
    loadShowtimesForBusinessDate: getShowtimesForBusinessDateShowtimePickerExample,
    loadScreeningDates: getScreeningDatesShowtimePickerExample
};
//# sourceMappingURL=example-browsing-service.js.map