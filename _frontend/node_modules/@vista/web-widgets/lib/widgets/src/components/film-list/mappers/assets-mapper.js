var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { fieldValidator } from '../../../../../api/src/utils/field-validator';
import { Validator } from '../../../../../api/src/utils/validator';
import { defaultFilmListAssets } from '../types/assets';
/**
 * Maps the assets provided via the API to the assets required by the Film List widget.
 * Nulls out any invalid values and logs appropriate warnings.
 * Any undefined values will be replaced during mapping by the defaults.
 */
export function mapFilmListAssets(assets) {
    if (!assets)
        return defaultFilmListAssets;
    var valid = new Validator().ofType('object').validate(assets, 'Film List assets');
    if (!valid)
        return defaultFilmListAssets;
    var validatedAssets = getValidatedFilmListAssets(assets);
    return __assign({}, defaultFilmListAssets, validatedAssets);
}
/**
 * Validates the asset values provided for the Film List.
 * Removes any invalid values and logs appropriate warnings.
 */
export function getValidatedFilmListAssets(assets) {
    var validateField = fieldValidator(assets);
    var validator = new Validator().ofType('string').minLength(1);
    validateField(validator, 'noFilmsForTabIconName', 'Film List noFilmsForTabIconName');
    validateField(validator, 'failedToLoadDataIconName', 'Film List failedToLoadDataIconName');
    return assets;
}
//# sourceMappingURL=assets-mapper.js.map