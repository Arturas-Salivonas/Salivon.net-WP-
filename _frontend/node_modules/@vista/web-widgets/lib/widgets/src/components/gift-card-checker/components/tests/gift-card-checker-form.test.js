var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import * as React from 'react';
import { create } from 'react-test-renderer';
import { exampleMxGiftCardOne } from '../../../../../../example-data/gift-cards';
import { compareToSnapshot } from '../../../../tests/compare-to-snapshot';
import { defaultGiftCardCheckerConfig } from '../../types/config';
import { defaultGiftCardCheckerDisplayText } from '../../types/display-text';
import { CaptchaValidationResult, GiftCardCheckerForm, GiftCardNumberValidationResult } from '../gift-card-checker-form';
describe('GiftCardCheckerForm', function () {
    var props = {
        displayText: defaultGiftCardCheckerDisplayText,
        config: defaultGiftCardCheckerConfig,
        getGiftCardDetails: jest.fn().mockResolvedValue(exampleMxGiftCardOne),
        onCardDetailsRetrieved: jest.fn()
    };
    var propsWithCaptcha = __assign({}, props, { captchaConfig: {
            siteKey: '6LeIxAcTAAAAAJcZVRqyHh71UMIEGNQ_MXjiZKhI'
        } });
    var getGiftCardCheckerForm = function (formProps) {
        if (formProps === void 0) { formProps = props; }
        var renderer = create(React.createElement(GiftCardCheckerForm, __assign({}, formProps)));
        var form = renderer.getInstance();
        return { renderer: renderer, form: form };
    };
    beforeEach(function () {
        jest.clearAllMocks();
    });
    describe('render', function () {
        it('renders correctly', function () {
            compareToSnapshot(React.createElement(GiftCardCheckerForm, __assign({}, props)));
        });
        it('renders an error', function () {
            var _a = getGiftCardCheckerForm(), renderer = _a.renderer, form = _a.form;
            form.setState({
                error: 'This is an error'
            });
            var tree = renderer.toJSON();
            expect(tree).toMatchSnapshot();
        });
        it('renders the card number value', function () {
            var _a = getGiftCardCheckerForm(), renderer = _a.renderer, form = _a.form;
            form.setState({
                cardNumber: 'cardnumber'
            });
            var tree = renderer.toJSON();
            expect(tree).toMatchSnapshot();
        });
        it('renders the captcha when configured', function () {
            compareToSnapshot(React.createElement(GiftCardCheckerForm, __assign({}, propsWithCaptcha)));
        });
    });
    describe('handleCardNumberChanged', function () {
        it('updates the state', function () {
            var form = getGiftCardCheckerForm().form;
            form.handleCardNumberChanged('');
            expect(form.state.cardNumber).toEqual('');
            form.handleCardNumberChanged('test');
            expect(form.state.cardNumber).toEqual('test');
        });
        it('removes whitespace', function () {
            var form = getGiftCardCheckerForm().form;
            form.handleCardNumberChanged('   hello   ');
            expect(form.state.cardNumber).toEqual('hello');
        });
    });
    describe('handleCaptchaChanged ', function () {
        it('updates the state', function () {
            var form = getGiftCardCheckerForm(propsWithCaptcha).form;
            form.handleCaptchaChanged(undefined);
            expect(form.state.captchaResponse).toEqual(undefined);
            form.handleCaptchaChanged('test');
            expect(form.state.captchaResponse).toEqual('test');
        });
    });
    describe('validateGiftCardNumber', function () {
        it('returns valid for a valid card number', function () {
            var form = getGiftCardCheckerForm().form;
            expect(form.validateGiftCardNumber('12345')).toEqual(GiftCardNumberValidationResult.Valid);
        });
        it('returns an error message for an invalid card number', function () {
            var form = getGiftCardCheckerForm().form;
            expect(form.validateGiftCardNumber('')).toEqual(GiftCardNumberValidationResult.CardNumberMissing);
        });
    });
    describe('validateCaptcha', function () {
        it('returns valid when the captcha is not configured', function () {
            var form = getGiftCardCheckerForm().form;
            expect(form.validateCaptcha(undefined, undefined)).toEqual(CaptchaValidationResult.Valid);
        });
        it('returns valid when the captcha response has been received', function () {
            var form = getGiftCardCheckerForm().form;
            expect(form.validateCaptcha(propsWithCaptcha.captchaConfig, 'test')).toEqual(CaptchaValidationResult.Valid);
        });
        it('returns invalid when the captcha response has not been received', function () {
            var form = getGiftCardCheckerForm().form;
            expect(form.validateCaptcha(propsWithCaptcha.captchaConfig, undefined)).toEqual(CaptchaValidationResult.Invalid);
        });
    });
    describe('handleSubmit', function () {
        var event = {
            preventDefault: jest.fn()
        };
        it('prevents default', function () { return __awaiter(_this, void 0, void 0, function () {
            var form;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(1);
                        form = getGiftCardCheckerForm().form;
                        return [4 /*yield*/, form.handleSubmit(event)];
                    case 1:
                        _a.sent();
                        expect(event.preventDefault).toHaveBeenCalledTimes(1);
                        return [2 /*return*/];
                }
            });
        }); });
        it('displays an error if the card number in invalid', function () { return __awaiter(_this, void 0, void 0, function () {
            var form;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(2);
                        form = getGiftCardCheckerForm().form;
                        form.validateGiftCardNumber = jest.fn().mockReturnValue(GiftCardNumberValidationResult.CardNumberMissing);
                        return [4 /*yield*/, form.handleSubmit(event)];
                    case 1:
                        _a.sent();
                        expect(form.state.error).toEqual(props.displayText.errorCardNumberRequiredMessage);
                        expect(props.getGiftCardDetails).not.toHaveBeenCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('displays an error if the captcha response is missing', function () { return __awaiter(_this, void 0, void 0, function () {
            var form;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(2);
                        form = getGiftCardCheckerForm().form;
                        form.validateGiftCardNumber = jest.fn().mockReturnValue(GiftCardNumberValidationResult.Valid);
                        form.validateCaptcha = jest.fn().mockReturnValue(CaptchaValidationResult.Invalid);
                        return [4 /*yield*/, form.handleSubmit(event)];
                    case 1:
                        _a.sent();
                        expect(form.state.error).toEqual(props.displayText.errorMissingCaptchaVerificationMessage);
                        expect(props.getGiftCardDetails).not.toHaveBeenCalled();
                        return [2 /*return*/];
                }
            });
        }); });
        it('retrieves the card details if the card number is valid', function () { return __awaiter(_this, void 0, void 0, function () {
            var form, cardNumber;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(2);
                        form = getGiftCardCheckerForm().form;
                        cardNumber = '123';
                        form.setState({
                            cardNumber: cardNumber
                        });
                        form.validateGiftCardNumber = jest.fn().mockReturnValue(GiftCardNumberValidationResult.Valid);
                        return [4 /*yield*/, form.handleSubmit(event)];
                    case 1:
                        _a.sent();
                        expect(form.state.error).toEqual(undefined);
                        expect(props.getGiftCardDetails).toHaveBeenCalledWith(cardNumber, undefined);
                        return [2 /*return*/];
                }
            });
        }); });
        it('shows the loading indicator', function () { return __awaiter(_this, void 0, void 0, function () {
            var form, resolvePromise, formSubmit;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(2);
                        form = getGiftCardCheckerForm().form;
                        form.validateGiftCardNumber = jest.fn().mockReturnValue(GiftCardNumberValidationResult.Valid);
                        resolvePromise = function () { return undefined; };
                        props.getGiftCardDetails.mockReturnValueOnce(new Promise(function (res) { return resolvePromise = res; }));
                        formSubmit = form.handleSubmit(event);
                        expect(form.state.isLoading).toEqual(true);
                        resolvePromise(exampleMxGiftCardOne);
                        return [4 /*yield*/, formSubmit];
                    case 1:
                        _a.sent();
                        expect(form.state.isLoading).toEqual(false);
                        return [2 /*return*/];
                }
            });
        }); });
        it('updates the state and calls onCardDetailsRetrieved when a valid card is retrieved', function () { return __awaiter(_this, void 0, void 0, function () {
            var form;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(3);
                        form = getGiftCardCheckerForm().form;
                        form.validateGiftCardNumber = jest.fn().mockReturnValue(GiftCardNumberValidationResult.Valid);
                        return [4 /*yield*/, form.handleSubmit(event)];
                    case 1:
                        _a.sent();
                        expect(form.state.isLoading).toEqual(false);
                        expect(form.state.error).toEqual(undefined);
                        expect(props.onCardDetailsRetrieved).toHaveBeenCalledWith(exampleMxGiftCardOne);
                        return [2 /*return*/];
                }
            });
        }); });
        it('updates the state when the card is invalid', function () { return __awaiter(_this, void 0, void 0, function () {
            var form;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(3);
                        form = getGiftCardCheckerForm().form;
                        form.validateGiftCardNumber = jest.fn().mockReturnValue(GiftCardNumberValidationResult.Valid);
                        props.getGiftCardDetails.mockReturnValueOnce(Promise.reject('rejected'));
                        return [4 /*yield*/, form.handleSubmit(event)];
                    case 1:
                        _a.sent();
                        expect(form.state.isLoading).toEqual(false);
                        expect(form.state.error).toEqual(props.displayText.errorCouldNotGetGiftCardDetailsMessage);
                        expect(props.onCardDetailsRetrieved).not.toHaveBeenCalled();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('resetCaptcha', function () {
        it('resets the captcha', function () {
            var form = getGiftCardCheckerForm().form;
            var captcha = { reset: jest.fn() };
            form.captchaRef.current = captcha;
            form.resetCaptcha();
            expect(captcha.reset).toHaveBeenCalled();
        });
        it('updates the state', function () {
            var form = getGiftCardCheckerForm().form;
            form.setState({ captchaResponse: 'test' });
            form.resetCaptcha();
            expect(form.state.captchaResponse).toEqual(undefined);
        });
    });
});
//# sourceMappingURL=gift-card-checker-form.test.js.map