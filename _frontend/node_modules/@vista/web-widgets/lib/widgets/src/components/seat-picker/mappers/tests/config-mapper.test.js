var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { NotificationStyle } from '../../../../../../widgets/src/components/notification/notification';
import { defaultSeatPickerConfig, SeatPickerWidgetLegendPosition, SeatPickerWidgetScreenPosition, SeatPickerWidgetShape } from '../../types/config';
import { mapSeatPickerConfig } from '../config-mapper';
describe('mapSeatPickerConfig', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapSeatPickerConfig(undefined);
        expect(result).toEqual(defaultSeatPickerConfig);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapSeatPickerConfig(true);
        expect(result).toEqual(defaultSeatPickerConfig);
    });
});
describe('mapSeatPickerConfig.screen', function () {
    it('returns the default screen config when the provided screen config is undefined', function () {
        var config = {
            screen: undefined
        };
        var result = mapSeatPickerConfig(config).screen;
        expect(result).toEqual(defaultSeatPickerConfig.screen);
    });
    describe('height', function () {
        var defaultValue = defaultSeatPickerConfig.screen.height;
        var testCases = [
            { value: 0, expected: 0 },
            { value: 10, expected: 10 },
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    screen: {
                        height: testCase.value
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.screen.height).toEqual(testCase.expected);
            });
        });
    });
    describe('margin', function () {
        var defaultValue = defaultSeatPickerConfig.screen.margin;
        var testCases = [
            { value: 0, expected: 0 },
            { value: 10, expected: 10 },
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    screen: {
                        margin: testCase.value
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.screen.margin).toEqual(testCase.expected);
            });
        });
    });
    describe('bevelOffset', function () {
        var defaultValue = defaultSeatPickerConfig.screen.bevelOffset;
        var testCases = [
            { value: 0, expected: 0 },
            { value: 10, expected: 10 },
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    screen: {
                        bevelOffset: testCase.value
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.screen.bevelOffset).toEqual(testCase.expected);
            });
        });
    });
    describe('position', function () {
        var defaultValue = defaultSeatPickerConfig.screen.position;
        var testCases = [
            { value: 'Top', expected: SeatPickerWidgetScreenPosition.Top },
            { value: 'Bottom', expected: SeatPickerWidgetScreenPosition.Bottom },
            { value: -1, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    screen: {
                        position: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.screen.position).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapSeatPickerConfig.seats', function () {
    it('returns the default seats config when the provided seats config is undefined', function () {
        var config = {
            seats: undefined
        };
        var result = mapSeatPickerConfig(config).seats;
        expect(result).toEqual(defaultSeatPickerConfig.seats);
    });
    describe('minimumSize', function () {
        var defaultValue = defaultSeatPickerConfig.seats.minimumSize;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    seats: {
                        minimumSize: testCase.value
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.seats.minimumSize).toEqual(testCase.expected);
            });
        });
    });
    describe('iconSize', function () {
        var defaultValue = defaultSeatPickerConfig.seats.iconSize;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: 101, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    seats: {
                        iconSize: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.seats.iconSize).toEqual(testCase.expected);
            });
        });
    });
    describe('margin', function () {
        var defaultValue = defaultSeatPickerConfig.seats.margin;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    seats: {
                        margin: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.seats.margin).toEqual(testCase.expected);
            });
        });
    });
    describe('shape', function () {
        var defaultValue = defaultSeatPickerConfig.seats.shape;
        var testCases = [
            { value: 'Round', expected: SeatPickerWidgetShape.Round },
            { value: 'Rectangle', expected: SeatPickerWidgetShape.Rectangle },
            { value: -1, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    seats: {
                        shape: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.seats.shape).toEqual(testCase.expected);
            });
        });
    });
    describe('borderRadius', function () {
        var defaultValue = defaultSeatPickerConfig.seats.borderRadius;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    seats: {
                        borderRadius: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.seats.borderRadius).toEqual(testCase.expected);
            });
        });
    });
    describe('showLabels', function () {
        var defaultValue = defaultSeatPickerConfig.seats.showLabels;
        var testCases = [
            { value: true, expected: true },
            { value: false, expected: false },
            { value: 1, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    seats: {
                        showLabels: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.seats.showLabels).toEqual(testCase.expected);
            });
        });
    });
    describe('borderWidth', function () {
        var defaultValue = defaultSeatPickerConfig.seats.borderWidth;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    seats: {
                        borderWidth: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.seats.borderWidth).toEqual(testCase.expected);
            });
        });
    });
    describe('icons', function () {
        var defaultValue = defaultSeatPickerConfig.seats.icons;
        var testCases = [
            { value: 0, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: {}, expected: defaultValue },
            { value: { companion: undefined }, expected: __assign({}, defaultValue, { companion: undefined }) },
            { value: { companion: null }, expected: __assign({}, defaultValue, { companion: null }) },
            { value: { companion: '' }, expected: defaultValue },
            { value: { companion: 'test' }, expected: __assign({}, defaultValue, { companion: 'test' }) }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                var config = {
                    seats: {
                        icons: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.seats.icons).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapSeatPickerConfig.rowLabels', function () {
    it('returns the default row labels config when the provided row labels config is undefined', function () {
        var config = {
            rowLabels: undefined
        };
        var result = mapSeatPickerConfig(config).rowLabels;
        expect(result).toEqual(defaultSeatPickerConfig.rowLabels);
    });
    describe('size', function () {
        var defaultValue = defaultSeatPickerConfig.rowLabels.size;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    rowLabels: {
                        size: testCase.value
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.rowLabels.size).toEqual(testCase.expected);
            });
        });
    });
    describe('margin', function () {
        var defaultValue = defaultSeatPickerConfig.rowLabels.margin;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    rowLabels: {
                        margin: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.rowLabels.margin).toEqual(testCase.expected);
            });
        });
    });
    describe('shape', function () {
        var defaultValue = defaultSeatPickerConfig.rowLabels.shape;
        var testCases = [
            { value: 'Round', expected: SeatPickerWidgetShape.Round },
            { value: 'Rectangle', expected: SeatPickerWidgetShape.Rectangle },
            { value: -1, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    rowLabels: {
                        shape: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.rowLabels.shape).toEqual(testCase.expected);
            });
        });
    });
    describe('borderRadius', function () {
        var defaultValue = defaultSeatPickerConfig.rowLabels.borderRadius;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    rowLabels: {
                        borderRadius: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.rowLabels.borderRadius).toEqual(testCase.expected);
            });
        });
    });
    describe('borderWidth', function () {
        var defaultValue = defaultSeatPickerConfig.rowLabels.borderWidth;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    rowLabels: {
                        borderWidth: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.rowLabels.borderWidth).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapSeatPickerConfig.areaLabels', function () {
    it('returns the default area labels config when the provided area labels config is undefined', function () {
        var config = {
            areaLabels: undefined
        };
        var result = mapSeatPickerConfig(config).areaLabels;
        expect(result).toEqual(defaultSeatPickerConfig.areaLabels);
    });
    describe('show', function () {
        var defaultValue = defaultSeatPickerConfig.areaLabels.show;
        var testCases = [
            { value: true, expected: true },
            { value: false, expected: false },
            { value: 1, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    areaLabels: {
                        show: testCase.value
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.areaLabels.show).toEqual(testCase.expected);
            });
        });
    });
    describe('margin', function () {
        var defaultValue = defaultSeatPickerConfig.areaLabels.margin;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    areaLabels: {
                        margin: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.areaLabels.margin).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapSeatPickerConfig.legend', function () {
    it('returns the default legend config when the provided legend config is undefined', function () {
        var config = {
            legend: undefined
        };
        var result = mapSeatPickerConfig(config).legend;
        expect(result).toEqual(defaultSeatPickerConfig.legend);
    });
    describe('position', function () {
        var defaultValue = defaultSeatPickerConfig.legend.position;
        var testCases = [
            { value: 'Top', expected: SeatPickerWidgetLegendPosition.Top },
            { value: 'Bottom', expected: SeatPickerWidgetLegendPosition.Bottom },
            { value: -1, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    legend: {
                        position: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.legend.position).toEqual(testCase.expected);
            });
        });
    });
    describe('seatSize', function () {
        var defaultValue = defaultSeatPickerConfig.legend.seatSize;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    legend: {
                        seatSize: testCase.value
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.legend.seatSize).toEqual(testCase.expected);
            });
        });
    });
    describe('seatIconSize', function () {
        var defaultValue = defaultSeatPickerConfig.legend.seatIconSize;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: 101, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    legend: {
                        seatIconSize: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.legend.seatIconSize).toEqual(testCase.expected);
            });
        });
    });
    describe('seatShape', function () {
        var defaultValue = defaultSeatPickerConfig.legend.seatShape;
        var testCases = [
            { value: 'Round', expected: SeatPickerWidgetShape.Round },
            { value: 'Rectangle', expected: SeatPickerWidgetShape.Rectangle },
            { value: -1, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    legend: {
                        seatShape: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.legend.seatShape).toEqual(testCase.expected);
            });
        });
    });
    describe('seatBorderRadius', function () {
        var defaultValue = defaultSeatPickerConfig.legend.seatBorderRadius;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    legend: {
                        seatBorderRadius: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.legend.seatBorderRadius).toEqual(testCase.expected);
            });
        });
    });
    describe('seatBorderWidth', function () {
        var defaultValue = defaultSeatPickerConfig.legend.seatBorderWidth;
        var testCases = [
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 23, expected: 23 },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    legend: {
                        seatBorderWidth: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.legend.seatBorderWidth).toEqual(testCase.expected);
            });
        });
    });
    describe('items', function () {
        var defaultValue = defaultSeatPickerConfig.legend.items;
        var testCases = [
            { value: 1, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
            { value: [], expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: {}, expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                var config = {
                    legend: {
                        items: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.legend.items).toEqual(testCase.expected);
            });
        });
        var itemTestCases = function (defaultValue) {
            return [
                { value: 1, expected: defaultValue },
                { value: 'abc', expected: defaultValue },
                { value: [], expected: defaultValue },
                { value: undefined, expected: defaultValue },
                { value: null, expected: defaultValue },
                { value: {}, expected: defaultValue },
                { value: { show: null }, expected: defaultValue },
                { value: { show: undefined }, expected: defaultValue },
                { value: { show: 0 }, expected: defaultValue },
                { value: { show: '' }, expected: defaultValue },
                { value: { show: false }, expected: __assign({}, defaultValue, { show: false }) },
                { value: { show: true }, expected: __assign({}, defaultValue, { show: true }) },
                { value: { index: '' }, expected: defaultValue },
                { value: { index: null }, expected: defaultValue },
                { value: { index: undefined }, expected: defaultValue },
                { value: { index: 1 }, expected: __assign({}, defaultValue, { index: 1 }) },
                { value: { icon: null }, expected: __assign({}, defaultValue, { icon: null }) },
                { value: { icon: undefined }, expected: __assign({}, defaultValue, { icon: undefined }) },
                { value: { icon: 'icon' }, expected: __assign({}, defaultValue, { icon: 'icon' }) },
                { value: { icon: '' }, expected: defaultValue },
                { value: { icon: 0 }, expected: defaultValue },
                { value: { icon: {} }, expected: defaultValue },
                { value: { icon: [] }, expected: defaultValue },
            ];
        };
        describe('available', function () {
            var defaultValue = defaultSeatPickerConfig.legend.items.available;
            var testCases = itemTestCases(defaultValue);
            testCases.forEach(function (testCase) {
                it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                    var config = {
                        legend: {
                            items: { available: testCase.value }
                        }
                    };
                    var result = mapSeatPickerConfig(config);
                    expect(result.legend.items.available).toEqual(testCase.expected);
                });
            });
        });
        describe('unavailable', function () {
            var defaultValue = defaultSeatPickerConfig.legend.items.unavailable;
            var testCases = itemTestCases(defaultValue);
            testCases.forEach(function (testCase) {
                it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                    var config = {
                        legend: {
                            items: { unavailable: testCase.value }
                        }
                    };
                    var result = mapSeatPickerConfig(config);
                    expect(result.legend.items.unavailable).toEqual(testCase.expected);
                });
            });
        });
        describe('selected', function () {
            var defaultValue = defaultSeatPickerConfig.legend.items.selected;
            var testCases = itemTestCases(defaultValue);
            testCases.forEach(function (testCase) {
                it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                    var config = {
                        legend: {
                            items: { selected: testCase.value }
                        }
                    };
                    var result = mapSeatPickerConfig(config);
                    expect(result.legend.items.selected).toEqual(testCase.expected);
                });
            });
        });
        describe('wheelchair', function () {
            var defaultValue = defaultSeatPickerConfig.legend.items.wheelchair;
            var testCases = itemTestCases(defaultValue);
            testCases.forEach(function (testCase) {
                it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                    var config = {
                        legend: {
                            items: { wheelchair: testCase.value }
                        }
                    };
                    var result = mapSeatPickerConfig(config);
                    expect(result.legend.items.wheelchair).toEqual(testCase.expected);
                });
            });
        });
        describe('companion', function () {
            var defaultValue = defaultSeatPickerConfig.legend.items.companion;
            var testCases = itemTestCases(defaultValue);
            testCases.forEach(function (testCase) {
                it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                    var config = {
                        legend: {
                            items: { companion: testCase.value }
                        }
                    };
                    var result = mapSeatPickerConfig(config);
                    expect(result.legend.items.companion).toEqual(testCase.expected);
                });
            });
        });
        describe('friend', function () {
            var defaultValue = defaultSeatPickerConfig.legend.items.friend;
            var testCases = itemTestCases(defaultValue);
            testCases.forEach(function (testCase) {
                it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                    var config = {
                        legend: {
                            items: { friend: testCase.value }
                        }
                    };
                    var result = mapSeatPickerConfig(config);
                    expect(result.legend.items.friend).toEqual(testCase.expected);
                });
            });
        });
    });
});
describe('mapSeatPickerConfig.notification', function () {
    it('returns the default notification config when the provided notification config is undefined', function () {
        var config = {
            notification: undefined
        };
        var result = mapSeatPickerConfig(config).notification;
        expect(result).toEqual(defaultSeatPickerConfig.notification);
    });
    describe('show', function () {
        var defaultValue = defaultSeatPickerConfig.notification.show;
        var testCases = [
            { value: true, expected: true },
            { value: false, expected: false },
            { value: 1, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    notification: {
                        show: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.notification.show).toEqual(testCase.expected);
            });
        });
    });
    describe('style', function () {
        var defaultValue = defaultSeatPickerConfig.notification.style;
        var testCases = [
            { value: 'Info', expected: NotificationStyle.Info },
            { value: 'Warning', expected: NotificationStyle.Warning },
            { value: 'Error', expected: NotificationStyle.Error },
            { value: 'Success', expected: NotificationStyle.Success },
            { value: -1, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    notification: {
                        style: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.notification.style).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapSeatPickerConfig.navigation', function () {
    it('returns the default navigation config when the provided navigation config is undefined', function () {
        var config = {
            navigation: undefined
        };
        var result = mapSeatPickerConfig(config).navigation;
        expect(result).toEqual(defaultSeatPickerConfig.navigation);
    });
    describe('showPanButtons', function () {
        var defaultValue = defaultSeatPickerConfig.navigation.showPanButtons;
        var testCases = [
            { value: true, expected: true },
            { value: false, expected: false },
            { value: 1, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    navigation: {
                        showPanButtons: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.navigation.showPanButtons).toEqual(testCase.expected);
            });
        });
    });
    describe('showZoomButtons', function () {
        var defaultValue = defaultSeatPickerConfig.navigation.showZoomButtons;
        var testCases = [
            { value: true, expected: true },
            { value: false, expected: false },
            { value: 1, expected: defaultValue },
            { value: 'abc', expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    navigation: {
                        showZoomButtons: testCase.value,
                    }
                };
                var result = mapSeatPickerConfig(config);
                expect(result.navigation.showZoomButtons).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=config-mapper.test.js.map