var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { browsingService } from '../../../../api/src/services/browsing/browsing-service';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../api/src/utils/logger';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { siteCompareFn } from '../site-picker/utils/site-utils';
import { SiteListEmptyListMessage } from './components/site-list-empty-list-message';
import { SiteListFilteredSiteList } from './components/site-list-filtered-site-list';
import { SiteListMessage, SiteListMessageType } from './components/site-list-message';
import { SiteListSearchForm } from './components/site-list-search-form';
import { SiteListSkeleton } from './components/site-list-skeleton';
/**
 * Renders a component that allows the user to choose the sites they wish to browse.
 */
var SiteList = /** @class */ (function (_super) {
    __extends(SiteList, _super);
    function SiteList(props) {
        var _this = _super.call(this, props) || this;
        _this.handleSiteClicked = function (site) {
            if (_this.props.onSiteClicked)
                _this.props.onSiteClicked(site);
        };
        _this.handleSearchResultsChanged = function (filteredSites) { return _this.setState({ filteredSites: filteredSites }); };
        _this.handleSearchTermChanged = function (searchTerm) { return _this.setState({ searchTerm: searchTerm }); };
        _this.state = {
            filteredSites: undefined,
            searchTerm: '',
            failedToLoadSites: false
        };
        return _this;
    }
    SiteList.prototype.render = function () {
        var failedToLoadSites = this.state.failedToLoadSites;
        var _a = this.props, displayText = _a.displayText, browsingStore = _a.browsingStore, assets = _a.assets;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var allSites = browsingStore.selectors.getAllSites();
        if (!allSites && failedToLoadSites) {
            return (React.createElement(SiteListMessage, { messageType: SiteListMessageType.FailedToLoadData, displayText: displayText, assets: assets }));
        }
        if (!allSites)
            return enableLoadingIndicator ? React.createElement(SiteListSkeleton, null) : null;
        var sortedSites = allSites.sort(siteCompareFn);
        var filteredSites = this.state.filteredSites || allSites;
        var b = bemClassBuilderFactory('v-site-list');
        return (React.createElement("div", { className: b.block() },
            React.createElement(SiteListSearchForm, { sites: sortedSites, displayText: displayText, onResultsChanged: this.handleSearchResultsChanged, onSearchTermChanged: this.handleSearchTermChanged }),
            filteredSites.length > 0
                ?
                    React.createElement(SiteListFilteredSiteList, { sites: filteredSites, onSiteClicked: this.handleSiteClicked })
                :
                    React.createElement(SiteListEmptyListMessage, { searchTerm: this.state.searchTerm, displayText: displayText, assets: assets })));
    };
    SiteList.prototype.componentDidMount = function () {
        var _this = this;
        var allSitesLoaded = this.props.browsingStore.data.allSitesLoaded;
        if (!allSitesLoaded) {
            browsingService.loadSites()
                .then(function (data) {
                _this.setState({ failedToLoadSites: false });
            })
                .catch(function (err) {
                _this.setState({ failedToLoadSites: true });
                Logger.error("Failed to fetch sites. " + err);
            });
        }
    };
    SiteList = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], SiteList);
    return SiteList;
}(React.Component));
export { SiteList };
//# sourceMappingURL=site-list.js.map