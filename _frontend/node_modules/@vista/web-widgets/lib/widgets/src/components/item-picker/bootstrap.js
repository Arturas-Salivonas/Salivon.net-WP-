var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { orderService } from '../../../../api/src/services/order/order-service';
import { orderStoreInstance } from '../../../../api/src/stores/order/order-store';
import { salesDataStoreInstance } from '../../../../api/src/stores/sales-data/sales-data-store';
import { addWidgetBootstrap } from '../../bootstrap/add-widget-bootstrap';
import { createComponent } from '../../bootstrap/create-component';
import { ItemPicker } from './item-picker';
import { mapItemPickerAssets } from './mappers/assets-mapper';
import { mapItemPickerDisplayText } from './mappers/display-text-mapper';
export var itemPicker = function (bootstrap) {
    var selector = bootstrap.selector, displayText = bootstrap.displayText, events = bootstrap.events, assets = bootstrap.assets;
    var site = orderStoreInstance.data.order.site;
    if (!site)
        throw new Error('Cannot render Item Picker widget without a site set on the order');
    var props = {
        siteId: site.id,
        orderStore: orderStoreInstance,
        salesDataStore: salesDataStoreInstance,
        displayText: mapItemPickerDisplayText(displayText),
        assets: mapItemPickerAssets(assets),
        onItemClicked: events && events.onItemClicked
    };
    return __assign({}, createComponent(selector, ItemPicker, props), { saveItemSelection: orderService.saveItemSelection });
};
addWidgetBootstrap('itemPicker', itemPicker);
//# sourceMappingURL=bootstrap.js.map