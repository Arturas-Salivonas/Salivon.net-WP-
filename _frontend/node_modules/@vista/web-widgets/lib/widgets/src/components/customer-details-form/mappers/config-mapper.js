var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
import { Validator } from '../../../../../api/src/utils/validator';
import { defaultCustomerDetailsFormConfig } from '../types/config';
export function mapCustomerDetailsFormConfig(config) {
    var validationConfig = configurationStoreInstance.data.customerDetails.validation;
    var valid = !!config && new Validator().ofType('object').validate(config, 'Customer details form config');
    if (!valid) {
        var fieldConfig = attachMaxLengthToFields(mapFieldsConfig(), validationConfig);
        return __assign({}, defaultCustomerDetailsFormConfig, { fields: fieldConfig });
    }
    return {
        fields: attachMaxLengthToFields(mapFieldsConfig(config.fields), validationConfig),
    };
}
function mapFieldsConfig(fields) {
    var objectValidator = new Validator().ofType('object');
    var booleanValidator = new Validator().ofType('boolean');
    var numberValidator = new Validator().ofType('number');
    var validatedFieldsConfig = JSON.parse(JSON.stringify(defaultCustomerDetailsFormConfig.fields));
    if (!fields)
        return validatedFieldsConfig;
    var valid = objectValidator.validate(fields, 'Customer details form fields');
    if (!valid)
        return validatedFieldsConfig;
    var fieldsToValidate = ['email', 'familyName', 'givenName', 'phone'];
    for (var _i = 0, fieldsToValidate_1 = fieldsToValidate; _i < fieldsToValidate_1.length; _i++) {
        var fieldId = fieldsToValidate_1[_i];
        if (fieldId in fields) {
            var currentField = fields[fieldId];
            var isObject = objectValidator.validate(currentField, "Field '" + fieldId + "'");
            if (!isObject || !currentField)
                continue;
            var indexValid = numberValidator.validate(currentField.index, "Field '" + fieldId + "' index");
            if (indexValid)
                validatedFieldsConfig[fieldId].index = currentField.index;
            var showValid = booleanValidator.validate(currentField.show, "Field '" + fieldId + "' show");
            if (showValid)
                validatedFieldsConfig[fieldId].show = currentField.show;
        }
    }
    return validatedFieldsConfig;
}
function attachMaxLengthToFields(fieldsConfig, fieldMaxLengths) {
    var maxLengthValidator = new Validator().ofType('number').min(1);
    for (var _i = 0, _a = Object.keys(fieldsConfig); _i < _a.length; _i++) {
        var fieldId = _a[_i];
        if (fieldId in fieldMaxLengths) {
            var fieldMaxLength = fieldMaxLengths[fieldId].maxLength;
            var maxLengthValid = maxLengthValidator.validate(fieldMaxLength, "Field '" + fieldId + "' maxLength");
            if (maxLengthValid) {
                fieldsConfig[fieldId].maxLength = fieldMaxLength;
            }
        }
    }
    return fieldsConfig;
}
//# sourceMappingURL=config-mapper.js.map