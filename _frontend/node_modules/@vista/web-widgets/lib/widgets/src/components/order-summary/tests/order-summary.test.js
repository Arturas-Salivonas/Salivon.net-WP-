var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
import { journeyStoreInstance } from '../../../../../api/src/stores/journey/journey-store';
import { exampleJourney } from '../../../../../example-data/journey/journey';
import { exampleJourneyStoreData } from '../../../../../example-data/journey/journey-store-data';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { OrderSummary } from '../order-summary';
import { defaultOrderSummaryAssets } from '../types/assets';
import { defaultOrderSummaryDisplayText } from '../types/display-text';
var MockQrious = /** @class */ (function () {
    function MockQrious() {
        this.set = jest.fn;
    }
    return MockQrious;
}());
jest.mock('qrious', MockQrious);
describe('OrderSummary', function () {
    var testProps;
    var createNodeMock = function (element) {
        return element.type === 'canvas' ? document.createElement('canvas') : null;
    };
    beforeEach(function () {
        testProps = {
            journeyReference: exampleJourney.id,
            journeyStore: journeyStoreInstance,
            displayText: defaultOrderSummaryDisplayText,
            assets: defaultOrderSummaryAssets,
        };
        journeyStoreInstance.flush();
    });
    it('should render nothing when the loading indicator is disabled and the journey is not in the store', function () {
        configurationStoreInstance.setConfig({ enableLoadingIndicator: false });
        compareToSnapshot(React.createElement(OrderSummary, __assign({}, testProps)), { createNodeMock: createNodeMock });
    });
    it('should render the loading indicator when the journey is not in the store', function () {
        configurationStoreInstance.setConfig({ enableLoadingIndicator: true });
        compareToSnapshot(React.createElement(OrderSummary, __assign({}, testProps)), { createNodeMock: createNodeMock });
    });
    it('should render correctly', function () {
        journeyStoreInstance.setData(exampleJourneyStoreData);
        compareToSnapshot(React.createElement(OrderSummary, __assign({}, testProps)), { createNodeMock: createNodeMock });
    });
});
//# sourceMappingURL=order-summary.test.js.map