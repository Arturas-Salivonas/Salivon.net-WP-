import { FuseOptions } from 'fuse.js';
import * as React from 'react';
import { FormElementProps } from '../form-element-props';
export interface SearchInputProps<T> extends FormElementProps<string> {
    searchValues: T[];
    searchOptions?: FuseOptions<T>;
    searchKeys: SearchInputSearchKey[];
    onResultsChanged: (results: T[]) => void;
    onSearchTermChanged?: (searchTerm: string) => void;
}
export interface SearchInputState<T> {
    searchTerm: string;
}
export interface SearchInputSearchKeyWeighted {
    /**
     * The name of the search key
     */
    name: string;
    /**
     * A value between 0 and 1 that determines the weighting of the search key
     */
    weight: number;
}
export declare type SearchInputSearchKey = string | SearchInputSearchKeyWeighted;
/**
 * Renders the search input component
 */
export declare class SearchInput<T> extends React.Component<SearchInputProps<T>, SearchInputState<T>> {
    private fuse;
    private searchResult;
    constructor(props: SearchInputProps<T>);
    render(): JSX.Element;
    componentDidMount(): void;
    componentDidUpdate(prevProps: any): void;
    private hasSearchPropsChanged;
    private init;
    private handleChange;
    private search;
    private areResultsEqual;
}
