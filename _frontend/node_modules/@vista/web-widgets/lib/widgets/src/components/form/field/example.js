var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
// import '../../../scss/themes/dark/_all.scss';
import '../../../scss/themes/light/_all.scss';
import { FormElementStyle } from '../form-element-style';
import { Input } from '../input/input';
import { Field } from './field';
var FieldExample = /** @class */ (function (_super) {
    __extends(FieldExample, _super);
    function FieldExample() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FieldExample.prototype.render = function () {
        return (React.createElement("div", { style: { display: 'block', margin: '20px auto', maxWidth: '300px' } },
            React.createElement("h1", null, "Field"),
            React.createElement("h2", null, "Normal"),
            React.createElement(Field, { id: "input", label: "Normal Field" },
                React.createElement(Input, null)),
            React.createElement("h2", null, "Disabled"),
            React.createElement(Field, { id: "disabled-field", label: "Disabled Field" },
                React.createElement(Input, { disabled: true, value: "This one is disabled" })),
            React.createElement("h2", null, "Warning"),
            React.createElement(Field, { id: "warning-field", label: "Warning Field", style: FormElementStyle.Warning, helpText: "This field has a warning" },
                React.createElement(Input, null)),
            React.createElement("h2", null, "Error"),
            React.createElement(Field, { id: "error-field", label: "Error Field", style: FormElementStyle.Error, helpText: "This field has an error" },
                React.createElement(Input, null)),
            React.createElement("h2", null, "Success"),
            React.createElement(Field, { id: "success-field", label: "Success Field", style: FormElementStyle.Success, helpText: "This field has a success style" },
                React.createElement(Input, null))));
    };
    return FieldExample;
}(React.Component));
export { FieldExample };
//# sourceMappingURL=example.js.map