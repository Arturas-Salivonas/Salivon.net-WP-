var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { getTranslatedTextOrDefault } from '../../../utils/get-translated-text';
import { getAreaBoundary } from '../positioning/area';
import { SeatPickerWidgetScreenPosition } from '../types/config';
import { SeatPickerRow } from './seat-picker-row';
var SeatPickerArea = /** @class */ (function (_super) {
    __extends(SeatPickerArea, _super);
    function SeatPickerArea() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SeatPickerArea.prototype.render = function () {
        var _a = this.props, area = _a.area, areaCategory = _a.areaCategory, scaleFactor = _a.scaleFactor, config = _a.config, mapBoundary = _a.mapBoundary, onSeatClicked = _a.onSeatClicked, limitSeatSelectionByAreaCategoryAllocation = _a.limitSeatSelectionByAreaCategoryAllocation;
        var areaBoundary = getAreaBoundary(area, mapBoundary, scaleFactor, config);
        var isSelectable = limitSeatSelectionByAreaCategoryAllocation || this.isAreaSelectable(areaCategory);
        var rows = config.screen.position === SeatPickerWidgetScreenPosition.Bottom
            ? area.rows
            : area.rows.reverse(); // reversed so that the tab order of seats goes top-left to bottom-right
        var b = bemClassBuilderFactory('v-seat-picker-area');
        return (React.createElement("g", { className: b.block(), transform: "translate(" + areaBoundary.left + ", " + areaBoundary.top + ")" },
            config.areaLabels.show &&
                React.createElement("text", { className: b.element('label'), x: areaBoundary.width / 2, y: -config.areaLabels.margin, "alignment-baseline": "baseline", textAnchor: "middle" }, getTranslatedTextOrDefault(area, 'description')),
            rows
                .map(function (row) { return row.seats.length > 0 && // only render rows that have seats
                React.createElement(SeatPickerRow, { key: row.rowIndex, row: row, area: area, scaleFactor: scaleFactor, config: config, isSelectable: isSelectable, onSeatClicked: onSeatClicked }); })));
    };
    SeatPickerArea.prototype.isAreaSelectable = function (areaCategory) {
        return areaCategory.seatsToAllocate > 0;
    };
    SeatPickerArea = __decorate([
        observer
    ], SeatPickerArea);
    return SeatPickerArea;
}(React.Component));
export { SeatPickerArea };
//# sourceMappingURL=seat-picker-area.js.map