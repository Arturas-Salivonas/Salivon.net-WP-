import { SeatPickerWidgetScreenPosition } from '../../types/config';
import { getAreaBoundary } from '../area';
describe('getAreaBoundary', function () {
    describe('non-inverted seat map', function () {
        it('returns the area\'s boundary within a full map boundary', function () {
            var area = {
                top: 10,
                left: 50,
                width: 25,
                height: 50
            };
            var mapBoundary = {
                top: 0,
                left: 0,
                width: 100,
                height: 100
            };
            var scaleFactor = 10;
            var config = {
                screen: {
                    height: 30,
                    margin: 5,
                    position: SeatPickerWidgetScreenPosition.Bottom
                },
                rowLabels: {
                    size: 25,
                    margin: 10
                }
            };
            var boundary = getAreaBoundary(area, mapBoundary, scaleFactor, config);
            expect(boundary).toEqual({
                // 10% (top) x 10 (scaleFactor) = 100
                top: 100,
                // 50% (left) x 10 (scaleFactor) = 500
                left: 500,
                // 25% (width) x 10 (scaleFactor) = 250
                width: 250,
                // 50% (height) x 10 (scaleFactor) = 500
                height: 500
            });
        });
        it('returns the area\'s boundary within a restricted map boundary', function () {
            var area = {
                top: 15,
                left: 15,
                width: 25,
                height: 50
            };
            var mapBoundary = {
                top: 10,
                left: 10,
                width: 90,
                height: 90
            };
            var scaleFactor = 5;
            var config = {
                screen: {
                    height: 20,
                    margin: 10,
                    position: SeatPickerWidgetScreenPosition.Bottom
                },
                rowLabels: {
                    size: 35,
                    margin: 5
                }
            };
            var boundary = getAreaBoundary(area, mapBoundary, scaleFactor, config);
            expect(boundary).toEqual({
                // (15[area top] - 10[map top]) * 5[scale factor] = 25
                top: 25,
                // (15[area left] - 10[map left]) * 5[scale factor] = 25
                left: 25,
                // 25% (width) x 5 (scaleFactor) = 125
                width: 125,
                // 50% (height) x 5 (scaleFactor) = 250
                height: 250
            });
        });
    });
    describe('inverted seat map', function () {
        it('returns the area\'s boundary within a full map boundary', function () {
            var area = {
                top: 10,
                left: 50,
                width: 25,
                height: 50
            };
            var mapBoundary = {
                top: 0,
                left: 0,
                width: 100,
                height: 100
            };
            var scaleFactor = 10;
            var config = {
                screen: {
                    height: 30,
                    margin: 5,
                    position: SeatPickerWidgetScreenPosition.Top
                },
                rowLabels: {
                    size: 25,
                    margin: 10
                }
            };
            var boundary = getAreaBoundary(area, mapBoundary, scaleFactor, config);
            expect(boundary).toEqual({
                // 40% (top inverted) x 10 (scaleFactor) = 400 + 35 (screenHeight and margin) = 435
                top: 435,
                // 25% (left inverted) x 10 (scaleFactor) = 250
                left: 250,
                // 25% (width) x 10 (scaleFactor) = 250
                width: 250,
                // 50% (height) x 10 (scaleFactor) = 500
                height: 500
            });
        });
        it('returns the area\'s boundary within a restricted map boundary', function () {
            var area = {
                top: 15,
                left: 15,
                width: 25,
                height: 50
            };
            var mapBoundary = {
                top: 10,
                left: 10,
                width: 90,
                height: 90
            };
            var scaleFactor = 5;
            var config = {
                screen: {
                    height: 20,
                    margin: 10,
                    position: SeatPickerWidgetScreenPosition.Top
                },
                rowLabels: {
                    size: 35,
                    margin: 5
                }
            };
            var boundary = getAreaBoundary(area, mapBoundary, scaleFactor, config);
            expect(boundary).toEqual({
                // (100 - 15[area top] - 50[area height] - 10[map top]) * 5[scaleFactor] + 30 (screenHeight and margin) = 155
                top: 155,
                // (100 - 15[area left] - 25[area weight] - 10[map left]) * 5[scaleFactor] = 250
                left: 250,
                // 25% (width) x 5 (scaleFactor) = 125
                width: 125,
                // 50% (height) x 5 (scaleFactor) = 250
                height: 250
            });
        });
    });
});
//# sourceMappingURL=area.test.js.map