var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { JourneyOrderShowtimeStatus } from '../../../../../../api/src/widgets-api/journey/utils/get-journey-order-showtime-status';
import { JourneyStatus } from '../../../../../../api/src/widgets-api/journey/utils/get-journey-state';
import { compareToSnapshot } from '../../../../tests/compare-to-snapshot';
import { defaultOrderSummaryDisplayText } from '../../types/display-text';
import { OrderSummaryStatusIndicator } from '../order-summary-status-indicator';
describe('OrderSummaryStatusIndicator', function () {
    it('should render journey refunded status correctly', function () {
        var testProps = {
            journeyStatus: JourneyStatus.Refunded,
            nextShowtimeStatus: undefined,
            countdownForNextShowtime: undefined,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render journey expired status correctly', function () {
        var testProps = {
            journeyStatus: JourneyStatus.Expired,
            nextShowtimeStatus: undefined,
            countdownForNextShowtime: undefined,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime pending status with days correctly', function () {
        var countdown = {
            days: 1,
            hours: 2,
            minutes: 44,
            seconds: 14
        };
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.Pending,
            countdownForNextShowtime: countdown,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime pending status with hours correctly', function () {
        var countdown = {
            days: 0,
            hours: 2,
            minutes: 44,
            seconds: 14
        };
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.Pending,
            countdownForNextShowtime: countdown,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime pending status with minutes correctly', function () {
        var countdown = {
            days: 0,
            hours: 0,
            minutes: 44,
            seconds: 14
        };
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.Pending,
            countdownForNextShowtime: countdown,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime pending status with seconds correctly', function () {
        var countdown = {
            days: 0,
            hours: 0,
            minutes: 0,
            seconds: 14
        };
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.Pending,
            countdownForNextShowtime: countdown,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime pending status with no time correctly', function () {
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.Pending,
            countdownForNextShowtime: undefined,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime admitting status correctly', function () {
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.Admitting,
            countdownForNextShowtime: undefined,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime admitted status correctly', function () {
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.Admitted,
            countdownForNextShowtime: undefined,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime now playing status correctly', function () {
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.NowPlaying,
            countdownForNextShowtime: undefined,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
    it('should render showtime expired status correctly', function () {
        var testProps = {
            journeyStatus: JourneyStatus.Active,
            nextShowtimeStatus: JourneyOrderShowtimeStatus.Expired,
            countdownForNextShowtime: undefined,
            displayText: defaultOrderSummaryDisplayText,
        };
        compareToSnapshot(React.createElement(OrderSummaryStatusIndicator, __assign({}, testProps)));
    });
});
//# sourceMappingURL=order-summary-status-indicator.test.js.map