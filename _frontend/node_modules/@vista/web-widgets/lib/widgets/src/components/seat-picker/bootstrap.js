var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { orderService } from '../../../../api/src/services/order/order-service';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { orderStoreInstance } from '../../../../api/src/stores/order/order-store';
import { seatingStoreInstance } from '../../../../api/src/stores/seating/seating-store';
import { addWidgetBootstrap } from '../../bootstrap/add-widget-bootstrap';
import { createComponent } from '../../bootstrap/create-component';
import { mapSeatPickerAssets } from './mappers/assets-mapper';
import { mapSeatPickerConfig } from './mappers/config-mapper';
import { mapSeatPickerDisplayText } from './mappers/display-text-mapper';
import { SeatPicker } from './seat-picker';
export var seatPicker = function (bootstrap) {
    var config = bootstrap.config, showtimeId = bootstrap.showtimeId, events = bootstrap.events, displayText = bootstrap.displayText, selector = bootstrap.selector, assets = bootstrap.assets;
    var hasSeatLayoutDataPassedIn = config && config.seatLayoutData;
    if (!hasSeatLayoutDataPassedIn) {
        var cinemaChainId = configurationStoreInstance.data.api.cinemaChainId;
        if (!cinemaChainId)
            throw new Error('Cannot render the Seat Picker widget without a cinemaChainId');
        if (!showtimeId)
            throw new Error('Cannot render the Seat Picker widget without a showtimeId');
        var hasShowtime = orderStoreInstance.selectors.hasShowtime(showtimeId);
        if (!hasShowtime && !configurationStoreInstance.data.ticketing.isSeatFirstOrdering) {
            throw new Error("Cannot render Seat Picker widget when tickets have not been selected yet in ticket first ordering mode");
        }
    }
    var props = {
        showtimeId: showtimeId,
        seatingStore: seatingStoreInstance,
        config: mapSeatPickerConfig(config),
        displayText: mapSeatPickerDisplayText(displayText),
        assets: mapSeatPickerAssets(assets),
        isSeatFirstOrdering: configurationStoreInstance.data.ticketing.isSeatFirstOrdering,
        events: events
    };
    var componentInstance = createComponent(selector, SeatPicker, props);
    var saveSeatSelection = function () {
        if (hasSeatLayoutDataPassedIn)
            throw new Error('Cannot save seat selection when using passed in seatLayout data');
        if (!showtimeId)
            throw new Error('Cannot save seat selection without a showtimeId');
        return orderService.saveSeatSelection(showtimeId);
    };
    return __assign({}, componentInstance, { unmount: function () {
            componentInstance.unmount();
        }, validateSeatSelection: function () { return seatingStoreInstance.validateSelection(); }, saveSeatSelection: function () { return saveSeatSelection(); } });
};
addWidgetBootstrap('seatPicker', seatPicker);
//# sourceMappingURL=bootstrap.js.map