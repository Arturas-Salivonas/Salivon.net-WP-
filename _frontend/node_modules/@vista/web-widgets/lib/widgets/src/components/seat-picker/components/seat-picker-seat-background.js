var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { SeatType } from '../../../../../types/seating/seat-type';
import { SvgPathHelper } from '../../../dom/svg-helpers';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { SeatPickerWidgetShape } from '../types/config';
var SeatPickerSeatBackground = /** @class */ (function (_super) {
    __extends(SeatPickerSeatBackground, _super);
    function SeatPickerSeatBackground() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SeatPickerSeatBackground.prototype.render = function () {
        var _a = this.props, seat = _a.seat, seatDimensions = _a.seatDimensions, config = _a.config;
        var seatBackgroundPath = getSeatBackgroundPath(seat.type, seatDimensions.width, seatDimensions.height, config);
        var borderWidth = config.seats.borderWidth;
        var b = bemClassBuilderFactory('v-seat-picker-seat');
        return (React.createElement("path", { className: b.element('background'), d: seatBackgroundPath, strokeWidth: borderWidth }));
    };
    SeatPickerSeatBackground = __decorate([
        observer
    ], SeatPickerSeatBackground);
    return SeatPickerSeatBackground;
}(React.Component));
export { SeatPickerSeatBackground };
/**
 * Returns the SVG path data for the background path of a seat.
 */
export function getSeatBackgroundPath(type, width, height, config) {
    var _a = config.seats, shape = _a.shape, borderRadius = _a.borderRadius, borderWidth = _a.borderWidth;
    var path = new SvgPathHelper();
    var maxBorderRadius = Math.min(width / 2, height / 2);
    var pathBorderRadius = (shape === SeatPickerWidgetShape.Round || borderRadius > maxBorderRadius) ? maxBorderRadius : borderRadius;
    var pathWidth = width - borderWidth;
    var pathHeight = height - borderWidth;
    var pathX = borderWidth / 2;
    var pathY = borderWidth / 2;
    if (type === SeatType.SofaLeft) {
        path.moveTo(pathX + pathBorderRadius, pathY)
            .drawLineRight(pathWidth - pathBorderRadius)
            .drawLineDown(pathHeight)
            .drawLineLeft(pathWidth - pathBorderRadius)
            .drawBottomLeftBorderRadiusArc(pathBorderRadius)
            .drawLineUp(pathHeight - (pathBorderRadius * 2))
            .drawTopLeftBorderRadiusArc(pathBorderRadius)
            .closePath();
    }
    else if (type === SeatType.SofaMiddle) {
        path.moveTo(pathX, pathY)
            .drawLineRight(pathWidth)
            .drawLineDown(pathHeight)
            .drawLineLeft(pathWidth)
            .drawLineUp(pathHeight)
            .closePath();
    }
    else if (type === SeatType.SofaRight) {
        path.moveTo(pathX, pathY)
            .drawLineRight(pathWidth - pathBorderRadius)
            .drawTopRightBorderRadiusArc(pathBorderRadius)
            .drawLineDown(pathHeight - (pathBorderRadius * 2))
            .drawBottomRightBorderRadiusArc(pathBorderRadius)
            .drawLineLeft(pathWidth - pathBorderRadius)
            .drawLineUp(pathHeight)
            .closePath();
    }
    else {
        path.moveTo(pathX + pathBorderRadius, pathY)
            .drawLineRight(pathWidth - (pathBorderRadius * 2))
            .drawTopRightBorderRadiusArc(pathBorderRadius)
            .drawLineDown(pathHeight - (pathBorderRadius * 2))
            .drawBottomRightBorderRadiusArc(pathBorderRadius)
            .drawLineLeft(pathWidth - (pathBorderRadius * 2))
            .drawBottomLeftBorderRadiusArc(pathBorderRadius)
            .drawLineUp(pathHeight - (pathBorderRadius * 2))
            .drawTopLeftBorderRadiusArc(pathBorderRadius)
            .closePath();
    }
    return path.toString();
}
//# sourceMappingURL=seat-picker-seat-background.js.map