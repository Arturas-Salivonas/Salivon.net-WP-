import { Omit } from '../../../../../api/src/utils/omit';
import { LoyaltyAuthResponse } from '../../../../../types/loyalty/authentication/loyalty-auth';
import { ExternalAuthenticationProvider, UserCredentialsAuthenticationProvider } from '../../../../../types/loyalty/authentication/sign-in-provider';
export interface SignInWidgetConfig {
    /**
     * Determines the different sign in options to be rendered by the widget.
     */
    providers?: SignInWidgetAuthenticationProvider[];
    /**
     * Determines display mode for sign in with user credentials authentication provider.
     */
    displayMode?: SignInWidgetDisplayMode;
    /**
     * Determines if the authentication call should request the full member details. Defaults to true.
     */
    fetchMemberDetailsOnSignIn?: boolean;
}
export declare type SignInWidgetExternalAuthenticationProvider = Omit<ExternalAuthenticationProvider, 'signIn'> & {
    signIn: () => Promise<string>;
};
export declare type SignInWidgetUserCredentialsAuthenticationProvider = Omit<UserCredentialsAuthenticationProvider, 'signIn'> & {
    signIn?: () => Promise<LoyaltyAuthResponse>;
};
export declare type SignInWidgetAuthenticationProvider = SignInWidgetExternalAuthenticationProvider | SignInWidgetUserCredentialsAuthenticationProvider;
export declare enum SignInWidgetDisplayMode {
    Expand = "Expand",
    FadeIn = "FadeIn"
}
