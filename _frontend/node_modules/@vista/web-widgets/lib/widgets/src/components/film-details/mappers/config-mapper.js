var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Validator } from '../../../../../api/src/utils/validator';
import { defaultFilmDetailsWidgetConfig } from '../types/config';
/**
 * Maps the config provided via the API to the config required by the Film Details widget.
 * Nulls out any invalid values and logs appropriate warnings.
 * Any undefined values will be replaced during mapping by the defaults.
 * @param config
 */
export function mapFilmDetailsConfig(config) {
    if (!config)
        return defaultFilmDetailsWidgetConfig;
    var valid = new Validator().ofType('object').validate(config, 'Film details config');
    if (!valid)
        return defaultFilmDetailsWidgetConfig;
    var validatedConfig = getValidatedFilmDetailsConfig(config);
    return __assign({}, defaultFilmDetailsWidgetConfig, validatedConfig);
}
function getValidatedFilmDetailsConfig(config) {
    var validatedConfig = __assign({}, config, { actionButton: mapFilmDetailsActionButtonConfig(config.actionButton) });
    return validatedConfig;
}
export function mapFilmDetailsActionButtonConfig(config) {
    var defaultConfig = defaultFilmDetailsWidgetConfig.actionButton;
    if (!config)
        return defaultConfig;
    var valid = new Validator().ofType('object').validate(config, 'Film details action button config');
    if (!valid)
        return defaultConfig;
    var validatedConfig = getValidatedFilmDetailsActionButtonConfig(config);
    return __assign({}, defaultConfig, validatedConfig);
}
function getValidatedFilmDetailsActionButtonConfig(config) {
    if ('show' in config) {
        var valid = new Validator()
            .ofType('boolean')
            .validate(config.show, 'Film details action button show');
        if (!valid)
            delete config.show;
    }
    return config;
}
//# sourceMappingURL=config-mapper.js.map