var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { browsingService } from '../../../../api/src/services/browsing/browsing-service';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../api/src/utils/logger';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { CdnClient } from '../../utils/cdn-client';
import { Formatter } from '../../utils/formatter';
import { getTranslatedTextOrDefault } from '../../utils/get-translated-text';
import { SiteDetailsMessage, SiteDetailsMessageType } from './components/site-details-message';
import { SiteDetailsSkeleton } from './components/site-details-skeleton';
/**
 * Renders the details of a site.
 */
var SiteDetails = /** @class */ (function (_super) {
    __extends(SiteDetails, _super);
    function SiteDetails(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { failedToLoadSiteDetails: false };
        return _this;
    }
    SiteDetails.prototype.render = function () {
        var _a = this.props, browsingStore = _a.browsingStore, siteId = _a.siteId, displayText = _a.displayText, assets = _a.assets;
        var failedToLoadSiteDetails = this.state.failedToLoadSiteDetails;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var site = browsingStore.selectors.getSiteById(siteId);
        if (!site && failedToLoadSiteDetails) {
            return (React.createElement(SiteDetailsMessage, { messageType: SiteDetailsMessageType.FailedToLoadData, displayText: displayText, assets: assets }));
        }
        if (!site)
            return enableLoadingIndicator ? React.createElement(SiteDetailsSkeleton, null) : null;
        var address = site.address;
        var backdropUrl = CdnClient.Instance.site(site.id).gallery({ sequenceNumber: 1 });
        var phoneNumber = site.contactDetails.phoneNumber1;
        var b = bemClassBuilderFactory('v-site-details');
        return (React.createElement("div", { className: b.block(), style: { backgroundImage: "url(" + backdropUrl + ")" } },
            React.createElement("div", { className: b.element('wrapper') },
                React.createElement("div", { className: b.element('content') },
                    React.createElement("h1", { className: b.element('name') }, getTranslatedTextOrDefault(site, 'name')),
                    React.createElement("div", { className: b.element('details') },
                        address &&
                            React.createElement("div", { className: b.element('address') },
                                address.line1 && React.createElement("span", null, address.line1),
                                address.line2 && React.createElement("span", null, address.line2),
                                address.city && React.createElement("span", null, address.city)),
                        phoneNumber &&
                            React.createElement("span", { className: b.element('phone-number') }, getFormattedPhoneNumber(displayText.phoneNumberLabel, phoneNumber)))))));
    };
    SiteDetails.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, siteId = _a.siteId, browsingStore = _a.browsingStore;
        if (!browsingStore.selectors.getSiteById(siteId)) {
            browsingService.loadSiteById(siteId)
                .then(function () {
                _this.setState({ failedToLoadSiteDetails: false });
            })
                .catch(function () {
                _this.setState({ failedToLoadSiteDetails: true });
                Logger.error("Could not load site with ID " + siteId);
            });
        }
    };
    SiteDetails = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], SiteDetails);
    return SiteDetails;
}(React.Component));
export { SiteDetails };
var getFormattedPhoneNumber = function (template, phoneNumber) {
    return Formatter.Instance.template(template, { phoneNumber: phoneNumber });
};
//# sourceMappingURL=site-details.js.map