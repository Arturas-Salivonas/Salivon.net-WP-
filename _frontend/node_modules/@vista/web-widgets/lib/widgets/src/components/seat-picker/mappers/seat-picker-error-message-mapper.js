import { SeatSelectionRuleName } from '../../../../../api/src/stores/seating/helpers/rules/seat-selection-rule';
import { isSeatingApiError } from '../../../../../api/src/stores/seating/helpers/types';
import { assertUnreachableHelper } from '../../../../../api/src/utils/assertion-utils';
import { SetSeatsErrorCode } from '../../../../../mx-api-client/src/mxt/types/set-seats-failed-response';
/**
 * Map the error message provided via the API to the display text required by the Seat picker widget.
 */
export function mapSeatPickerErrorMessage(error, displayText) {
    return isSeatingApiError(error)
        ? getApiErrorMessage(error.errorCode, displayText)
        : getSeatSelectionRuleViolationErrorMessage(error.ruleName, displayText);
}
function getSeatSelectionRuleViolationErrorMessage(ruleName, displayText) {
    switch (ruleName) {
        case SeatSelectionRuleName.CannotExceedAllocatedSeatsForAreaCategory:
            return displayText.errorExceededAllocatedSeatsMessage;
        case SeatSelectionRuleName.CannotLeaveGapsBetweenSelectedSeats:
            return displayText.errorGapBetweenSelectedSeatsMessage;
        case SeatSelectionRuleName.CannotLeaveSingleSeatGapFromAisle:
            return displayText.errorSingleSeatGapFromAisleMessage;
        case SeatSelectionRuleName.CannotLeaveSingleSeatGapFromUnavailableSeat:
            return displayText.errorSingleSeatGapFromUnavailableSeatMessage;
        case SeatSelectionRuleName.CannotSelectUnavailableSeats:
            return displayText.errorSelectedUnavailableSeatMessage;
        case SeatSelectionRuleName.MustFillSofaSeats:
            return displayText.errorEntireSofaNotSelectedMessage;
        case SeatSelectionRuleName.MustSelectAllSeatsAllocatedForOrder:
            return displayText.errorNotAllSeatsSelectedMessage;
        case SeatSelectionRuleName.MustSelectAssociatedWheelchairSeat:
            return displayText.errorCompanionSeatNotSelectedMessage;
        case SeatSelectionRuleName.MustSelectAtLeastOneSeat:
            return displayText.errorNoSeatsSelectedMessage;
    }
    return assertUnreachableHelper('Invalid seat selection rule')(ruleName);
}
function getApiErrorMessage(errorCode, displayText) {
    switch (errorCode) {
        case SetSeatsErrorCode.SeatsUnavailable:
            return displayText.errorApiSelectedUnavailableSeatsMessage;
        default:
            return displayText.errorApiFailedToReserveSeatsMessage;
    }
}
//# sourceMappingURL=seat-picker-error-message-mapper.js.map