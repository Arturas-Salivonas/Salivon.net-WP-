var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { fieldValidator } from '../../../../../api/src/utils/field-validator';
import { Validator } from '../../../../../api/src/utils/validator';
import { defaultOrderCartDisplayText } from '../types/display-text';
export var mapOrderCartDisplayText = function (displayText) {
    if (!displayText)
        return defaultOrderCartDisplayText;
    var valid = new Validator().ofType('object').validate(displayText, 'Order Cart display text');
    if (!valid || !displayText)
        return defaultOrderCartDisplayText;
    var validatedDisplayText = getValidatedOrderCartDisplayText(displayText);
    return __assign({}, defaultOrderCartDisplayText, validatedDisplayText);
};
function getValidatedOrderCartDisplayText(displayText) {
    var validateField = fieldValidator(displayText);
    var validator = new Validator().ofType('string').minLength(1);
    validateField(validator, 'ticketDetails', 'Order Cart ticketDetails');
    validateField(validator, 'bookingFeeLabel', 'Order Cart bookingFeeLabel');
    validateField(validator, 'totalCostLabel', 'Order Cart totalCostLabel');
    validateField(validator, 'removeItemButtonLabel', 'Order Cart removeItemButtonLabel');
    validateField(validator, 'title', 'Order Cart title');
    validateField(validator, 'actionButtonLabel', 'Order Cart actionButtonLabel');
    return displayText;
}
//# sourceMappingURL=display-text-mapper.js.map