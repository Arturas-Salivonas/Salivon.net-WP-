import { SeatPickerWidgetScreenPosition } from '../../types/config';
import { getMapBoundary, getMapDimension, getMapDimensions, getMapScaleFactor, getMinimumAreaSeatSizeRatio } from '../map';
describe('map', function () {
    describe('getMapScaleFactor', function () {
        it('returns the dimension required to render 1% of the seat map', function () {
            var seatLayout = {
                areas: [{
                        width: 100,
                        height: 50,
                        columnCount: 2,
                        rowCount: 1
                    }]
            };
            var config = {
                seats: {
                    minimumSize: 8,
                    margin: 2
                }
            };
            var scaleFactor = getMapScaleFactor(seatLayout, config);
            expect(scaleFactor).toEqual(0.24);
        });
        it('caclulates the scale based on the area with the smallest height to column/row count ratio', function () {
            var seatLayout = {
                areas: [{
                        width: 100,
                        height: 100,
                        columnCount: 2,
                        rowCount: 1
                    }]
            };
            var config = {
                seats: {
                    minimumSize: 8,
                    margin: 2
                }
            };
            var scaleFactor = getMapScaleFactor(seatLayout, config);
            expect(scaleFactor).toEqual(0.24);
        });
    });
    describe('getMapDimension', function () {
        it('calculates the equivalent dimension for a percentage value and scale factor', function () {
            var dimension = getMapDimension(50, 12);
            expect(dimension).toEqual(600);
        });
        it('returns 0 for 0%', function () {
            var dimension = getMapDimension(0, 12);
            expect(dimension).toEqual(0);
        });
    });
    describe('getMinimumAreaSeatSizeRatio', function () {
        it('returns the minimum seat size ratio of an area', function () {
            var area = {
                width: 100,
                columnCount: 5,
                height: 50,
                rowCount: 10
            };
            var ratio = getMinimumAreaSeatSizeRatio(area);
            expect(ratio).toEqual(5);
        });
        it('returns the minimum seat size ratio of an area', function () {
            var area = {
                width: 20,
                columnCount: 5,
                height: 50,
                rowCount: 10
            };
            var ratio = getMinimumAreaSeatSizeRatio(area);
            expect(ratio).toEqual(4);
        });
    });
    describe('getMapDimensions', function () {
        it('returns the dimensions of a seat layout map', function () {
            var boundary = {
                width: 50,
                height: 60
            };
            var scaleFactor = 10;
            var config = {
                screen: {
                    height: 30,
                    margin: 5
                },
                rowLabels: {
                    size: 20,
                    margin: 5
                }
            };
            var dimensions = getMapDimensions(boundary, scaleFactor, config);
            expect(dimensions).toEqual({
                // 50% (boundary width) * 10 (scaleFactor) = 500
                width: 500,
                // 60% (boundary height) * 10 (scaleFactor) = 600 + 35 (screen height and margin) = 630
                height: 635
            });
        });
        it('returns the dimensions of a seat layout map', function () {
            var boundary = {
                width: 100,
                height: 90
            };
            var scaleFactor = 12;
            var config = {
                screen: {
                    height: 20,
                    margin: 10
                },
                rowLabels: {
                    size: 30,
                    margin: 10
                }
            };
            var dimensions = getMapDimensions(boundary, scaleFactor, config);
            expect(dimensions).toEqual({
                // 100% (boundary width) * 12 (scaleFactor) = 1200
                width: 1200,
                // 90% (boundary height) * 12 (scaleFactor) = 1080 + 30 (screen height and margin) = 1110
                height: 1110
            });
        });
    });
    describe('getMapBoundary', function () {
        describe('non-inverted seat map', function () {
            it('returns the boundary of a seat layout', function () {
                var seatLayout = {
                    boundaryTop: 30,
                    boundaryLeft: 25,
                    boundaryRight: 100
                };
                var boundary = getMapBoundary(seatLayout, SeatPickerWidgetScreenPosition.Bottom);
                expect(boundary).toEqual({
                    // boundaryTop
                    top: 30,
                    // boundaryLeft
                    left: 25,
                    // 100% (boundaryRight) - 25% (boundaryLeft) = 75%
                    width: 75,
                    // 100% (full height) - 30% (boundaryTop) = 70%
                    height: 70
                });
            });
            it('returns the boundary of a seat layout', function () {
                var seatLayout = {
                    boundaryTop: 50,
                    boundaryLeft: 0,
                    boundaryRight: 50
                };
                var boundary = getMapBoundary(seatLayout, SeatPickerWidgetScreenPosition.Bottom);
                expect(boundary).toEqual({
                    // boundaryTop
                    top: 50,
                    // boundaryLeft
                    left: 0,
                    // 50% (boundaryRight) - 0% (boundaryLeft) = 50%
                    width: 50,
                    // 100% (full height) - 50% (boundaryTop) = 50%
                    height: 50
                });
            });
        });
        describe('inverted seat map', function () {
            it('returns the boundary of a seat layout', function () {
                var seatLayout = {
                    boundaryTop: 30,
                    boundaryLeft: 25,
                    boundaryRight: 100
                };
                var boundary = getMapBoundary(seatLayout, SeatPickerWidgetScreenPosition.Top);
                expect(boundary).toEqual({
                    // always 0
                    top: 0,
                    // invert of boundaryRight
                    left: 0,
                    // 100% (boundaryRight) - 25% (boundaryLeft) = 75%
                    width: 75,
                    // 100% (full height) - 30% (boundaryTop) = 70%
                    height: 70
                });
            });
            it('returns the boundary of a seat layout', function () {
                var seatLayout = {
                    boundaryTop: 50,
                    boundaryLeft: 0,
                    boundaryRight: 50
                };
                var boundary = getMapBoundary(seatLayout, SeatPickerWidgetScreenPosition.Top);
                expect(boundary).toEqual({
                    // always 0
                    top: 0,
                    // invert of boundaryRight
                    left: 50,
                    // 50% (boundaryRight) - 0% (boundaryLeft) = 50%
                    width: 50,
                    // 100% (full height) - 50% (boundaryTop) = 50%
                    height: 50
                });
            });
        });
    });
});
//# sourceMappingURL=map.test.js.map