var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { browsingStoreInstance } from '../../../../../api/src/stores/browsing/browsing-store';
import { FilmCategory } from '../../../../../types/browsing/film-category';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { CdnClient } from '../../../utils/cdn-client';
import { getTranslatedTextOrDefault } from '../../../utils/get-translated-text';
import { Button, ButtonColor, ButtonSize } from '../../button/button';
import { CensorRatingIcon } from '../../censor-rating/censor-rating-icon';
/**
 * Renders the banner of a film.
 */
var FilmDetailsBanner = /** @class */ (function (_super) {
    __extends(FilmDetailsBanner, _super);
    function FilmDetailsBanner() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FilmDetailsBanner.prototype.render = function () {
        var _a = this.props, film = _a.film, displayText = _a.displayText, config = _a.config, onActionButtonClicked = _a.onActionButtonClicked;
        var status = this.getStatusLabel(displayText, film);
        var backdropUrl = CdnClient.Instance.film(film.id).backdrop();
        var b = bemClassBuilderFactory('v-film-details-banner');
        var censorRating = film.censorRatingId ? browsingStoreInstance.selectors.getCensorRatingById(film.censorRatingId) : undefined;
        return (React.createElement("div", { className: b.block(), style: { backgroundImage: "url(" + backdropUrl + ")" } },
            React.createElement("div", { className: b.element('wrapper') },
                React.createElement("div", { className: b.element('content') },
                    status &&
                        React.createElement("span", { className: b.element('status') }, status),
                    React.createElement("div", { className: b.element('title-wrapper') },
                        React.createElement("h1", { className: b.element('title') }, getTranslatedTextOrDefault(film, 'title')),
                        React.createElement(CensorRatingIcon, { censorRating: censorRating })),
                    config.actionButton.show &&
                        React.createElement(Button, { className: b.element('action-button'), color: ButtonColor.Primary, label: displayText.actionButtonLabel, size: ButtonSize.Large, onClick: onActionButtonClicked })))));
    };
    FilmDetailsBanner.prototype.getStatusLabel = function (displayText, film) {
        var categories = (film || []).categories;
        if (categories.includes(FilmCategory.NowShowing))
            return displayText.statusNowShowingLabel;
        if (categories.includes(FilmCategory.ComingSoon))
            return displayText.statusComingSoonLabel;
        return undefined;
    };
    return FilmDetailsBanner;
}(React.Component));
export { FilmDetailsBanner };
//# sourceMappingURL=film-details-banner.js.map