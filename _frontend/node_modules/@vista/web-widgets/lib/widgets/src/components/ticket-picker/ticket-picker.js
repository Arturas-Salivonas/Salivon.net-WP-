var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { salesDataService } from '../../../../api/src/services/sales-data/sales-data-service';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../api/src/utils/logger';
import { CounterStyle } from '../counter/counter';
import { NotificationStyle } from '../notification/notification';
import { TicketPickerCounter } from './components/ticket-picker-counter';
import { TicketPickerMessage, TicketPickerMessageType } from './components/ticket-picker-message';
import { TicketPickerNotification } from './components/ticket-picker-notification';
import { TicketPickerSkeleton } from './components/ticket-picker-skeleton';
import { TicketPickerTable } from './components/ticket-picker-table';
/**
 * Renders a ticket selection widget which allows users to
 * choose a quantity of ticket types and them to an orderService.
 *
 * @export
 * @class TicketPicker
 * @extends {React.Component<TicketPickerProps, TicketPickerState>}
 */
var TicketPicker = /** @class */ (function (_super) {
    __extends(TicketPicker, _super);
    function TicketPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.handleTicketQuantityUpdate = function (showtimeId, ticketTypeKey, quantity, voucherBarcode) {
            var orderService = _this.props.orderService;
            orderService.setTicketQuantity(showtimeId, ticketTypeKey, quantity, voucherBarcode);
        };
        _this.handleNotificationClosed = function () {
            var orderStore = _this.props.orderStore;
            orderStore.actions.clearTicketSelectionErrors();
        };
        _this.getTicketTypes = function () {
            var _a = _this.props, showtimeId = _a.showtimeId, events = _a.events;
            salesDataService.loadTicketTypesForShowtime(showtimeId)
                .then(function (ticketTypes) {
                if (events && events.onTicketTypesLoaded)
                    events.onTicketTypesLoaded(ticketTypes);
                _this.setState({ failedToLoadTickets: false });
            })
                .catch(function (error) {
                if (events && events.onLoadTicketTypesFailed)
                    events.onLoadTicketTypesFailed(error);
                _this.setState({ failedToLoadTickets: true });
                Logger.error("Failed to load ticket types for showtime " + showtimeId);
            });
        };
        _this.state = { failedToLoadTickets: false };
        return _this;
    }
    TicketPicker.prototype.render = function () {
        var _a = this.props, orderStore = _a.orderStore, showtimeId = _a.showtimeId, config = _a.config, displayText = _a.displayText, assets = _a.assets;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var failedToLoadTickets = this.state.failedToLoadTickets;
        if (failedToLoadTickets) {
            return (React.createElement(TicketPickerMessage, { messageType: TicketPickerMessageType.FailedToLoadData, displayText: displayText, assets: assets }));
        }
        if (!orderStore.selectors.hasTicketTypesForShowtime(showtimeId)) {
            return enableLoadingIndicator ? React.createElement(TicketPickerSkeleton, null) : null;
        }
        var isSeatFirstOrdering = orderStore.selectors.isSeatFirstOrderingForShowtime(showtimeId);
        var ticketSelectionErrors = orderStore.data.ticketSelectionErrors;
        var counterStyle = ticketSelectionErrors.length > 0 ? CounterStyle.Warning : CounterStyle.Info;
        return (React.createElement("div", { className: "v-ticket-picker" },
            isSeatFirstOrdering &&
                React.createElement(TicketPickerCounter, { orderStore: orderStore, showtimeId: showtimeId, style: counterStyle, displayText: displayText }),
            React.createElement(TicketPickerTable, { orderStore: orderStore, showtimeId: showtimeId, config: config, displayText: displayText, onTicketQuantityUpdate: this.handleTicketQuantityUpdate }),
            (ticketSelectionErrors && ticketSelectionErrors.length > 0) &&
                React.createElement(TicketPickerNotification, { style: NotificationStyle.Warning, errors: ticketSelectionErrors, displayText: displayText, onNotificationClosed: this.handleNotificationClosed })));
    };
    TicketPicker.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, orderStore = _a.orderStore, showtimeId = _a.showtimeId, orderService = _a.orderService;
        var hasShowtime = orderStore.selectors.hasShowtime(showtimeId);
        var hasTicketTypesForShowtime = orderStore.selectors.hasTicketTypesForShowtime(showtimeId);
        if (!hasShowtime) {
            orderService.addShowtimeById(showtimeId)
                .then(function () { return _this.getTicketTypes(); })
                .catch(function () {
                _this.setState({ failedToLoadTickets: true });
                Logger.error("Failed to add showtime to order " + showtimeId);
            });
        }
        else if (!hasTicketTypesForShowtime) {
            this.getTicketTypes();
        }
    };
    TicketPicker = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], TicketPicker);
    return TicketPicker;
}(React.Component));
export { TicketPicker };
//# sourceMappingURL=ticket-picker.js.map