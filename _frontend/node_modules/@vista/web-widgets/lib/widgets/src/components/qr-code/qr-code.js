var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import QRious from 'qrious';
import * as React from 'react';
import { Logger } from '../../../../api/src/utils/logger';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
var defaultQRCodeProps = {
    size: 150
};
/**
 * QRCode Component based on the **qrious** JS library
 * See more details about **qrious** at https://github.com/neocotic/qrious
 */
var QRCode = /** @class */ (function (_super) {
    __extends(QRCode, _super);
    function QRCode() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.qrCanvasRef = React.createRef();
        _this.setQrCode = function () {
            var qrCanvas = _this.qrCanvasRef.current;
            if (!qrCanvas) {
                Logger.error('Cannot set QR Code with null canvas');
                return;
            }
            var _a = _this.props, value = _a.value, size = _a.size;
            if (!_this.qriousInstance)
                _this.qriousInstance = new QRious({ element: qrCanvas });
            _this.qriousInstance.set({
                value: value,
                size: size || defaultQRCodeProps.size
            });
        };
        return _this;
    }
    QRCode.prototype.render = function () {
        var _a = this.props, showLabel = _a.showLabel, value = _a.value;
        var b = bemClassBuilderFactory('v-qr-code');
        return (React.createElement("div", { className: b.block() },
            React.createElement("canvas", { className: b.element('canvas'), ref: this.qrCanvasRef }),
            showLabel &&
                React.createElement("span", { className: b.element('label') }, value)));
    };
    QRCode.prototype.componentDidMount = function () {
        this.setQrCode();
    };
    QRCode.prototype.componentDidUpdate = function () {
        this.setQrCode();
    };
    return QRCode;
}(React.Component));
export { QRCode };
//# sourceMappingURL=qr-code.js.map