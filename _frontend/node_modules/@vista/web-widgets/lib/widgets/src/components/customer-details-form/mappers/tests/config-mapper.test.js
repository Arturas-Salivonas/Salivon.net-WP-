import { configurationStoreInstance } from '../../../../../../api/src/stores/configuration/configuration-store';
import { defaultConfigurationStoreData } from '../../../../../../types/stores/configuration-store-data';
import { defaultCustomerDetailsFormConfig } from '../../types/config';
import { mapCustomerDetailsFormConfig } from '../config-mapper';
describe('mapCustomerDetailsFormConfig', function () {
    describe('returns default config', function () {
        beforeAll(function () {
            configurationStoreInstance.setConfig({
                customerDetails: {
                    validation: {
                        email: {
                            maxLength: -1,
                        },
                        familyName: {
                            maxLength: -1,
                        },
                        givenName: {
                            maxLength: -1,
                        },
                        phone: {
                            maxLength: -1,
                        },
                    },
                },
            });
        });
        afterAll(function () {
            configurationStoreInstance.flush();
        });
        it('when provided config is undefined', function () {
            var result = mapCustomerDetailsFormConfig(undefined);
            expect(result).toEqual(defaultCustomerDetailsFormConfig);
        });
        it('when the provided config is empty', function () {
            var result = mapCustomerDetailsFormConfig({});
            expect(result).toEqual(defaultCustomerDetailsFormConfig);
        });
        it('when the provided config is invalid', function () {
            var result = mapCustomerDetailsFormConfig(1);
            expect(result).toEqual(defaultCustomerDetailsFormConfig);
        });
    });
    describe('can map fields config', function () {
        var defaultFieldsConfig = defaultCustomerDetailsFormConfig.fields;
        var targetFieldToMap = 'givenName';
        beforeAll(function () {
            configurationStoreInstance.setConfig({
                customerDetails: {
                    validation: {
                        email: {
                            maxLength: -1,
                        },
                        familyName: {
                            maxLength: -1,
                        },
                        givenName: {
                            maxLength: -1,
                        },
                        phone: {
                            maxLength: -1,
                        },
                    },
                },
            });
        });
        afterAll(function () {
            configurationStoreInstance.flush();
        });
        describe('and returns default fields config', function () {
            it('when fields is undefined', function () {
                var result = mapCustomerDetailsFormConfig({
                    fields: undefined,
                });
                expect(result.fields).toMatchObject(defaultFieldsConfig);
            });
            it('when fields is empty', function () {
                var result = mapCustomerDetailsFormConfig({
                    fields: {},
                });
                expect(result.fields).toMatchObject(defaultFieldsConfig);
            });
            it('when fields is invalid', function () {
                var result = mapCustomerDetailsFormConfig({
                    fields: 1,
                });
                expect(result.fields).toMatchObject(defaultFieldsConfig);
            });
        });
        it('for all fields', function () {
            var fields = {
                email: {
                    index: 9,
                    show: true,
                },
                phone: {
                    index: 8,
                    show: false,
                },
                familyName: {
                    index: 8,
                    show: false,
                },
                givenName: {
                    index: 9,
                    show: true,
                },
            };
            var result = mapCustomerDetailsFormConfig({ fields: fields });
            expect(result.fields).toEqual(fields);
        });
        it('uses default for unspecified fields', function () {
            var fields = {
                email: {
                    index: 5,
                },
                phone: {
                    show: false,
                },
                familyName: {
                    index: 6,
                    show: false,
                },
            };
            var expectedFields = {
                email: {
                    index: fields.email.index,
                    show: defaultCustomerDetailsFormConfig.fields.email.show,
                },
                phone: {
                    index: defaultCustomerDetailsFormConfig.fields.phone.index,
                    show: fields.phone.show,
                },
                familyName: {
                    index: fields.familyName.index,
                    show: fields.familyName.show,
                },
                givenName: {
                    index: defaultCustomerDetailsFormConfig.fields.givenName.index,
                    show: defaultCustomerDetailsFormConfig.fields.givenName.show,
                },
            };
            var result = mapCustomerDetailsFormConfig({ fields: fields });
            expect(result.fields).toMatchObject(expectedFields);
        });
        it('for known fields only', function () {
            var _a;
            var unknownFieldName = 'unknown';
            var fields = (_a = {},
                _a[unknownFieldName] = {
                    index: 1,
                    show: false,
                },
                _a);
            var result = mapCustomerDetailsFormConfig({ fields: fields });
            expect(result.fields).not.toHaveProperty(unknownFieldName);
        });
        describe('and maps index', function () {
            var validIndices = [-12, 0, 12, 4.8321];
            var _loop_1 = function (index) {
                it("for the number '" + index + "'", function () {
                    var result = mapCustomerDetailsFormConfig({
                        fields: {
                            givenName: {
                                index: index,
                            },
                        },
                    });
                    expect(result.fields[targetFieldToMap].index).toBe(index);
                });
            };
            for (var _i = 0, validIndices_1 = validIndices; _i < validIndices_1.length; _i++) {
                var index = validIndices_1[_i];
                _loop_1(index);
            }
            var defaultIndex = defaultCustomerDetailsFormConfig.fields[targetFieldToMap].index;
            var invalidIndices = ['1', NaN, undefined, null, {}];
            var _loop_2 = function (index) {
                it("to the default index for '" + index + "'", function () {
                    var _a;
                    var result = mapCustomerDetailsFormConfig({
                        fields: (_a = {},
                            _a[targetFieldToMap] = {
                                index: index,
                            },
                            _a),
                    });
                    expect(result.fields[targetFieldToMap].index).toBe(defaultIndex);
                });
            };
            for (var _a = 0, invalidIndices_1 = invalidIndices; _a < invalidIndices_1.length; _a++) {
                var index = invalidIndices_1[_a];
                _loop_2(index);
            }
        });
        describe('and maps show', function () {
            var validShowValues = [false, true];
            var _loop_3 = function (showValue) {
                it("for boolean '" + showValue + "'", function () {
                    var _a;
                    var result = mapCustomerDetailsFormConfig({
                        fields: (_a = {},
                            _a[targetFieldToMap] = {
                                show: showValue,
                            },
                            _a),
                    });
                    expect(result.fields[targetFieldToMap].show).toBe(showValue);
                });
            };
            for (var _i = 0, validShowValues_1 = validShowValues; _i < validShowValues_1.length; _i++) {
                var showValue = validShowValues_1[_i];
                _loop_3(showValue);
            }
            var defaultShowValue = defaultCustomerDetailsFormConfig.fields[targetFieldToMap].show;
            var invalidShowValues = ['1', undefined, null, {}];
            var _loop_4 = function (showValue) {
                it("to the default show value for '" + showValue + "'", function () {
                    var _a;
                    var result = mapCustomerDetailsFormConfig({
                        fields: (_a = {},
                            _a[targetFieldToMap] = {
                                show: showValue,
                            },
                            _a),
                    });
                    expect(result.fields[targetFieldToMap].show).toBe(defaultShowValue);
                });
            };
            for (var _a = 0, invalidShowValues_1 = invalidShowValues; _a < invalidShowValues_1.length; _a++) {
                var showValue = invalidShowValues_1[_a];
                _loop_4(showValue);
            }
        });
    });
    describe('can map max length from validation config', function () {
        afterAll(function () {
            configurationStoreInstance.flush();
        });
        it('with default configuration store config', function () {
            var defaultValidationConfig = defaultConfigurationStoreData.customerDetails.validation;
            var expectedMaxLengths = {
                givenName: {
                    maxLength: defaultValidationConfig.givenName.maxLength,
                },
                familyName: {
                    maxLength: defaultValidationConfig.familyName.maxLength,
                },
                phone: {
                    maxLength: defaultValidationConfig.phone.maxLength,
                },
                email: {
                    maxLength: defaultValidationConfig.email.maxLength,
                },
            };
            var result = mapCustomerDetailsFormConfig();
            expect(result.fields).toMatchObject(expectedMaxLengths);
        });
        var targetField = 'givenName';
        describe('ignoring invalid input', function () {
            var invalidInputs = [undefined, null, '1', -1, 0, {}];
            var _loop_5 = function (invalidInput) {
                it("maxLength '" + invalidInput + "'", function () {
                    var _a;
                    configurationStoreInstance.setData({
                        customerDetails: {
                            validation: (_a = {},
                                _a[targetField] = {
                                    maxLength: invalidInput,
                                },
                                _a),
                        },
                    });
                    var result = mapCustomerDetailsFormConfig();
                    expect(result.fields[targetField].maxLength).toBeUndefined();
                });
            };
            for (var _i = 0, invalidInputs_1 = invalidInputs; _i < invalidInputs_1.length; _i++) {
                var invalidInput = invalidInputs_1[_i];
                _loop_5(invalidInput);
            }
        });
        describe('from specified max length', function () {
            var validInputs = [1, 10, 9999];
            var _loop_6 = function (validInput) {
                it("maxLength '" + validInput + "'", function () {
                    var _a;
                    configurationStoreInstance.setConfig({
                        customerDetails: {
                            validation: (_a = {},
                                _a[targetField] = {
                                    maxLength: validInput,
                                },
                                _a),
                        },
                    });
                    var result = mapCustomerDetailsFormConfig();
                    expect(result.fields[targetField].maxLength).toBe(validInput);
                });
            };
            for (var _i = 0, validInputs_1 = validInputs; _i < validInputs_1.length; _i++) {
                var validInput = validInputs_1[_i];
                _loop_6(validInput);
            }
        });
    });
});
//# sourceMappingURL=config-mapper.test.js.map