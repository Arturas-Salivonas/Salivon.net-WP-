import { SignInType } from '../../../../../../types/loyalty/authentication/sign-in-provider';
import { SignInDisplayMode } from '../../sign-in';
import { getValidSignInWidgetConfig } from '../config-mapper';
describe('get-valid-config', function () {
    it('returns undefined when config is undefined', function () {
        expect(getValidSignInWidgetConfig(undefined)).toEqual(undefined);
    });
    describe('displayMode', function () {
        var displayModeTestCases = [
            { displayMode: 'Expand', expected: SignInDisplayMode.Expand },
            { displayMode: 'FadeIn', expected: SignInDisplayMode.FadeIn },
            { displayMode: undefined, expected: undefined },
            { displayMode: null, expected: undefined }
        ];
        displayModeTestCases.forEach(function (testCase) {
            it("ensures a valid display mode when input is " + testCase.displayMode, function () {
                var signInWidgetConfig = {
                    displayMode: testCase.displayMode
                };
                expect(getValidSignInWidgetConfig(signInWidgetConfig).displayMode).toEqual(testCase.expected);
            });
        });
    });
    describe('signInoptions', function () {
        var signInOptionsTestCases = [
            {
                name: 'has empty name',
                signInOption: [{ name: '', type: SignInType.UsernamePassword }],
                expected: [{ name: '', type: SignInType.UsernamePassword }]
            },
            {
                name: 'has missing name',
                signInOption: [{ name: undefined, type: SignInType.UsernamePassword }],
                expected: []
            },
            {
                name: 'has missing type',
                signInOption: [{ name: 'username', type: undefined }],
                expected: []
            },
            {
                name: 'has invalid type',
                signInOption: [{ name: 'username', type: 'invalid type' }],
                expected: []
            },
            {
                name: 'has invalid sign in function',
                signInOption: [{ name: 'username', type: SignInType.UsernamePassword, signIn: '' }],
                expected: []
            },
            {
                name: 'is username password type and missing sign in function',
                signInOption: [{ name: 'username', type: SignInType.UsernamePassword, signIn: undefined }],
                expected: [{ name: 'username', type: SignInType.UsernamePassword, signIn: undefined }]
            },
            {
                name: 'is email password type and missing sign in function',
                signInOption: [{ name: 'username', type: SignInType.EmailPassword, signIn: undefined }],
                expected: [{ name: 'username', type: SignInType.EmailPassword, signIn: undefined }]
            },
            {
                name: 'is social type and missing sign in function',
                signInOption: [{ name: 'username', type: SignInType.SocialAccount, signIn: undefined }],
                expected: []
            },
        ];
        signInOptionsTestCases.forEach(function (testCase) {
            it("ensures valid sign in options when sign in option " + testCase.name, function () {
                var signInWidgetConfig = {
                    providers: testCase.signInOption
                };
                expect(getValidSignInWidgetConfig(signInWidgetConfig).providers).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=config-mapper.test.js.map