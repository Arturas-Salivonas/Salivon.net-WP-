var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { isSignInWithUserCredentialsAuthentication } from '../../../../types/loyalty/authentication/sign-in-provider';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { SignInActions } from './components/sign-in-actions';
import { SignInForm } from './components/sign-in-form';
import { SignInNavigator } from './components/sign-in-navigator';
import { SignInSplitter } from './components/sign-in-splitter';
export var SignInDisplayMode;
(function (SignInDisplayMode) {
    SignInDisplayMode["Expand"] = "Expand";
    SignInDisplayMode["FadeIn"] = "FadeIn";
})(SignInDisplayMode || (SignInDisplayMode = {}));
var SignIn = /** @class */ (function (_super) {
    __extends(SignIn, _super);
    function SignIn(props) {
        var _this = _super.call(this, props) || this;
        _this.onShowSignInForm = function (signInProviderName) {
            _this.setState({ showSignInForm: true, currentSignInProviderName: signInProviderName });
        };
        _this.onHideSignInForm = function () {
            _this.setState({ showSignInForm: false });
        };
        _this.showSplitterForExpandItemInExpandDisplayMode = function (itemIndex, userCredentialsSignInProvidersCount) {
            if (!_this.isExpandDisplayMode)
                return false;
            if (_this.props.providers.length === userCredentialsSignInProvidersCount && itemIndex === 0)
                return false;
            return itemIndex < userCredentialsSignInProvidersCount;
        };
        _this.isExpandDisplayMode = props.displayMode === SignInDisplayMode.Expand;
        _this.state = {
            showSignInForm: false,
            currentSignInProviderName: ''
        };
        return _this;
    }
    SignIn.prototype.render = function () {
        var _this = this;
        var _a = this.props, providers = _a.providers, captchaConfig = _a.captchaConfig, displayText = _a.displayText;
        var _b = this.state, showSignInForm = _b.showSignInForm, currentSignInProviderName = _b.currentSignInProviderName;
        var b = bemClassBuilderFactory('v-sign-in');
        var userCredentialsSignInProviders = this.getSignwithUserCredentialsProviders();
        var userCredentialsSignInProvidersCount = userCredentialsSignInProviders.length;
        return (React.createElement("div", { className: b.block() },
            React.createElement(SignInNavigator, { showSignInForm: showSignInForm, onGoBack: this.onHideSignInForm, displayText: displayText }),
            React.createElement("div", { className: b.element('viewport', { expand: this.isExpandDisplayMode }) },
                React.createElement("div", { className: b.element('actions-wrapper', { hide: !this.isExpandDisplayMode && showSignInForm }) },
                    React.createElement(SignInActions, { displayText: displayText, isExpandDisplayMode: this.isExpandDisplayMode, onShowSignInForm: this.onShowSignInForm, signInProviders: providers })),
                React.createElement("div", { className: b.element('forms-wrapper') }, userCredentialsSignInProviders.map(function (provider, index) {
                    return React.createElement("div", { key: "user-credential-option-" + provider.name, className: b.element('form-item', { active: _this.isExpandDisplayMode || currentSignInProviderName === provider.name }) },
                        (_this.showSplitterForExpandItemInExpandDisplayMode(index, userCredentialsSignInProvidersCount))
                            && React.createElement(SignInSplitter, null),
                        React.createElement(SignInForm, { signInMethod: provider.type, captchaConfig: captchaConfig, signIn: provider.signIn, displayText: displayText }));
                })))));
    };
    SignIn.prototype.getSignwithUserCredentialsProviders = function () {
        return this.props.providers.filter(function (provider) { return isSignInWithUserCredentialsAuthentication(provider); });
    };
    SignIn.defaultProps = {
        displayMode: SignInDisplayMode.Expand
    };
    return SignIn;
}(React.Component));
export { SignIn };
//# sourceMappingURL=sign-in.js.map