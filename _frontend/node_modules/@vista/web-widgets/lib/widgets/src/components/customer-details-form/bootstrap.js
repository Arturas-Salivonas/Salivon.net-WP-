var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { orderService } from '../../../../api/src/services/order/order-service';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { orderStoreInstance } from '../../../../api/src/stores/order/order-store';
import { addWidgetBootstrap } from '../../bootstrap/add-widget-bootstrap';
import { createComponent } from '../../bootstrap/create-component';
import { CustomerDetailsForm } from './customer-details-form';
import { mapCustomerDetailsFormConfig } from './mappers/config-mapper';
import { mapCustomerDetailsFormDisplayText } from './mappers/display-text-mapper';
/**
 * Renders the customer details form widget.
 * @param bootstrap
 */
export var customerDetailsForm = function (bootstrap) {
    var props = {
        validationConfig: configurationStoreInstance.data.customerDetails.validation,
        orderStore: orderStoreInstance,
        onSubmit: bootstrap.events && bootstrap.events.onSubmit,
        config: mapCustomerDetailsFormConfig(bootstrap.config),
        displayText: mapCustomerDetailsFormDisplayText(bootstrap.displayText),
    };
    var componentInstance = createComponent(bootstrap.selector, CustomerDetailsForm, props);
    return __assign({}, componentInstance, { validateCustomerDetails: function () { return componentInstance._component.validateForm(); }, saveCustomerDetails: orderService.saveCustomerDetails });
};
addWidgetBootstrap('customerDetailsForm', customerDetailsForm);
//# sourceMappingURL=bootstrap.js.map