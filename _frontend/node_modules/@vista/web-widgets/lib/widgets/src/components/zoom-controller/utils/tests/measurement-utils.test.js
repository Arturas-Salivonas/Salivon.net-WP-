import { centerPoint, distanceBetweenPoints, scalePoint, subtractPoints } from '../measurement-utils';
describe('scalePoint', function () {
    var testCases = [
        {
            point: { x: 10, y: 10 },
            scale: 2,
            expectedResult: { x: 20, y: 20 }
        },
        {
            point: { x: 20, y: 20 },
            scale: 1,
            expectedResult: { x: 20, y: 20 }
        },
        {
            point: { x: 100, y: 100 },
            scale: 0.5,
            expectedResult: { x: 50, y: 50 }
        },
        {
            point: { x: 75, y: 75 },
            scale: 0,
            expectedResult: { x: 0, y: 0 }
        }
    ];
    testCases.forEach(function (_a) {
        var point = _a.point, scale = _a.scale, expectedResult = _a.expectedResult;
        it("scales " + JSON.stringify(point) + " by a scale of " + scale, function () {
            var result = scalePoint(scale)(point);
            expect(result).toEqual(expectedResult);
        });
    });
});
describe('subtractPoints', function () {
    var testCases = [
        {
            point1: { x: 10, y: 10 },
            point2: { x: 10, y: 10 },
            expectedResult: { x: 0, y: 0 }
        },
        {
            point1: { x: 10, y: 10 },
            point2: { x: 20, y: 30 },
            expectedResult: { x: -10, y: -20 }
        },
        {
            point1: { x: 100, y: 100 },
            point2: { x: 50, y: 30 },
            expectedResult: { x: 50, y: 70 }
        }
    ];
    testCases.forEach(function (_a) {
        var point1 = _a.point1, point2 = _a.point2, expectedResult = _a.expectedResult;
        it("subtracts " + JSON.stringify(point2) + " from " + JSON.stringify(point1), function () {
            var result = subtractPoints(point1, point2);
            expect(result).toEqual(expectedResult);
        });
    });
});
describe('centerPoint', function () {
    var testCases = [
        {
            dimensions: { width: 100, height: 100 },
            expectedResult: { x: 50, y: 50 }
        },
        {
            dimensions: { width: 50, height: 50 },
            expectedResult: { x: 25, y: 25 }
        },
        {
            dimensions: { width: 1, height: 1 },
            expectedResult: { x: 0.5, y: 0.5 }
        },
    ];
    testCases.forEach(function (_a) {
        var dimensions = _a.dimensions, expectedResult = _a.expectedResult;
        it("returns the center of " + JSON.stringify(dimensions), function () {
            var result = centerPoint(dimensions);
            expect(result).toEqual(expectedResult);
        });
    });
});
describe('distanceBetweenPoints', function () {
    var testCases = [
        {
            point1: { x: 0, y: 0 },
            point2: { x: 0, y: 0 },
            expectedResult: 0
        },
        {
            point1: { x: 0, y: 0 },
            point2: { x: 10, y: 0 },
            expectedResult: 10
        },
        {
            point1: { x: 0, y: 0 },
            point2: { x: 0, y: 10 },
            expectedResult: 10
        },
        {
            point1: { x: 0, y: 0 },
            point2: { x: 10, y: 10 },
            expectedResult: 14.14
        },
        {
            point1: { x: 526, y: 873 },
            point2: { x: -110, y: 242 },
            expectedResult: 895.91
        }
    ];
    testCases.forEach(function (_a) {
        var point1 = _a.point1, point2 = _a.point2, expectedResult = _a.expectedResult;
        it("returns the distance between " + JSON.stringify(point1) + " and " + JSON.stringify(point2), function () {
            var result = distanceBetweenPoints(point1, point2).toFixed(2);
            expect(Number(result)).toEqual(expectedResult);
        });
    });
});
//# sourceMappingURL=measurement-utils.test.js.map