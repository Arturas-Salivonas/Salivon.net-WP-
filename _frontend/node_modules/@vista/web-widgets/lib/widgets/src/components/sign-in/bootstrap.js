var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { loyaltyAuthenticationService } from '../../../../api/src/services/loyalty/loyalty-authentication-service';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { getBootstrapConfigOptionOrDefault } from '../../../../api/src/utils/get-bootstrap-config';
import { SignInType } from '../../../../types/loyalty/authentication/sign-in-provider';
import { addWidgetBootstrap } from '../../bootstrap/add-widget-bootstrap';
import { createComponent } from '../../bootstrap/create-component';
import { getValidSignInWidgetConfig } from './mappers/config-mapper';
import { mapSignInDisplayText } from './mappers/display-text-mapper';
import { SignIn, SignInDisplayMode } from './sign-in';
var signInByUserNameAndPassword = loyaltyAuthenticationService.signInByUserNameAndPassword, signInByEmailAndPassword = loyaltyAuthenticationService.signInByEmailAndPassword, signInByExternalToken = loyaltyAuthenticationService.signInByExternalToken;
function getProviders(config, events) {
    var returnMemberDetails = config && config.fetchMemberDetailsOnSignIn !== undefined ? config.fetchMemberDetailsOnSignIn : true;
    if (config && config.providers && config.providers.length > 0) {
        return config.providers.map(function (option) { return option.type === SignInType.SocialAccount
            ? createExternalProvider(option, events, returnMemberDetails)
            : createUserCredentialProvider(option, events, returnMemberDetails); });
    }
    return [createDefaultUserCredentialProvider({}, returnMemberDetails)];
}
function createDefaultUserCredentialProvider(signInWidgetEvents, returnMemberDetails) {
    if (signInWidgetEvents === void 0) { signInWidgetEvents = {}; }
    return {
        name: 'User Name',
        type: SignInType.UsernamePassword,
        signIn: extendUserCredentialSignIn(signInByUserNameAndPassword, signInWidgetEvents, returnMemberDetails)
    };
}
function createExternalProvider(signInType, signInWidgetEvents, returnMemberDetails) {
    if (signInWidgetEvents === void 0) { signInWidgetEvents = {}; }
    return __assign({}, signInType, { type: SignInType.SocialAccount, signIn: extendSocialSignIn(signInType.name, signInType.signIn, signInWidgetEvents, returnMemberDetails) });
}
function createUserCredentialProvider(provider, signInWidgetEvents, returnMemberDetails) {
    if (signInWidgetEvents === void 0) { signInWidgetEvents = {}; }
    var signIn = provider.signIn || getDefaultSignInForUserCredential(provider.type);
    var type = provider.type === SignInType.UsernamePassword ? SignInType.UsernamePassword : SignInType.EmailPassword;
    return __assign({}, provider, { type: type, signIn: extendUserCredentialSignIn(signIn, signInWidgetEvents, returnMemberDetails) });
}
function getDefaultSignInForUserCredential(signInType) {
    return signInType === SignInType.UsernamePassword
        ? signInByUserNameAndPassword
        : signInByEmailAndPassword;
}
function extendUserCredentialSignIn(signIn, signInWidgetEvents, returnMemberDetails) {
    return function (userIdentifier, password) {
        var authenticate = function () { return signIn(userIdentifier, password, returnMemberDetails); };
        return extendSignIn(authenticate, signInWidgetEvents);
    };
}
function extendSocialSignIn(issuerName, signIn, signInWidgetEvents, returnMemberDetails) {
    var _this = this;
    return function () {
        var authenticate = function () { return __awaiter(_this, void 0, void 0, function () {
            var token;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, signIn(returnMemberDetails)];
                    case 1:
                        token = _a.sent();
                        if (!token)
                            return [2 /*return*/, Promise.reject('Get external token failed.')];
                        return [2 /*return*/, signInByExternalToken(issuerName, token, returnMemberDetails)];
                }
            });
        }); };
        return extendSignIn(authenticate, signInWidgetEvents);
    };
}
function getValidSignInWidgetEvents(signInWidgetEvents) {
    if (signInWidgetEvents === undefined)
        return undefined;
    var asFunctionOrUndefined = function (f) { return typeof f === 'function' ? f : undefined; };
    return {
        onBeforeSignIn: asFunctionOrUndefined(signInWidgetEvents.onBeforeSignIn),
        onAfterFailedSignIn: asFunctionOrUndefined(signInWidgetEvents.onAfterFailedSignIn),
        onAfterSuccessfulSignIn: asFunctionOrUndefined(signInWidgetEvents.onAfterSuccessfulSignIn)
    };
}
function extendSignIn(signIn, signInWidgetEvents) {
    return __awaiter(this, void 0, void 0, function () {
        var loyaltyAuth, error_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (signInWidgetEvents.onBeforeSignIn)
                        signInWidgetEvents.onBeforeSignIn();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, signIn()];
                case 2:
                    loyaltyAuth = _a.sent();
                    if (signInWidgetEvents.onAfterSuccessfulSignIn)
                        signInWidgetEvents.onAfterSuccessfulSignIn(loyaltyAuth);
                    return [2 /*return*/, loyaltyAuth];
                case 3:
                    error_1 = _a.sent();
                    if (signInWidgetEvents.onAfterFailedSignIn)
                        signInWidgetEvents.onAfterFailedSignIn();
                    throw error_1;
                case 4: return [2 /*return*/];
            }
        });
    });
}
export var signIn = function (bootstrap) {
    var validatedBootstrap = __assign({}, bootstrap, { config: getValidSignInWidgetConfig(bootstrap.config), events: getValidSignInWidgetEvents(bootstrap.events) });
    var props = {
        providers: getProviders(validatedBootstrap.config, validatedBootstrap.events),
        displayMode: getBootstrapConfigOptionOrDefault(validatedBootstrap, 'displayMode', SignInDisplayMode.Expand),
        displayText: mapSignInDisplayText(bootstrap.displayText),
        captchaConfig: configurationStoreInstance.data.security.captcha,
    };
    return createComponent(bootstrap.selector, SignIn, props);
};
addWidgetBootstrap('signIn', signIn);
//# sourceMappingURL=bootstrap.js.map