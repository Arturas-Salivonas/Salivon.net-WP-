import * as React from 'react';
import { OrderStore } from '../../../../api/src/stores/order/order-store';
import { FormValidationResult } from '../../../../api/src/utils/form-validation/form-validation-result';
import { FormValidationConfig } from '../../../../api/src/utils/form-validation/validation-config/form-validation-configs';
import { OrderCustomerDetails } from '../../../../types/order/order-customer-details';
import { CustomerDetailsFormWidgetConfig } from './types/config';
import { CustomerDetailsFormWidgetDisplayText } from './types/display-text';
export interface CustomerDetailsFormProps {
    validationConfig: FormValidationConfig<OrderCustomerDetails>;
    orderStore: OrderStore;
    config: CustomerDetailsFormWidgetConfig;
    displayText: CustomerDetailsFormWidgetDisplayText;
    onSubmit?: (customerDetails: OrderCustomerDetails) => void;
}
export declare class CustomerDetailsForm extends React.Component<CustomerDetailsFormProps> {
    private readonly subscriptions;
    private readonly debounceTime;
    private readonly validator;
    constructor(props: CustomerDetailsFormProps);
    render(): JSX.Element;
    componentDidMount(): void;
    componentWillUnmount(): void;
    handleChange: (event: any) => void;
    handleSubmit: React.FormEventHandler;
    handleKeyPress: (event: any) => void;
    validateForm(): Promise<FormValidationResult<OrderCustomerDetails>>;
    attemptSubmit(): Promise<void>;
    private getRxValidator;
    private initialiseChangeValidators;
    private getFields;
    private getFieldForName;
    private getFormattedLengthErrorMessage;
    private getErrorForFieldName;
}
