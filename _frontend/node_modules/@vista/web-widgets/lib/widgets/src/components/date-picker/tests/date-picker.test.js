var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { exampleBusinessDates } from '../../../../../example-data/browsing/business-date';
import { LoadingState } from '../../../../../types/loading-state';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { DatePicker } from '../date-picker';
describe('DatePicker', function () {
    var testProps = {
        loadingState: LoadingState.Success,
        businessDates: exampleBusinessDates,
        selectedBusinessDate: exampleBusinessDates[0],
        onDateClicked: function () { return; }
    };
    it('should render correctly', function () {
        compareToSnapshot(React.createElement(DatePicker, __assign({}, testProps)));
    });
    it('should render null when loadingState = Failure', function () {
        compareToSnapshot(React.createElement(DatePicker, __assign({}, testProps, { loadingState: LoadingState.Failure })));
    });
    it('should render the skeleton when loadingState = Loading', function () {
        compareToSnapshot(React.createElement(DatePicker, __assign({}, testProps, { loadingState: LoadingState.Loading })));
    });
    it('should render the skeleton when loadingState = NotLoaded', function () {
        compareToSnapshot(React.createElement(DatePicker, __assign({}, testProps, { loadingState: LoadingState.NotLoaded })));
    });
});
//# sourceMappingURL=date-picker.test.js.map