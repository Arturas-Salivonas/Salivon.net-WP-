import { NumberInputType } from '../../../form/number-input/number-input';
import { defaultTicketPickerConfig } from '../../types/config';
import { mapTicketPickerConfig } from '../config-mapper';
describe('mapTicketPickerConfig', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapTicketPickerConfig(undefined);
        expect(result).toEqual(defaultTicketPickerConfig);
    });
    it('returns the default config when the provided config is empty', function () {
        var result = mapTicketPickerConfig({});
        expect(result).toEqual(defaultTicketPickerConfig);
    });
    describe('quantityInputType', function () {
        var defaultValue = defaultTicketPickerConfig.quantityInputType;
        var testCases = [
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: {}, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: 0, expected: defaultValue },
            { value: 'unknown', expected: defaultValue },
            { value: 'Basic', expected: NumberInputType.Basic },
            { value: 'Spinner', expected: NumberInputType.Spinner },
            { value: 'Select', expected: NumberInputType.Select }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                var config = {
                    quantityInputType: testCase.value
                };
                var result = mapTicketPickerConfig(config).quantityInputType;
                expect(result).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=config-mapper.test.js.map