var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { Formatter } from '../../../utils/formatter';
/**
 * Todo: Only shows details for first showtime in transaction
 */
var MemberTransactionHistoryTableRow = /** @class */ (function (_super) {
    __extends(MemberTransactionHistoryTableRow, _super);
    function MemberTransactionHistoryTableRow() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    MemberTransactionHistoryTableRow.prototype.render = function () {
        var _a = this.props, transaction = _a.transaction, configurationStore = _a.configurationStore;
        var b = bemClassBuilderFactory('v-member-transaction-history-table-row');
        var points = transaction.pointsAdjustments.map(function (x) { return x.adjustmentValue; }).reduce(function (total, item) { return total + item; }, 0);
        var formattedDate = transaction.transactionTime
            ? Formatter.Instance.date(transaction.transactionTime, configurationStore.data.localisation.date.short)
            : undefined;
        var showtime = this.getFirstShowtime();
        return (React.createElement("tr", { className: b.block() },
            React.createElement("td", { className: b.element('date') }, formattedDate),
            React.createElement("td", { className: b.element('details') },
                React.createElement("div", { className: b.element('details-wrapper') },
                    formattedDate &&
                        React.createElement("span", { className: b.element('details-date') }, formattedDate),
                    showtime &&
                        React.createElement("span", { className: b.element('details-film') }, this.getFilmTitle(showtime)),
                    React.createElement("ul", { className: b.element('details-line-items') }, this.getLineItemDescriptions().map(function (item, index) {
                        return React.createElement("li", { key: index }, item);
                    })),
                    showtime &&
                        React.createElement("span", { className: b.element('details_site') }, this.getSiteName(showtime)))),
            React.createElement("td", { className: b.element('points') },
                React.createElement("span", { className: b.element('points-value', { negative: points < 0 }) }, this.getFormattedPoints(points)))));
    };
    MemberTransactionHistoryTableRow.prototype.getFirstShowtime = function () {
        var _a = this.props, relatedData = _a.relatedData, transaction = _a.transaction;
        if (relatedData && transaction.showtimes && transaction.showtimes.length > 0) {
            var showtimeId = transaction.showtimes[0].showtimeId;
            if (!showtimeId)
                return undefined;
            return relatedData.showtimes.get(showtimeId);
        }
        return undefined;
    };
    MemberTransactionHistoryTableRow.prototype.getFormattedPoints = function (points) {
        var formattedPoints = Formatter.Instance.number(points);
        return points > 0 ? "+" + formattedPoints : formattedPoints;
    };
    MemberTransactionHistoryTableRow.prototype.getFilmTitle = function (showtime) {
        var relatedData = this.props.relatedData;
        if (!showtime.filmId)
            return undefined;
        var film = relatedData.films.get(showtime.filmId);
        return film ? film.title.text : undefined;
    };
    MemberTransactionHistoryTableRow.prototype.getSiteName = function (showtime) {
        var relatedData = this.props.relatedData;
        if (!showtime.siteId)
            return undefined;
        var site = relatedData.sites.get(showtime.siteId);
        return site ? site.name.text : undefined;
    };
    MemberTransactionHistoryTableRow.prototype.getLineItemDescriptions = function () {
        var transaction = this.props.transaction;
        var firstShowtime = transaction.showtimes[0];
        var groupedTickets = firstShowtime ? this.getGroupedTicketsDescriptionsForShowtime(firstShowtime) : [];
        var groupedItems = this.getGroupedItemDescriptionsForTransaction(transaction);
        return groupedTickets.concat(groupedItems);
    };
    MemberTransactionHistoryTableRow.prototype.getItemsDescription = function (groupedItem) {
        var relatedData = this.props.relatedData;
        var item = relatedData.items.get(groupedItem.key);
        return groupedItem.quantity + "x " + item.description.text;
    };
    MemberTransactionHistoryTableRow.prototype.getTicketsDescription = function (ticket) {
        var relatedData = this.props.relatedData;
        var ticketType = relatedData.ticketTypes.get(ticket.key);
        return ticket.quantity + "x " + ticketType.description.text;
    };
    MemberTransactionHistoryTableRow.prototype.getGroupedTicketsDescriptionsForShowtime = function (showtime) {
        var _this = this;
        var groupedTickets = showtime.tickets.reduce(function (map, ticket) {
            var existingItem = map.get(ticket.ticketTypeId);
            if (existingItem) {
                existingItem.quantity += ticket.quantity;
            }
            else {
                map.set(ticket.ticketTypeId, {
                    key: ticket.ticketTypeId,
                    quantity: ticket.quantity
                });
            }
            return map;
        }, new Map());
        var array = Array.from(groupedTickets, function (_a) {
            var _ = _a[0], value = _a[1];
            return value;
        });
        return array.map(function (x) { return _this.getTicketsDescription(x); });
    };
    MemberTransactionHistoryTableRow.prototype.getGroupedItemDescriptionsForTransaction = function (transaction) {
        var _this = this;
        var groupedItems = transaction.items.reduce(function (map, x) {
            var existingItem = map.get(x.itemId);
            if (existingItem) {
                existingItem.quantity += x.quantity ? x.quantity : 0;
            }
            else {
                map.set(x.itemId, {
                    key: x.itemId,
                    quantity: x.quantity ? x.quantity : 0
                });
            }
            return map;
        }, new Map());
        var array = Array.from(groupedItems, function (_a) {
            var _ = _a[0], value = _a[1];
            return value;
        });
        return array.map(function (x) { return _this.getItemsDescription(x); });
    };
    return MemberTransactionHistoryTableRow;
}(React.Component));
export { MemberTransactionHistoryTableRow };
//# sourceMappingURL=member-transaction-history-table-row.js.map