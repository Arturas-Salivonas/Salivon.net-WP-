var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { Logger } from '../../../../../api/src/utils/logger';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { ZoomController } from '../../zoom-controller/zoom-controller';
import { getMapBoundary, getMapDimensions, getMapScaleFactor } from '../positioning/map';
import { SeatPickerMap } from './seat-picker-map';
import { SeatPickerRowLabels } from './seat-picker-row-labels';
var seatLayoutBoundaryChanged = function (previousSeatLayout, currentSeatLayout) {
    var seatLayoutBoundaryChanged = previousSeatLayout.boundaryLeft !== currentSeatLayout.boundaryLeft
        || previousSeatLayout.boundaryRight !== currentSeatLayout.boundaryRight
        || previousSeatLayout.boundaryTop !== currentSeatLayout.boundaryTop;
    if (seatLayoutBoundaryChanged)
        return true;
    if (previousSeatLayout.areas.length !== currentSeatLayout.areas.length)
        return true;
    for (var i = 0; i < previousSeatLayout.areas.length; i++) {
        var previousArea = previousSeatLayout.areas[i];
        var currentArea = currentSeatLayout.areas[i];
        var areaBoundaryChanged = previousArea.top !== currentArea.top
            || previousArea.left !== currentArea.left
            || previousArea.height !== currentArea.height
            || previousArea.width !== currentArea.width;
        if (areaBoundaryChanged)
            return true;
    }
    return false;
};
var SeatPickerZoomController = /** @class */ (function (_super) {
    __extends(SeatPickerZoomController, _super);
    function SeatPickerZoomController() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.rowLabelsRef = React.createRef();
        _this.zoomControllerRef = React.createRef();
        _this.handleTransformationChanged = function (transformation) {
            var deltaScale = transformation.deltaScale, translation = transformation.translation;
            if (translation.x < 0) {
                // we need to reverse the delta scale here to 'undo' the scaling of the coordinate system within the viewport
                _this.setRowLabelsTranslation(-translation.x / deltaScale);
            }
            else {
                _this.setRowLabelsTranslation(0);
            }
        };
        _this.setRowLabelsTranslation = function (x) {
            var rowLabels = _this.rowLabelsRef.current;
            if (!rowLabels) {
                Logger.error('Cannot set row label translation on null row labels');
                return;
            }
            rowLabels.style.transform = "translate3d(" + x + "px, 0, 0)";
            var fixedClass = 'v-seat-picker-zoom-controller__row-labels--is-fixed';
            if (x > 0) {
                rowLabels.classList.add(fixedClass);
            }
            else {
                rowLabels.classList.remove(fixedClass);
            }
        };
        return _this;
    }
    SeatPickerZoomController.prototype.componentDidUpdate = function (prevProps) {
        if (prevProps.seatLayout !== this.props.seatLayout) {
            var boundaryChanged = seatLayoutBoundaryChanged(prevProps.seatLayout, this.props.seatLayout);
            if (boundaryChanged && this.zoomControllerRef.current !== null) {
                this.zoomControllerRef.current.resetZoom();
            }
        }
    };
    SeatPickerZoomController.prototype.render = function () {
        var _a = this.props, seatLayout = _a.seatLayout, config = _a.config, displayText = _a.displayText, onSeatClicked = _a.onSeatClicked, isSeatFirstOrdering = _a.isSeatFirstOrdering;
        var scaleFactor = getMapScaleFactor(seatLayout, config);
        var boundary = getMapBoundary(seatLayout, config.screen.position);
        var mapDimensions = getMapDimensions(boundary, scaleFactor, config);
        var rowLabelDimensions = {
            width: config.rowLabels.size + (config.rowLabels.margin * 2),
            height: mapDimensions.height
        };
        var totalWidth = rowLabelDimensions.width + mapDimensions.width;
        var b = bemClassBuilderFactory('v-seat-picker-zoom-controller');
        return (React.createElement(ZoomController, { ref: this.zoomControllerRef, className: b.block(), contentDimensions: { width: totalWidth, height: mapDimensions.height }, showPanButtons: config.navigation.showPanButtons, showZoomButtons: config.navigation.showZoomButtons, onContentTransformationChanged: this.handleTransformationChanged },
            React.createElement("div", { className: b.element('row-labels'), ref: this.rowLabelsRef, style: { width: rowLabelDimensions.width / totalWidth * 100 + "%" } },
                React.createElement(SeatPickerRowLabels, { seatLayout: seatLayout, scaleFactor: scaleFactor, config: config, mapBoundary: boundary, dimensions: rowLabelDimensions })),
            React.createElement("div", { className: b.element('map'), style: { width: mapDimensions.width / totalWidth * 100 + "%" } },
                React.createElement(SeatPickerMap, { seatLayout: seatLayout, config: config, displayText: displayText, onSeatClicked: onSeatClicked, isSeatFirstOrdering: isSeatFirstOrdering, dimensions: mapDimensions, boundary: boundary, scaleFactor: scaleFactor }))));
    };
    SeatPickerZoomController = __decorate([
        observer
    ], SeatPickerZoomController);
    return SeatPickerZoomController;
}(React.Component));
export { SeatPickerZoomController };
//# sourceMappingURL=seat-picker-zoom-controller.js.map