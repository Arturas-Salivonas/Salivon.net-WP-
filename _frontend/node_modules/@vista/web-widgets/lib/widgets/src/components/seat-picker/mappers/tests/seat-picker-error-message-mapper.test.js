import { SeatSelectionRuleName } from '../../../../../../api/src/stores/seating/helpers/rules/seat-selection-rule';
import { SeatingErrorCategory } from '../../../../../../api/src/stores/seating/helpers/types';
import { SetSeatsErrorCode } from '../../../../../../mx-api-client/src/mxt/types/set-seats-failed-response';
import { defaultSeatPickerDisplayText } from '../../types/display-text';
import { mapSeatPickerErrorMessage } from '../seat-picker-error-message-mapper';
describe('mapSeatPickerErrorMessage', function () {
    var displayText = defaultSeatPickerDisplayText;
    describe('SeatSelectionRuleViolation', function () {
        var testCases = [
            { ruleName: SeatSelectionRuleName.CannotExceedAllocatedSeatsForAreaCategory, expected: displayText.errorExceededAllocatedSeatsMessage },
            { ruleName: SeatSelectionRuleName.CannotLeaveGapsBetweenSelectedSeats, expected: displayText.errorGapBetweenSelectedSeatsMessage },
            { ruleName: SeatSelectionRuleName.CannotLeaveSingleSeatGapFromAisle, expected: displayText.errorSingleSeatGapFromAisleMessage },
            { ruleName: SeatSelectionRuleName.CannotLeaveSingleSeatGapFromUnavailableSeat, expected: displayText.errorSingleSeatGapFromUnavailableSeatMessage },
            { ruleName: SeatSelectionRuleName.CannotSelectUnavailableSeats, expected: displayText.errorSelectedUnavailableSeatMessage },
            { ruleName: SeatSelectionRuleName.MustFillSofaSeats, expected: displayText.errorEntireSofaNotSelectedMessage },
            { ruleName: SeatSelectionRuleName.MustSelectAllSeatsAllocatedForOrder, expected: displayText.errorNotAllSeatsSelectedMessage },
            { ruleName: SeatSelectionRuleName.MustSelectAssociatedWheelchairSeat, expected: displayText.errorCompanionSeatNotSelectedMessage },
            { ruleName: SeatSelectionRuleName.MustSelectAtLeastOneSeat, expected: displayText.errorNoSeatsSelectedMessage },
        ];
        testCases.forEach(function (testCase) {
            it("returns \"" + testCase.expected + "\" for rule " + testCase.ruleName, function () {
                var error = {
                    category: SeatingErrorCategory.RuleViolation,
                    ruleName: testCase.ruleName
                };
                var result = mapSeatPickerErrorMessage(error, displayText);
                expect(result).toEqual(testCase.expected);
            });
        });
        it('throws an error for an invalid value', function () {
            var error = {
                category: SeatingErrorCategory.RuleViolation,
                ruleName: -1
            };
            expect(function () { return mapSeatPickerErrorMessage(error, displayText); }).toThrow();
        });
    });
    describe('SeatingApiError', function () {
        var testCases = [
            { errorCode: SetSeatsErrorCode.SeatsUnavailable, expected: displayText.errorApiSelectedUnavailableSeatsMessage },
            { errorCode: -1, expected: displayText.errorApiFailedToReserveSeatsMessage },
        ];
        testCases.forEach(function (testCase) {
            it("returns \"" + testCase.expected + "\" for error code " + testCase.errorCode, function () {
                var error = {
                    category: SeatingErrorCategory.ApiError,
                    errorCode: testCase.errorCode
                };
                var result = mapSeatPickerErrorMessage(error, displayText);
                expect(result).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=seat-picker-error-message-mapper.test.js.map