var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { toJS, when } from 'mobx';
import { observer } from 'mobx-react';
import { toStream } from 'mobx-utils';
import * as React from 'react';
import { from, of, Subscription } from 'rxjs';
import { delay, mergeMap, switchMap } from 'rxjs/operators';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { FormValidationError } from '../../../../api/src/utils/form-validation/validation-rules/validation-error';
import { getKeyCodeForEvent, KeyCode } from '../../dom/key-code';
import { Formatter } from '../../utils/formatter';
import { EmailField, FamilyNameField, GivenNameField, PhoneNumberField } from './components/customer-details-fields';
import { CustomerDetailsWidgetValidator } from './customer-details-widget-validator';
var CustomerDetailsForm = /** @class */ (function (_super) {
    __extends(CustomerDetailsForm, _super);
    function CustomerDetailsForm(props) {
        var _this = _super.call(this, props) || this;
        _this.subscriptions = new Subscription();
        _this.debounceTime = 300;
        _this.handleChange = function (event) {
            var _a;
            var name = event.target.name;
            var value = event.target.value;
            var orderStore = _this.props.orderStore;
            orderStore.actions.updateCustomerDetails((_a = {},
                _a[name] = value,
                _a));
        };
        _this.handleSubmit = function (event) {
            event.preventDefault();
            // tslint:disable-next-line:no-floating-promises
            _this.attemptSubmit();
        };
        _this.handleKeyPress = function (event) {
            var keyCode = getKeyCodeForEvent(event);
            if (keyCode === KeyCode.Enter) {
                event.preventDefault();
                // tslint:disable-next-line:no-floating-promises
                _this.attemptSubmit();
            }
        };
        var validationConfig = props.validationConfig, orderStore = props.orderStore;
        _this.validator = new CustomerDetailsWidgetValidator(validationConfig, orderStore);
        return _this;
    }
    CustomerDetailsForm.prototype.render = function () {
        var _a = this.props, config = _a.config, orderStore = _a.orderStore, displayText = _a.displayText;
        var customerDetails = orderStore.data.customerDetails;
        var fields = this.getFields(config.fields, displayText, customerDetails);
        return (React.createElement("form", { id: "v-customer-details-form", className: "v-form", onKeyPress: this.handleKeyPress, onSubmit: this.handleSubmit, noValidate: true }, fields));
    };
    CustomerDetailsForm.prototype.componentDidMount = function () {
        var _this = this;
        var orderStore = this.props.orderStore;
        var disposer = when(function () { return orderStore.data.customerDetailsErrors.hasBeenValidated; }, function () { return _this.initialiseChangeValidators(); });
        this.subscriptions.add(new Subscription(disposer));
    };
    CustomerDetailsForm.prototype.componentWillUnmount = function () {
        this.subscriptions.unsubscribe();
    };
    CustomerDetailsForm.prototype.validateForm = function () {
        return __awaiter(this, void 0, void 0, function () {
            var result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.validator.validateForm()];
                    case 1:
                        result = _a.sent();
                        return [2 /*return*/, result];
                }
            });
        });
    };
    CustomerDetailsForm.prototype.attemptSubmit = function () {
        return __awaiter(this, void 0, void 0, function () {
            var formValidation, _a, orderStore, onSubmit;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.validateForm()];
                    case 1:
                        formValidation = _b.sent();
                        if (formValidation.isValid) {
                            _a = this.props, orderStore = _a.orderStore, onSubmit = _a.onSubmit;
                            onSubmit && onSubmit(toJS(orderStore.data.customerDetails));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    CustomerDetailsForm.prototype.getRxValidator = function (fieldName) {
        var _this = this;
        return from(toStream(function () { return _this.props.orderStore.data.customerDetails[fieldName]; }))
            .pipe(switchMap(function () { return of({})
            .pipe(delay(_this.debounceTime), mergeMap(function () { return _this.validator.validateField(fieldName); })); }));
    };
    CustomerDetailsForm.prototype.initialiseChangeValidators = function () {
        var config = this.props.config;
        for (var _i = 0, _a = Object.entries(config.fields); _i < _a.length; _i++) {
            var _b = _a[_i], fieldName = _b[0], fieldConfig = _b[1];
            if (fieldConfig.show) {
                var subscription = this.getRxValidator(fieldName).subscribe();
                this.subscriptions.add(subscription);
            }
        }
    };
    CustomerDetailsForm.prototype.getFields = function (fieldsConfig, displayText, customerDetails) {
        var _this = this;
        return Object.entries(fieldsConfig)
            .filter(function (_a) {
            var field = _a[1];
            return field.show;
        })
            .sort(function (_a, _b) {
            var fieldA = _a[1];
            var fieldB = _b[1];
            return fieldA.index - fieldB.index;
        })
            .map(function (_a) {
            var id = _a[0], fieldConfig = _a[1];
            return _this.getFieldForName(id, fieldConfig, displayText, customerDetails);
        });
    };
    CustomerDetailsForm.prototype.getFieldForName = function (fieldName, _a, displayText, customerDetails) {
        var maxLength = _a.maxLength;
        var props = {
            customerDetails: customerDetails,
            displayText: displayText,
            onChange: this.handleChange,
            error: this.getErrorForFieldName(fieldName),
            maxLength: maxLength,
            key: fieldName,
        };
        switch (fieldName) {
            case 'familyName':
                return React.createElement(FamilyNameField, __assign({}, props));
            case 'givenName':
                return React.createElement(GivenNameField, __assign({}, props));
            case 'phone':
                return React.createElement(PhoneNumberField, __assign({}, props));
            case 'email':
                return React.createElement(EmailField, __assign({}, props));
        }
    };
    CustomerDetailsForm.prototype.getFormattedLengthErrorMessage = function (key, errorText) {
        var fieldConfig = configurationStoreInstance.data.customerDetails.validation[key];
        var templateParameters = {
            minLength: fieldConfig.minLength,
            maxLength: fieldConfig.maxLength,
        };
        return Formatter.Instance.template(errorText, templateParameters);
    };
    CustomerDetailsForm.prototype.getErrorForFieldName = function (id) {
        var _this = this;
        return function () {
            var orderStore = _this.props.orderStore;
            var error = orderStore.data.customerDetailsErrors.validationErrors.get(id);
            if (!error)
                return undefined;
            var displayText = _this.props.displayText;
            switch (id) {
                case 'email':
                    switch (error) {
                        case FormValidationError.Required: return displayText.errorEmailRequiredMessage;
                        case FormValidationError.Format: return displayText.errorEmailFormatMessage;
                        case FormValidationError.Length: return _this.getFormattedLengthErrorMessage(id, displayText.errorEmailLengthMessage);
                    }
                    break;
                case 'familyName':
                    switch (error) {
                        case FormValidationError.Required: return displayText.errorFamilyNameRequiredMessage;
                        case FormValidationError.Format: return displayText.errorFamilyNameFormatMessage;
                        case FormValidationError.Length: return _this.getFormattedLengthErrorMessage(id, displayText.errorFamilyNameLengthMessage);
                    }
                    break;
                case 'givenName':
                    switch (error) {
                        case FormValidationError.Required: return displayText.errorGivenNameRequiredMessage;
                        case FormValidationError.Format: return displayText.errorGivenNameFormatMessage;
                        case FormValidationError.Length: return _this.getFormattedLengthErrorMessage(id, displayText.errorGivenNameLengthMessage);
                    }
                    break;
                case 'phone':
                    switch (error) {
                        case FormValidationError.Required: return displayText.errorPhoneRequiredMessage;
                        case FormValidationError.Format: return displayText.errorPhoneFormatMessage;
                        case FormValidationError.Length: return _this.getFormattedLengthErrorMessage(id, displayText.errorPhoneLengthMessage);
                    }
                    break;
            }
            // If the error doesn't match a case above assume it came from the custom validator function so directly consume it 
            return error;
        };
    };
    CustomerDetailsForm = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], CustomerDetailsForm);
    return CustomerDetailsForm;
}(React.Component));
export { CustomerDetailsForm };
//# sourceMappingURL=customer-details-form.js.map