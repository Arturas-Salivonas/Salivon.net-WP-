var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { getFormattedSiteAddress } from '../../../utils/get-formatted-site-address';
import { getTranslatedTextOrDefault } from '../../../utils/get-translated-text';
import { Icon } from '../../icon/icon';
var SitePickerUnselectedSite = /** @class */ (function (_super) {
    __extends(SitePickerUnselectedSite, _super);
    function SitePickerUnselectedSite() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleClick = function () { return _this.props.onClick(_this.props.site.id); };
        return _this;
    }
    SitePickerUnselectedSite.prototype.render = function () {
        var _a = this.props, site = _a.site, disabled = _a.disabled;
        var address = getFormattedSiteAddress(site.address);
        var b = bemClassBuilderFactory('v-site-picker-unselected-site');
        return (React.createElement("li", { className: b.block({ disabled: disabled }) },
            React.createElement("button", { className: b.element('button'), onClick: this.handleClick, disabled: disabled },
                React.createElement("div", { className: b.element('button-wrapper') },
                    React.createElement(Icon, { className: b.element('add-icon'), name: "plus-square" }),
                    React.createElement("div", { className: b.element('details') },
                        React.createElement("span", { className: b.element('name') }, getTranslatedTextOrDefault(site, 'name')),
                        address &&
                            React.createElement("span", { className: b.element('address') }, address))))));
    };
    return SitePickerUnselectedSite;
}(React.Component));
export { SitePickerUnselectedSite };
//# sourceMappingURL=site-picker-unselected-site.js.map