import { SeatPickerWidgetScreenPosition } from '../../types/config';
import { getScreenBoundary } from '../screen';
describe('getScreenBoundary', function () {
    describe('non-inverted seat map', function () {
        it('returns the boundary of the screen', function () {
            var seatLayout = {
                screenStart: 0,
                screenWidth: 100
            };
            var mapBoundary = {
                left: 0,
                top: 10,
                height: 30
            };
            var scaleFactor = 10;
            var config = {
                screen: {
                    height: 30,
                    margin: 5,
                    position: SeatPickerWidgetScreenPosition.Bottom
                },
                rowLabels: {
                    size: 20,
                    margin: 10,
                }
            };
            var boundary = getScreenBoundary(seatLayout, mapBoundary, scaleFactor, config);
            expect(boundary).toEqual({
                // 30[map height] * 10[scale factor] + 5[screen margin] = 305
                top: 305,
                // 0 (screenLeft)
                left: 0,
                // 100% x 10 (scaleFactor) = 1000
                width: 1000,
                // as per config
                height: 30
            });
        });
        it('returns the boundary of the screen', function () {
            var seatLayout = {
                screenStart: 25,
                screenWidth: 50
            };
            var mapBoundary = {
                left: 0,
                top: 10,
                height: 30
            };
            var scaleFactor = 5;
            var config = {
                screen: {
                    height: 40,
                    margin: 5,
                    position: SeatPickerWidgetScreenPosition.Bottom
                },
                rowLabels: {
                    size: 30,
                    margin: 5,
                }
            };
            var boundary = getScreenBoundary(seatLayout, mapBoundary, scaleFactor, config);
            expect(boundary).toEqual({
                // 30[map height] * 5[scale factor] + 5[screen margin] = 155
                top: 155,
                // 125 (screenLeft)
                left: 125,
                // 50% x 5 (scaleFactor) = 250
                width: 250,
                // as per config
                height: 40
            });
        });
    });
    describe('inverted seat map', function () {
        it('returns the boundary of the screen', function () {
            var seatLayout = {
                screenStart: 0,
                screenWidth: 100
            };
            var mapBoundary = {
                left: 0
            };
            var scaleFactor = 10;
            var config = {
                screen: {
                    height: 30,
                    margin: 5,
                    position: SeatPickerWidgetScreenPosition.Top
                },
                rowLabels: {
                    size: 20,
                    margin: 10,
                }
            };
            var boundary = getScreenBoundary(seatLayout, mapBoundary, scaleFactor, config);
            expect(boundary).toEqual({
                // always 0
                top: 0,
                // 0 (screenLeft)
                left: 0,
                // 100% x 10 (scaleFactor) = 1000
                width: 1000,
                // as per config
                height: 30
            });
        });
        it('returns the boundary of the screen', function () {
            var seatLayout = {
                screenStart: 25,
                screenWidth: 50
            };
            var mapBoundary = {
                left: 0
            };
            var scaleFactor = 5;
            var config = {
                screen: {
                    height: 40,
                    margin: 5,
                    position: SeatPickerWidgetScreenPosition.Top
                },
                rowLabels: {
                    size: 30,
                    margin: 5,
                }
            };
            var boundary = getScreenBoundary(seatLayout, mapBoundary, scaleFactor, config);
            expect(boundary).toEqual({
                // always 0
                top: 0,
                // 125 (screenLeft)
                left: 125,
                // 50% x 5 (scaleFactor) = 250
                width: 250,
                // as per config
                height: 40
            });
        });
    });
});
//# sourceMappingURL=screen.test.js.map