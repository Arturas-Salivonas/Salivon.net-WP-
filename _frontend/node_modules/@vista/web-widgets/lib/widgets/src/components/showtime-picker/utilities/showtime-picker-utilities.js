var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { getTimestamp } from '../../../../../api/src/services/browsing/utils/timestamp-utility';
import { isFetchedDataSuccess } from '../../../../../api/src/stores/cache-tools/fetched-data';
import { Logger } from '../../../../../api/src/utils/logger';
import { LoadingState } from '../../../../../types/loading-state';
import { ShowtimePickerMessageType } from '../components/showtime-picker-message';
/**
 * Returns a ShowtimeQuery object that contains the filmId and siteId filters for the showtime picker widget,
 * based on the current config and browsing store selections.
 */
export var getShowtimesQuery = function (browsingStore, filmIds, siteIds) {
    var siteIdsToDisplay = siteIds !== undefined && siteIds !== null
        ? siteIds
        : browsingStore.selectors.getSelectedSites().map(function (site) { return site.id; });
    return { filmIds: filmIds, siteIds: siteIdsToDisplay };
};
/**
 * Asynchronously loads screening dates from the API
 */
export var loadScreeningDates = function (browsingService, showtimesQuery) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        // Fetch Screening Dates
        return [2 /*return*/, browsingService.loadScreeningDates(showtimesQuery)];
    });
}); };
/**
 * Asynchronously loads the showtimes for the current query.
 * If a businessDate is provided, showtimes are loaded for that date.
 * If no businessDate is provided, showtimes are loaded for the first date with showtimes.
 */
export var loadShowtimes = function (browsingService, showtimesQuery, businessDate) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        if (businessDate) {
            return [2 /*return*/, browsingService.loadShowtimesForBusinessDate(businessDate, showtimesQuery)];
        }
        else {
            return [2 /*return*/, browsingService.loadShowtimesForFirstBusinessDate(showtimesQuery)];
        }
        return [2 /*return*/];
    });
}); };
export var handleApiError = function (err) {
    Logger.error('Showtime picker API error: ', err);
    // Show error toast
    return ShowtimePickerMessageType.FailedToLoadData;
};
/**
 * Action performed when a showtime button is clicked.
 */
export var handleShowtimeClicked = function (showtime, orderStore, configurationStore, orderService, events) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                if (!orderStore.selectors.hasOrderId()) {
                    orderStore.actions.initializeOrder(configurationStore.data.api.cinemaChainId);
                }
                return [4 /*yield*/, orderService.addShowtimeById(showtime.id)];
            case 1:
                _a.sent();
                if (events && events.onShowtimeClicked) {
                    events.onShowtimeClicked(showtime);
                }
                return [2 /*return*/];
        }
    });
}); };
/**
 * Action performed when a date is selected in the date picker
 */
export var handleDateSelected = function (browsingService, browsingStore, showtimesQuery, businessDate) { return __awaiter(_this, void 0, void 0, function () {
    var screeningDatesData, screeningDates, emptyShowtimesData;
    return __generator(this, function (_a) {
        screeningDatesData = browsingStore.selectors.getScreeningDatesForQuery(showtimesQuery);
        if (isFetchedDataSuccess(screeningDatesData)) {
            screeningDates = screeningDatesData.payload.map(function (date) { return date.businessDate; });
            if (screeningDates.length && !screeningDates.includes(businessDate)) {
                emptyShowtimesData = {
                    loadingState: LoadingState.Success,
                    payload: [],
                    timestamp: getTimestamp()
                };
                browsingStore.actions.setShowtimesForQueryOnBusinessDate(emptyShowtimesData, showtimesQuery, businessDate);
                return [2 /*return*/];
            }
        }
        // Date exists in screening dates, call API
        browsingService.loadShowtimesForBusinessDate(businessDate, showtimesQuery)
            .catch(function (err) { return Logger.error('Get Showtimes Error:', err); });
        return [2 /*return*/];
    });
}); };
/**
 * Action performed when the action button is clicked.
 */
export var handleActionButtonClicked = function (events) {
    if (events && events.onActionButtonClicked) {
        events.onActionButtonClicked();
    }
};
export var validateShowtimePickerData = function (screeningDateData, showtimeData, query, browsingStore, config) {
    var invalidStateMessage = undefined;
    var invalidStateMessageFilm = query.filmIds && query.filmIds.length === 1 ? browsingStore.data.filmsById.get(query.filmIds[0]) : undefined;
    var invalidStateMessageFilmTitle = invalidStateMessageFilm && invalidStateMessageFilm.title;
    if (query.siteIds.length === 0) {
        invalidStateMessage = ShowtimePickerMessageType.NoCinemasSelected;
    }
    else if (screeningDateData.loadingState === LoadingState.Success && screeningDateData.payload.length === 0) {
        invalidStateMessage = ShowtimePickerMessageType.NoShowtimesAllDates;
    }
    else if (showtimeData.loadingState === LoadingState.Success && showtimeData.payload.length === 0) {
        if (config.showFilmDetails) {
            invalidStateMessage = ShowtimePickerMessageType.NoShowtimesForSitesOnDate;
        }
        else {
            invalidStateMessage = ShowtimePickerMessageType.NoShowtimesForFilmOnDate;
        }
    }
    return invalidStateMessage ? { messageType: invalidStateMessage, messageFilmTitle: invalidStateMessageFilmTitle } : undefined;
};
//# sourceMappingURL=showtime-picker-utilities.js.map