var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { RecaptchaV2 } from './recaptcha-v2/recaptcha-v2';
/**
 * Wrapper component for supporting different captcha implementations
 */
var Captcha = /** @class */ (function (_super) {
    __extends(Captcha, _super);
    function Captcha() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.captchaRef = React.createRef();
        return _this;
    }
    Captcha.prototype.reset = function () {
        var captchaInstance = this.captchaRef.current;
        if (captchaInstance && captchaInstance.reset) {
            captchaInstance.reset();
        }
    };
    Captcha.prototype.render = function () {
        var _a = this.props, config = _a.config, onValueChanged = _a.onValueChanged;
        if (config.siteKey === undefined)
            return null;
        return (React.createElement(RecaptchaV2, { ref: this.captchaRef, siteKey: config.siteKey, size: config.size, onValueChanged: onValueChanged }));
    };
    return Captcha;
}(React.Component));
export { Captcha };
//# sourceMappingURL=captcha.js.map