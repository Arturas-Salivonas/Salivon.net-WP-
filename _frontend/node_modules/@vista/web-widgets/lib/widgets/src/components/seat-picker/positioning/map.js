import { SeatPickerWidgetScreenPosition } from '../types/config';
/**
 * Returns the scale factor (scale factor * % = dimension) of a seat layout map based on the minimum seat size.
 */
export function getMapScaleFactor(seatLayout, config) {
    var areaSeatSizeRatios = seatLayout.areas.map(getMinimumAreaSeatSizeRatio);
    var minSeatSizeRatio = Math.min.apply(Math, areaSeatSizeRatios);
    return (config.seats.minimumSize + (config.seats.margin * 2)) / minSeatSizeRatio;
}
/**
 * Converts a seat layout percentage to a SVG unit using a scale factor.
 */
export function getMapDimension(percentage, scaleFactor) {
    return Math.ceil(percentage * scaleFactor);
}
/**
 * Returns the minimum seat size ratio of an area as a percentage (e.g. area.width of 50% / 10 seats = ratio of 5% per seat).
 */
export function getMinimumAreaSeatSizeRatio(area) {
    var widthRatio = area.width / area.columnCount;
    var heightRatio = area.height / area.rowCount;
    return Math.min(widthRatio, heightRatio);
}
/**
 * Returns the dimensions of the seat map in SVG units.
 */
export function getMapDimensions(boundary, scaleFactor, config) {
    return {
        width: getMapDimension(boundary.width, scaleFactor),
        height: getMapDimension(boundary.height, scaleFactor) + config.screen.height + config.screen.margin
    };
}
/**
 * Returns the boundary of the seat map in percentages.
 */
export function getMapBoundary(seatLayout, position) {
    return position === SeatPickerWidgetScreenPosition.Bottom
        ? {
            top: seatLayout.boundaryTop,
            left: seatLayout.boundaryLeft,
            width: seatLayout.boundaryRight - seatLayout.boundaryLeft,
            height: 100 - seatLayout.boundaryTop
        }
        : {
            top: 0,
            left: 100 - seatLayout.boundaryRight,
            width: seatLayout.boundaryRight - seatLayout.boundaryLeft,
            height: 100 - seatLayout.boundaryTop
        };
}
//# sourceMappingURL=map.js.map