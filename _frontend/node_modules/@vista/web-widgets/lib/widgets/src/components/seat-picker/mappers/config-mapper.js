var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Validator } from '../../../../../api/src/utils/validator';
import { NotificationStyle } from '../../../../../widgets/src/components/notification/notification';
import { defaultSeatPickerConfig, SeatPickerWidgetLegendPosition, SeatPickerWidgetScreenPosition, SeatPickerWidgetShape } from '../types/config';
/**
 * Maps the config provided via the API to the config required by the Seat Picker widget.
 * Nulls out any invalid values and logs appropriate warnings.
 * Any undefined values will be replaced during mapping by the defaults.
 * @param config
 */
export function mapSeatPickerConfig(config) {
    if (!config)
        return defaultSeatPickerConfig;
    var valid = new Validator().ofType('object').validate(config, 'Seat picker config');
    if (!valid)
        return defaultSeatPickerConfig;
    return {
        screen: mapScreenConfig(config.screen),
        seats: mapSeatsConfig(config.seats),
        rowLabels: mapRowLabelsConfig(config.rowLabels),
        areaLabels: mapAreaLabelsConfig(config.areaLabels),
        legend: mapLegendConfig(config.legend),
        notification: mapNotificationConfig(config.notification),
        navigation: mapNavigationConfig(config.navigation)
    };
}
/**
 * Maps the screen config provided via the API to the screen config required by the seat picker widget.
 * @param config
 */
function mapScreenConfig(config) {
    var defaultConfig = defaultSeatPickerConfig.screen;
    if (config === undefined)
        return defaultConfig;
    var validatedConfig = getValidatedScreenConfig(config);
    return __assign({}, defaultConfig, validatedConfig);
}
/**
 * Validates the config values provided for the seat picker screen.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedScreenConfig(config) {
    if ('height' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.height, 'Seat picker screen height');
        if (!valid)
            delete config.height;
    }
    if ('margin' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.margin, 'Seat picker screen margin');
        if (!valid)
            delete config.margin;
    }
    if ('bevelOffset' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.bevelOffset, 'Seat picker screen bevel offset');
        if (!valid)
            delete config.bevelOffset;
    }
    if ('position' in config) {
        var valid = new Validator()
            .ofType('string')
            .includedInValues(Object.values(SeatPickerWidgetScreenPosition))
            .validate(config.position, 'Seat picker screen position');
        if (!valid)
            delete config.position;
    }
    return config;
}
/**
 * Maps the seats config provided via the API to the seats config required by the seat picker widget.
 * @param config
 */
function mapSeatsConfig(config) {
    var defaultConfig = defaultSeatPickerConfig.seats;
    if (config === undefined)
        return defaultConfig;
    var validatedConfig = getValidatedSeatsConfig(config);
    return __assign({}, defaultConfig, validatedConfig, { icons: __assign({}, defaultConfig.icons, validatedConfig.icons) });
}
/**
 * Validates the config values provided for the seat picker seats.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedSeatsConfig(config) {
    if ('minimumSize' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.minimumSize, 'Seat picker minimum seat size');
        if (!valid)
            delete config.minimumSize;
    }
    if ('iconSize' in config) {
        var valid = new Validator()
            .ofType('number').min(0).max(100)
            .validate(config.iconSize, 'Seat picker seat icon size');
        if (!valid)
            delete config.iconSize;
    }
    if ('margin' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.margin, 'Seat picker seat margin');
        if (!valid)
            delete config.margin;
    }
    if ('shape' in config) {
        var valid = new Validator()
            .ofType('string')
            .includedInValues(Object.values(SeatPickerWidgetShape))
            .validate(config.shape, 'Seat picker seat shape');
        if (!valid)
            delete config.shape;
    }
    if ('borderRadius' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.borderRadius, 'Seat picker seat border radius');
        if (!valid)
            delete config.borderRadius;
    }
    if ('borderWidth' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.borderWidth, 'Seat picker seat border width');
        if (!valid)
            delete config.borderWidth;
    }
    if ('showLabels' in config) {
        var valid = new Validator()
            .ofType('boolean')
            .validate(config.showLabels, 'Seat picker seat labels');
        if (!valid)
            delete config.showLabels;
    }
    if ('icons' in config) {
        config.icons = getValidatedSeatIcons(config.icons);
    }
    return config;
}
/**
 * Validates the config values provided for the seat picker seat icons.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedSeatIcons(icons) {
    var valid = new Validator().ofType('object').validate(icons, 'Seat picker icons');
    if (!valid || !icons)
        return {};
    var iconValidator = new Validator().ofType('string').allowNull().allowUndefined().minLength(1);
    if ('companion' in icons) {
        var valid_1 = iconValidator.validate(icons.companion, 'Seat picker companion seat icon');
        if (!valid_1)
            delete icons.companion;
    }
    if ('wheelchair' in icons) {
        var valid_2 = iconValidator.validate(icons.wheelchair, 'Seat picker wheelchair seat icon');
        if (!valid_2)
            delete icons.wheelchair;
    }
    if ('normal' in icons) {
        var valid_3 = iconValidator.validate(icons.normal, 'Seat picker normal seat icon');
        if (!valid_3)
            delete icons.normal;
    }
    if ('sofaLeft' in icons) {
        var valid_4 = iconValidator.validate(icons.sofaLeft, 'Seat picker left sofa seat icon');
        if (!valid_4)
            delete icons.sofaLeft;
    }
    if ('sofaMiddle' in icons) {
        var valid_5 = iconValidator.validate(icons.sofaMiddle, 'Seat picker middle sofa seat icon');
        if (!valid_5)
            delete icons.sofaMiddle;
    }
    if ('sofaRight' in icons) {
        var valid_6 = iconValidator.validate(icons.sofaRight, 'Seat picker right sofa seat icon');
        if (!valid_6)
            delete icons.sofaRight;
    }
    if ('friend' in icons) {
        var valid_7 = iconValidator.validate(icons.friend, 'Seat picker friend seat icon');
        if (!valid_7)
            delete icons.friend;
    }
    return icons;
}
/**
 * Maps the row labels config provided via the API to the row labels config required by the seat picker widget.
 * @param config
 */
function mapRowLabelsConfig(config) {
    var defaultConfig = defaultSeatPickerConfig.rowLabels;
    if (config === undefined)
        return defaultConfig;
    var validatedConfig = getValidatedRowLabelsConfig(config);
    return __assign({}, defaultConfig, validatedConfig);
}
/**
 * Validates the config values provided for the seat picker row labels.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedRowLabelsConfig(config) {
    if ('size' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.size, 'Seat picker row label size');
        if (!valid)
            delete config.size;
    }
    if ('margin' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.margin, 'Seat picker row label margin');
        if (!valid)
            delete config.margin;
    }
    if ('shape' in config) {
        var valid = new Validator()
            .ofType('string')
            .includedInValues(Object.values(SeatPickerWidgetShape))
            .validate(config.shape, 'Seat picker row label shape');
        if (!valid)
            delete config.shape;
    }
    if ('borderRadius' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.borderRadius, 'Seat picker row label border radius');
        if (!valid)
            delete config.borderRadius;
    }
    if ('borderWidth' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.borderWidth, 'Seat picker row label border width');
        if (!valid)
            delete config.borderWidth;
    }
    return config;
}
/**
 * Maps the area labels config provided via the API to the area labels config required by the seat picker widget.
 * @param config
 */
function mapAreaLabelsConfig(config) {
    var defaultConfig = defaultSeatPickerConfig.areaLabels;
    if (config === undefined)
        return defaultConfig;
    var validatedConfig = getValidatedAreaLabelsConfig(config);
    return __assign({}, defaultConfig, validatedConfig);
}
/**
 * Validates the config values provided for the seat picker row labels.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedAreaLabelsConfig(config) {
    if ('margin' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.margin, 'Seat picker area label margin');
        if (!valid)
            delete config.margin;
    }
    if ('show' in config) {
        var valid = new Validator()
            .ofType('boolean')
            .validate(config.show, 'Seat picker area label shape');
        if (!valid)
            delete config.show;
    }
    return config;
}
/**
 * Maps the legend config provided via the API to the legend config required by the seat picker widget.
 * @param config
 */
function mapLegendConfig(config) {
    var defaultConfig = defaultSeatPickerConfig.legend;
    if (config === undefined)
        return defaultConfig;
    var validatedConfig = getValidatedLegendConfig(config);
    return __assign({}, defaultConfig, validatedConfig, { items: mapLegendItemsConfig(defaultConfig.items, config.items) });
}
/**
 * Validates the config values provided for the seat picker legend.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedLegendConfig(config) {
    if ('position' in config) {
        var valid = new Validator()
            .ofType('string')
            .includedInValues(Object.values(SeatPickerWidgetLegendPosition))
            .validate(config.position, 'Seat picker legend position');
        if (!valid)
            delete config.position;
    }
    if ('seatSize' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.seatSize, 'Seat picker legend seat size');
        if (!valid)
            delete config.seatSize;
    }
    if ('seatIconSize' in config) {
        var valid = new Validator()
            .ofType('number').min(0).max(100)
            .validate(config.seatIconSize, 'Seat picker legend seat icon size');
        if (!valid)
            delete config.seatIconSize;
    }
    if ('seatShape' in config) {
        var valid = new Validator()
            .ofType('string')
            .includedInValues(Object.values(SeatPickerWidgetShape))
            .validate(config.seatShape, 'Seat picker legend seat shape');
        if (!valid)
            delete config.seatShape;
    }
    if ('seatBorderRadius' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.seatBorderRadius, 'Seat picker legend seat border radius');
        if (!valid)
            delete config.seatBorderRadius;
    }
    if ('seatBorderWidth' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.seatBorderWidth, 'Seat picker legend seat border width');
        if (!valid)
            delete config.seatBorderWidth;
    }
    return config;
}
/**
 * Maps the seat picker legend items config provided via the API to the seat picker legend items config required by the seat picker widget.
 */
function mapLegendItemsConfig(defaultConfig, config) {
    if (!config)
        return defaultConfig;
    return {
        available: mapLegendItemConfig(defaultConfig.available, config.available),
        unavailable: mapLegendItemConfig(defaultConfig.unavailable, config.unavailable),
        selected: mapLegendItemConfig(defaultConfig.selected, config.selected),
        wheelchair: mapLegendItemConfig(defaultConfig.wheelchair, config.wheelchair),
        companion: mapLegendItemConfig(defaultConfig.companion, config.companion),
        friend: mapLegendItemConfig(defaultConfig.friend, config.friend),
    };
}
/**
 *  Maps a seat picker legend item config provided via the API to the seat picker legend item config required by the seat picker widget.
 */
function mapLegendItemConfig(defaultConfig, config) {
    if (!config)
        return defaultConfig;
    var validatedConfig = getValidatedLegendItem(config);
    return __assign({}, defaultConfig, validatedConfig);
}
/**
 * Validates a legend item and merges it with a default.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedLegendItem(config) {
    var valid = new Validator().ofType('object').validate(config, 'Seat picker legend item');
    if (!valid || !config)
        return {};
    if ('show' in config) {
        var valid_8 = new Validator()
            .ofType('boolean')
            .validate(config.show, 'Seat picker legend item show');
        if (!valid_8)
            delete config.show;
    }
    if ('index' in config) {
        var valid_9 = new Validator()
            .ofType('number')
            .validate(config.index, 'Seat picker legend item index');
        if (!valid_9)
            delete config.index;
    }
    if ('icon' in config) {
        var valid_10 = new Validator()
            .ofType('string')
            .minLength(1)
            .allowNull().allowUndefined()
            .validate(config.icon, 'Seat picker legend item icon');
        if (!valid_10)
            delete config.icon;
    }
    return config;
}
/**
 * Maps the notification config provided via the API to the notification config required by the seat picker widget.
 * @param config
 */
function mapNotificationConfig(config) {
    var defaultConfig = defaultSeatPickerConfig.notification;
    if (config === undefined)
        return defaultConfig;
    var validatedConfig = getValidatedNotificationConfig(config);
    return __assign({}, defaultConfig, validatedConfig);
}
/**
 * Validates the config values provided for the seat picker notification.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedNotificationConfig(config) {
    if ('show' in config) {
        var valid = new Validator()
            .ofType('boolean')
            .validate(config.show, 'Seat picker notification show');
        if (!valid)
            delete config.show;
    }
    if ('style' in config) {
        var valid = new Validator()
            .ofType('string')
            .includedInValues(Object.values(NotificationStyle))
            .validate(config.style, 'Seat picker notification style');
        if (!valid)
            delete config.style;
    }
    return config;
}
/**
 * Maps the map navigation config provided via the API to the map navigation config required by the seat picker widget.
 * @param config
 */
function mapNavigationConfig(config) {
    var defaultConfig = defaultSeatPickerConfig.navigation;
    if (config === undefined)
        return defaultConfig;
    var validatedConfig = getValidatedNavigationConfig(config);
    return __assign({}, defaultConfig, validatedConfig);
}
/**
 * Validates the config values provided for the seat picker map navigation.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedNavigationConfig(config) {
    if ('showPanButtons' in config) {
        var valid = new Validator()
            .ofType('boolean')
            .validate(config.showPanButtons, 'Seat picker map navigation pan button show');
        if (!valid)
            delete config.showPanButtons;
    }
    if ('showZoomButtons' in config) {
        var valid = new Validator()
            .ofType('boolean')
            .validate(config.showZoomButtons, 'Seat picker map navigation zoom button show');
        if (!valid)
            delete config.showZoomButtons;
    }
    return config;
}
//# sourceMappingURL=config-mapper.js.map