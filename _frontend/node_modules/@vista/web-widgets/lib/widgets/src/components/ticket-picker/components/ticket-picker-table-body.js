var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { getSortedOrderTickets } from '../../../../../api/src/services/order/utils/get-sorted-order-tickets';
import { isVoucherTicket } from '../../../../../api/src/services/order/utils/order-ticket-utils';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { TicketPickerTableRow } from './ticket-picker-table-row';
var TicketPickerTableBody = /** @class */ (function (_super) {
    __extends(TicketPickerTableBody, _super);
    function TicketPickerTableBody() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TicketPickerTableBody.prototype.render = function () {
        var _this = this;
        var _a = this.props, orderStore = _a.orderStore, showtimeId = _a.showtimeId, config = _a.config, onTicketQuantityUpdate = _a.onTicketQuantityUpdate;
        if (!orderStore.selectors.hasShowtime(showtimeId))
            return null;
        var tickets = orderStore.selectors.getFlattenedTicketsForShowtime(showtimeId);
        var ticketTypes = orderStore.selectors.getShowtimeById(showtimeId).ticketTypes;
        var groupedTickets = tickets.map(function (ticket) {
            return {
                ticket: ticket,
                ticketType: ticketTypes.get(ticket.ticketTypeKey)
            };
        });
        var sortedTickets = getSortedOrderTickets(groupedTickets);
        var b = bemClassBuilderFactory('v-ticket-picker-table-body');
        return (React.createElement("tbody", { className: b.block() }, sortedTickets.map(function (_a) {
            var ticket = _a.ticket, ticketType = _a.ticketType;
            return (React.createElement(TicketPickerTableRow, { key: _this.getKeyForTicket(ticket, ticketType), orderStore: orderStore, ticket: ticket, ticketType: ticketType, showtimeId: showtimeId, config: config, onTicketQuantityUpdate: onTicketQuantityUpdate }));
        })));
    };
    TicketPickerTableBody.prototype.getKeyForTicket = function (ticket, ticketType) {
        return isVoucherTicket(ticket)
            ? ticketType.key + "-barcode-" + ticket.barcode
            : ticketType.key;
    };
    TicketPickerTableBody = __decorate([
        observer
    ], TicketPickerTableBody);
    return TicketPickerTableBody;
}(React.Component));
export { TicketPickerTableBody };
//# sourceMappingURL=ticket-picker-table-body.js.map