var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { orderStoreInstance } from '../../../../../api/src/stores/order/order-store';
import { exampleOrder } from '../../../../../example-data/order/order';
import { exampleOrderShowtime } from '../../../../../example-data/order/order-showtime';
import * as createComponent from '../../../bootstrap/create-component';
import { voucherInputForm } from '../bootstrap';
import { defaultVoucherInputFormDisplayText } from '../types/display-text';
describe('voucherInputForm bootstrap', function () {
    var component = { _component: {} };
    var createComponentSpy = jest.spyOn(createComponent, 'createComponent').mockReturnValue(component);
    var bootstrap = { selector: 'test', showtimeId: exampleOrderShowtime.showtimeId };
    beforeEach(function () {
        orderStoreInstance.actions.setOrderData(exampleOrder);
    });
    afterEach(function () {
        jest.clearAllMocks();
    });
    it('calls the create component function', function () {
        var response = voucherInputForm(__assign({}, bootstrap, { config: {
                enablePinInput: true,
            } }));
        expect(createComponentSpy).toBeCalledWith('test', expect.anything(), {
            displayText: defaultVoucherInputFormDisplayText,
            enablePinInput: true,
            handleVoucherDetails: expect.any(Function)
        });
        expect(response).toEqual(component);
    });
    it('calls the widget render function when no "enablePinInput" option is passed', function () {
        voucherInputForm(__assign({}, bootstrap));
        expect(createComponentSpy).toBeCalledWith('test', expect.anything(), {
            displayText: defaultVoucherInputFormDisplayText,
            enablePinInput: true,
            handleVoucherDetails: expect.any(Function)
        });
    });
    it('calls the widget render skeleton for loading indicator', function () {
        voucherInputForm(__assign({}, bootstrap));
        expect(createComponentSpy).toBeCalledWith('test', expect.anything(), {
            displayText: defaultVoucherInputFormDisplayText,
            enablePinInput: true,
            handleVoucherDetails: expect.any(Function)
        });
    });
    it('throws an error if no showtimeId is passed in the bootstrap', function () {
        expect(function () { return voucherInputForm(__assign({}, bootstrap, { showtimeId: undefined })); }).toThrow(/showtimeId/);
    });
    it('throws an error if there is no showtime can be found in the order', function () {
        expect(function () { return voucherInputForm(__assign({}, bootstrap, { showtimeId: '~' })); }).toThrow(/no showtime/);
    });
});
//# sourceMappingURL=bootstrap.test.js.map