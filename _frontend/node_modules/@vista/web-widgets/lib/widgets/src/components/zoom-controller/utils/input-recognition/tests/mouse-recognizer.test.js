import { MouseRecognizer } from '../mouse-recognizer';
describe('MouseRecognizer', function () {
    var mouseRecognizer;
    var onPanMock = jest.fn();
    beforeEach(function () {
        onPanMock.mockReturnValue(true);
        mouseRecognizer = createMouseRecognizer();
        mouseRecognizer.onPan(onPanMock);
    });
    afterEach(function () {
        jest.resetAllMocks();
    });
    describe('mouse not down', function () {
        it('doesn\'t pan on mouse move', function () {
            mouseRecognizer.move(createMouseEvent(0, 0));
            mouseRecognizer.move(createMouseEvent(100, 100));
            expect(onPanMock).not.toBeCalled();
        });
        it('doesn\'t pan on mouse move after a mouse down/up cycle', function () {
            mouseRecognizer.down(createMouseEvent());
            mouseRecognizer.up(createMouseEvent());
            mouseRecognizer.move(createMouseEvent(0, 0));
            expect(onPanMock).not.toBeCalled();
        });
    });
    describe('mouse down', function () {
        it('doesn\' pan on first mouse move', function () {
            mouseRecognizer.down(createMouseEvent());
            mouseRecognizer.move(createMouseEvent(0, 0));
            expect(onPanMock).not.toBeCalled();
        });
        it('pans on each mouse move after the first', function () {
            mouseRecognizer.down(createMouseEvent());
            mouseRecognizer.move(createMouseEvent(0, 0));
            expect(onPanMock).toHaveBeenCalledTimes(0);
            mouseRecognizer.move(createMouseEvent(100, 100));
            expect(onPanMock).toHaveBeenCalledTimes(1);
            expect(onPanMock).toHaveBeenLastCalledWith({ x: 100, y: 100 });
            mouseRecognizer.move(createMouseEvent(150, 150));
            expect(onPanMock).toHaveBeenCalledTimes(2);
            expect(onPanMock).toHaveBeenLastCalledWith({ x: 50, y: 50 });
        });
        it('doesn\' pan on small movements', function () {
            mouseRecognizer.down(createMouseEvent());
            mouseRecognizer.move(createMouseEvent(0, 0));
            mouseRecognizer.move(createMouseEvent(1, 1));
            expect(onPanMock).not.toBeCalled();
        });
    });
    it('prevents mouse clicks event default after panning', function () {
        mouseRecognizer.down(createMouseEvent());
        mouseRecognizer.move(createMouseEvent(0, 0));
        mouseRecognizer.move(createMouseEvent(100, 100));
        mouseRecognizer.up(createMouseEvent());
        var mouseClickEvent = createMouseEvent();
        mouseClickEvent.preventDefault = jest.fn();
        mouseClickEvent.stopImmediatePropagation = jest.fn();
        mouseRecognizer.click(mouseClickEvent);
        expect(mouseClickEvent.preventDefault).toHaveBeenCalled();
        expect(mouseClickEvent.stopImmediatePropagation).toHaveBeenCalled();
    });
    it('doesn\'t prevent mouse clicks event default when not panning', function () {
        mouseRecognizer.move(createMouseEvent(0, 0));
        mouseRecognizer.move(createMouseEvent(100, 100));
        var mouseClickEvent = createMouseEvent();
        mouseClickEvent.preventDefault = jest.fn();
        mouseClickEvent.stopImmediatePropagation = jest.fn();
        mouseRecognizer.click(mouseClickEvent);
        expect(mouseClickEvent.preventDefault).not.toHaveBeenCalled();
        expect(mouseClickEvent.stopImmediatePropagation).not.toHaveBeenCalled();
    });
});
function createMouseRecognizer() {
    return new MouseRecognizer();
}
function createMouseEvent(x, y) {
    var mouseEvent = { pageX: x, pageY: y };
    return mouseEvent;
}
//# sourceMappingURL=mouse-recognizer.test.js.map