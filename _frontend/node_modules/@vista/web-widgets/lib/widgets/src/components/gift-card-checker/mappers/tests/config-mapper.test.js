import { defaultGiftCardCheckerConfig } from '../../types/config';
import { mapGiftCardCheckerConfig } from '../config-mapper';
describe('mapGiftCardCheckerConfig', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapGiftCardCheckerConfig(undefined);
        expect(result).toEqual(defaultGiftCardCheckerConfig);
    });
    it('returns the default config when the provided config is empty', function () {
        var result = mapGiftCardCheckerConfig({});
        expect(result).toEqual(defaultGiftCardCheckerConfig);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapGiftCardCheckerConfig(1);
        expect(result).toEqual(defaultGiftCardCheckerConfig);
    });
    describe('showFormFieldLabels', function () {
        var defaultValue = defaultGiftCardCheckerConfig.showFormFieldLabels;
        var testCases = [
            { value: undefined, expected: defaultValue },
            { value: null, expected: defaultValue },
            { value: {}, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: 0, expected: defaultValue },
            { value: true, expected: true },
            { value: false, expected: false }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + JSON.stringify(testCase.expected) + " when " + JSON.stringify(testCase.value) + " is passed in", function () {
                var config = {
                    showFormFieldLabels: testCase.value
                };
                var result = mapGiftCardCheckerConfig(config).showFormFieldLabels;
                expect(result).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=config-mapper.test.js.map