import { TouchRecognizer } from '../touch-recognizer';
describe('TouchRecognizer', function () {
    var touchRecognizer;
    var onSingleTapMock;
    var onDoubleTapMock;
    var onPinchMock;
    var onPanMock;
    beforeEach(function () {
        onSingleTapMock = jest.fn();
        onDoubleTapMock = jest.fn();
        onPinchMock = jest.fn();
        onPanMock = jest.fn();
        jest.useFakeTimers();
        touchRecognizer = createTouchRecognizer();
        touchRecognizer.onSingleTap(onSingleTapMock);
        touchRecognizer.onDoubleTap(onDoubleTapMock);
        touchRecognizer.onPan(onPanMock);
        touchRecognizer.onPinch(onPinchMock);
    });
    describe('single tap', function () {
        it('doesn\'t call single tap handler immediately', function () {
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            expect(onSingleTapMock).not.toBeCalled();
            jest.runAllTimers();
        });
        it('eventually calls single tap handler', function () {
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            jest.runAllTimers();
            expect(onSingleTapMock).toBeCalled();
        });
        it('cancels tap on touch move', function () {
            touchRecognizer.start(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.move(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.move(createTouchEvent({ x: 200, y: 200 }));
            touchRecognizer.end(createTouchEvent({ x: 200, y: 200 }));
            jest.runAllTimers();
            expect(onSingleTapMock).not.toBeCalled();
        });
        it('calls single tap handler immediately if another tap is received at a greater distance than the single tap position threshold', function () {
            touchRecognizer.start(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.end(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.start(createTouchEvent({ x: 200, y: 200 }));
            touchRecognizer.end(createTouchEvent({ x: 200, y: 200 }));
            var calls = onSingleTapMock.mock.calls;
            expect(calls).toEqual([
                [{ x: 0, y: 0 }, undefined],
                [{ x: 100, y: 100 }, undefined],
            ]);
            jest.runAllTimers();
            expect(onSingleTapMock).toBeCalledWith({ x: 200, y: 200 }, undefined);
        });
    });
    describe('double tap', function () {
        it('immediately calls double tap handler after two quick touch starts', function () {
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            expect(onDoubleTapMock).toBeCalled();
        });
        it('doesn\'t call double tap handler after delay threshold exceeded between touch starts', function () {
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            jest.runAllTimers();
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            expect(onDoubleTapMock).not.toBeCalled();
        });
        it('calls double tap handler on 2nd touch end if delay threshold not exceeded between two touch starts', function () {
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            jest.runAllTimers();
            touchRecognizer.end(createTouchEvent({ x: 100, y: 100 }));
            expect(onDoubleTapMock).toBeCalled();
        });
    });
    describe('pinch', function () {
        it('calls pinch handler with scale of pinch', function () {
            touchRecognizer.move(createTouchEvent({ x: 50, y: 50 }, { x: 150, y: 150 }));
            touchRecognizer.move(createTouchEvent({ x: 0, y: 0 }, { x: 200, y: 200 }));
            expect(onPinchMock).toHaveBeenCalledTimes(1);
            expect(onPinchMock).toHaveBeenCalledWith(2, { x: 100, y: 100 });
        });
        it('doesn\'t tap when pinching', function () {
            touchRecognizer.start(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.start(createTouchEvent({ x: 0, y: 0 }, { x: 100, y: 100 }));
            touchRecognizer.move(createTouchEvent({ x: 0, y: 0 }, { x: 100, y: 100 }));
            touchRecognizer.move(createTouchEvent({ x: -100, y: -100 }, { x: 200, y: 200 }));
            jest.runAllTimers();
            expect(onSingleTapMock).not.toHaveBeenCalled();
        });
    });
    describe('pan', function () {
        it('pans on each touch move after the first', function () {
            touchRecognizer.move(createTouchEvent({ x: 0, y: 0 }));
            expect(onPanMock).toHaveBeenCalledTimes(0);
            touchRecognizer.move(createTouchEvent({ x: 100, y: 100 }));
            expect(onPanMock).toHaveBeenCalledTimes(1);
            expect(onPanMock).toHaveBeenLastCalledWith({ x: 100, y: 100 });
            touchRecognizer.move(createTouchEvent({ x: 150, y: 150 }));
            expect(onPanMock).toHaveBeenCalledTimes(2);
            expect(onPanMock).toHaveBeenLastCalledWith({ x: 50, y: 50 });
        });
        it('can pan while pinching', function () {
            touchRecognizer.move(createTouchEvent({ x: 0, y: 0 }, { x: 100, y: 100 }));
            touchRecognizer.move(createTouchEvent({ x: 0, y: 0 }, { x: 200, y: 200 }));
            expect(onPanMock).toHaveBeenCalledTimes(1);
            expect(onPanMock).toHaveBeenCalledWith({ x: 50, y: 50 });
        });
        it('doesn\'t pan on small movements', function () {
            touchRecognizer.move(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.move(createTouchEvent({ x: 1, y: 1 }));
            expect(onPanMock).not.toHaveBeenCalled();
        });
        it('doesn\'t tap immediately after panning then tapping the pan end point', function () {
            touchRecognizer.start(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.move(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.move(createTouchEvent({ x: 100, y: 100 }));
            jest.runAllTimers();
            touchRecognizer.end(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.start(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.end(createTouchEvent({ x: 0, y: 0 }));
            expect(onSingleTapMock).not.toHaveBeenCalled();
            expect(onDoubleTapMock).not.toHaveBeenCalled();
        });
        it('doesn\'t tap when panning', function () {
            touchRecognizer.start(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.move(createTouchEvent({ x: 0, y: 0 }));
            touchRecognizer.move(createTouchEvent({ x: 100, y: 100 }));
            touchRecognizer.move(createTouchEvent({ x: 200, y: 200 }));
            jest.runAllTimers();
            expect(onSingleTapMock).not.toHaveBeenCalled();
        });
    });
    describe('long press', function () {
        it('doesn\'t simulate a click when long pressing', function () {
            touchRecognizer.start(createTouchEvent({ x: 100, y: 100 }));
            jest.runAllTimers();
            expect(onSingleTapMock).not.toBeCalled();
        });
    });
});
function createTouchRecognizer() {
    return new TouchRecognizer();
}
function createTouchEvent() {
    var touches = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        touches[_i] = arguments[_i];
    }
    var event = {
        preventDefault: jest.fn(),
        touches: touches.map(function (touch) { return ({
            pageX: touch.x,
            pageY: touch.y
        }); })
    };
    return event;
}
//# sourceMappingURL=touch-recognizer.test.js.map