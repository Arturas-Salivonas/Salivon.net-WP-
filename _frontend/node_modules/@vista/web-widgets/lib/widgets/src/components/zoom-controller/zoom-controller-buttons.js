var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { Button, ButtonColor } from '../button/button';
export var ButtonAction;
(function (ButtonAction) {
    ButtonAction["PanUp"] = "PanUp";
    ButtonAction["PanDown"] = "PanDown";
    ButtonAction["PanLeft"] = "PanLeft";
    ButtonAction["PanRight"] = "PanRight";
    ButtonAction["ZoomIn"] = "ZoomIn";
    ButtonAction["ZoomOut"] = "ZoomOut";
})(ButtonAction || (ButtonAction = {}));
var ZoomControllerButtons = /** @class */ (function (_super) {
    __extends(ZoomControllerButtons, _super);
    function ZoomControllerButtons(props) {
        var _this = _super.call(this, props) || this;
        _this.onPanAvailabilityChanged = function (availability) {
            _this.setState({
                panAvailability: availability
            });
        };
        _this.onZoomAvailabilityChanged = function (availability) {
            _this.setState({
                zoomAvailability: availability
            });
        };
        _this.getButtonAvailability = function (action) {
            var _a = _this.state, zoomAvailability = _a.zoomAvailability, panAvailability = _a.panAvailability;
            if (action === ButtonAction.ZoomIn || action === ButtonAction.ZoomOut) {
                if (!zoomAvailability)
                    return false;
            }
            else if (!panAvailability)
                return false;
            switch (action) {
                case ButtonAction.ZoomIn:
                    return zoomAvailability.in;
                case ButtonAction.ZoomOut:
                    return zoomAvailability.out;
                case ButtonAction.PanLeft:
                    return panAvailability.left;
                case ButtonAction.PanRight:
                    return panAvailability.right;
                case ButtonAction.PanUp:
                    return panAvailability.up;
                case ButtonAction.PanDown:
                    return panAvailability.down;
            }
        };
        _this.state = {
            panAvailability: {
                down: false,
                left: false,
                right: false,
                up: false,
            },
            zoomAvailability: {
                in: false,
                out: false,
            }
        };
        if (props.showPanButtons) {
            props.handler.onPanAvailabilityChanged = _this.onPanAvailabilityChanged;
        }
        if (props.showZoomButtons) {
            props.handler.onZoomAvailabilityChanged = _this.onZoomAvailabilityChanged;
        }
        return _this;
    }
    ZoomControllerButtons.prototype.render = function () {
        var _a, _b, _c, _d, _e, _f;
        var _g = this.props, handler = _g.handler, showPanButtons = _g.showPanButtons, showZoomButtons = _g.showZoomButtons;
        if (!showPanButtons && !showZoomButtons)
            return null;
        var b = bemClassBuilderFactory('v-zoom-controller-buttons');
        return (React.createElement("div", { className: b.block() },
            showZoomButtons &&
                React.createElement("div", { className: b.element('zoom-buttons') },
                    React.createElement(Button, { className: b.element('button', (_a = {}, _a[ButtonAction.ZoomIn] = true, _a)), color: ButtonColor.Secondary, disabled: !this.getButtonAvailability(ButtonAction.ZoomIn), onClick: handler.zoomIn, icon: "plus", iconOnly: true }),
                    React.createElement(Button, { className: b.element('button', (_b = {}, _b[ButtonAction.ZoomOut] = true, _b)), color: ButtonColor.Secondary, disabled: !this.getButtonAvailability(ButtonAction.ZoomOut), onClick: handler.zoomOut, icon: "minus", iconOnly: true })),
            showPanButtons &&
                React.createElement("div", { className: b.element('pan-buttons') },
                    React.createElement(Button, { className: b.element('button', (_c = {}, _c[ButtonAction.PanLeft] = true, _c)), color: ButtonColor.Secondary, disabled: !this.getButtonAvailability(ButtonAction.PanLeft), onClick: handler.panLeft, icon: "triangle-left", iconOnly: true }),
                    React.createElement(Button, { className: b.element('button', (_d = {}, _d[ButtonAction.PanRight] = true, _d)), color: ButtonColor.Secondary, disabled: !this.getButtonAvailability(ButtonAction.PanRight), onClick: handler.panRight, icon: "triangle-right", iconOnly: true }),
                    React.createElement(Button, { className: b.element('button', (_e = {}, _e[ButtonAction.PanUp] = true, _e)), color: ButtonColor.Secondary, disabled: !this.getButtonAvailability(ButtonAction.PanUp), onClick: handler.panUp, icon: "triangle-up", iconOnly: true }),
                    React.createElement(Button, { className: b.element('button', (_f = {}, _f[ButtonAction.PanDown] = true, _f)), color: ButtonColor.Secondary, disabled: !this.getButtonAvailability(ButtonAction.PanDown), onClick: handler.panDown, icon: "triangle-down", iconOnly: true }))));
    };
    return ZoomControllerButtons;
}(React.Component));
export { ZoomControllerButtons };
//# sourceMappingURL=zoom-controller-buttons.js.map