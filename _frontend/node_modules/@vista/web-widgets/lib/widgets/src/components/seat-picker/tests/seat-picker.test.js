var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// import { mount } from 'enzyme';
import * as React from 'react';
import { mapMxSeatLayoutToWidgetSeatLayout } from '../../../../../api/src/mappers/seating/seat-layout-mapper';
// import { orderService } from '../../../../../api/src/services/order/order-service';
// import { seatingService } from '../../../../../api/src/services/seating/seating-service';
// import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
import { orderStoreInstance } from '../../../../../api/src/stores/order/order-store';
// import { SeatSelectionValidationResult } from '../../../../../api/src/stores/seating/helpers/seat-selection-validation';
// import { SeatSelectionHandler } from '../../../../../api/src/stores/seating/helpers/types';
import { seatingStoreInstance } from '../../../../../api/src/stores/seating/seating-store';
// import { Logger } from '../../../../../api/src/utils/logger';
import { exampleOrder } from '../../../../../example-data/order/order';
import { exampleOrderShowtime } from '../../../../../example-data/order/order-showtime';
import { simpleSeatLayoutData } from '../../../../../example-data/seating/simple';
// import { SeatLayout } from '../../../../../types/seating/seat-layout';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
// import { runAllPromises } from '../../../tests/run-all-promises';
import { SeatPicker } from '../seat-picker';
import { defaultSeatPickerAssets } from '../types/assets';
import { defaultSeatPickerConfig } from '../types/config';
import { defaultSeatPickerDisplayText } from '../types/display-text';
describe('SeatPicker', function () {
    // const onLoadSeatLayoutFailedMock = jest.fn();
    // const onSeatLayoutLoadedMock = jest.fn();
    // const onSelectedSeatsChangedMock = jest.fn();
    var seatLayout = mapMxSeatLayoutToWidgetSeatLayout(simpleSeatLayoutData);
    var testProps;
    // const getSeatLayoutSpy = jest.spyOn(seatingService, 'getSeatLayout').mockResolvedValue(seatLayout);
    // const loggerErrorSpy = jest.spyOn(Logger, 'error');
    jest.spyOn(seatingStoreInstance, 'setData');
    jest.spyOn(seatingStoreInstance, 'onSelectedSeatsChanged');
    beforeEach(function () {
        orderStoreInstance.actions.setOrderData(exampleOrder);
        seatingStoreInstance.setSeatLayout(seatLayout);
        testProps = {
            showtimeId: exampleOrderShowtime.showtimeId,
            seatingStore: seatingStoreInstance,
            config: defaultSeatPickerConfig,
            displayText: defaultSeatPickerDisplayText,
            assets: defaultSeatPickerAssets,
            isSeatFirstOrdering: false,
        };
    });
    afterEach(function () {
        jest.clearAllMocks();
        seatingStoreInstance.flush();
        orderStoreInstance.flush();
    });
    it('renders correctly', function () {
        compareToSnapshot(React.createElement(SeatPicker, __assign({}, testProps)));
    });
    // it('should render the loading indicator correctly', () => {
    //     seatingStoreInstance.flush();
    //     compareToSnapshot(<SeatPicker {...testProps} />);
    // });
    // it('renders with legend position "Bottom" correctly', () => {
    //     testProps.config.legend.position = SeatPickerWidgetLegendPosition.Bottom;
    //     compareToSnapshot(<SeatPicker {...testProps} />);
    // });
    // it('renders with legend position "Top" correctly', () => {
    //     testProps.config.legend.position = SeatPickerWidgetLegendPosition.Top;
    //     compareToSnapshot(<SeatPicker {...testProps} />);
    // });
    // describe('componentDidMount', () => {
    //     it('throws an error when getSeatLayout fails', async () => {
    //         expect.assertions(2);
    //         seatingStoreInstance.data.seatLayout = {} as SeatLayout;
    //         const testError = new Error('Test Error');
    //         getSeatLayoutSpy.mockRejectedValueOnce(testError);
    //         const wrapper = shallow(<SeatPicker {...testProps} events={{onLoadSeatLayoutFailed: onLoadSeatLayoutFailedMock}}/>);
    //         wrapper.instance().componentDidMount();
    //         await runAllPromises();
    //         expect(onLoadSeatLayoutFailedMock).toBeCalledWith(testError);
    //         expect(loggerErrorSpy).toBeCalledWith(expect.stringContaining('load seat layout'));
    //     });
    //     it('does not reload the seat layout data when it has already been loaded', () => {
    //         seatingStoreInstance.data.seatLayout = seatLayout;
    //         const wrapper = shallow(<SeatPicker {...testProps} />);
    //         wrapper.instance().componentDidMount();
    //         expect(seatingService.getSeatLayout).not.toBeCalled();
    //         expect(seatingStoreInstance.setData).toBeCalledWith({
    //             errors: [],
    //             friendSeats: undefined,
    //             seatLayout: seatLayout,
    //             seatLayoutAutoAllocationStatus: { autoAllocated: false },
    //         });
    //     });
    //     it('does not load the seat layout data when the data is passed in as config', () => {
    //         const wrapper = shallow(
    //             <SeatPicker
    //                 {...testProps}
    //                 config={{...testProps.config, seatLayoutData: seatLayout }}
    //             />
    //         );
    //         wrapper.instance().componentDidMount();
    //         expect(seatingService.getSeatLayout).not.toBeCalled();
    //         expect(seatingStoreInstance.setData).toBeCalledWith({
    //             errors: [],
    //             friendSeats: undefined,
    //             seatLayout: seatLayout,
    //             seatLayoutAutoAllocationStatus: { autoAllocated: false },
    //         });
    //     });
    //     it('loads the seat layout data when needed', async () => {
    //         expect.assertions(3);
    //         seatingStoreInstance.data.seatLayout = {} as SeatLayout;
    //         const wrapper = shallow(<SeatPicker {...testProps} events={{onSeatLayoutLoaded: onSeatLayoutLoadedMock}}/>);
    //         wrapper.instance().componentDidMount();
    //         await runAllPromises();
    //         expect(seatingService.getSeatLayout).toBeCalledWith(testProps.showtimeId);
    //         expect(seatingStoreInstance.setData).toBeCalledWith({
    //             errors: [],
    //             friendSeats: undefined,
    //             seatLayout: seatLayout,
    //             seatLayoutAutoAllocationStatus: { autoAllocated: false },
    //         });
    //         expect(onSeatLayoutLoadedMock).toBeCalledWith(seatLayout);
    //     });
    //     it('can set a custom handler', async () => {
    //         expect.assertions(1);
    //         const validationResult: SeatSelectionValidationResult = {
    //             valid: true,
    //             ruleViolations: []
    //         };
    //         const handler: SeatSelectionHandler = {
    //             // tslint:disable-next-line:no-empty
    //             setSeatLayout: (seatLayout) => { },
    //             selectSeat: (seat, areaCategory) => validationResult,
    //             deselectSeat: (seat, areaCategory) => validationResult,
    //             validateSelection: () => validationResult
    //         };
    //         shallow(
    //             <SeatPicker
    //                 {...testProps}
    //                 config={{
    //                     ...testProps.config,
    //                     seatSelection: {
    //                         handler: handler,
    //                     }
    //                 } as SeatPickerWidgetConfig }
    //             />
    //         );
    //         await runAllPromises();
    //         expect(seatingStoreInstance.options.selectSeatHandler).toBe(handler);
    //     });
    //     it('calls onSelectedSeatsChanged event after loading seat layout', async () => {
    //         expect.assertions(1);
    //         const wrapper = mount(<SeatPicker {...testProps} events={{onSelectedSeatsChanged: onSelectedSeatsChangedMock}}/>);
    //         wrapper.instance().componentDidMount();
    //         await runAllPromises();
    //         expect(onSelectedSeatsChangedMock).toBeCalledTimes(1);
    //     });
    // it('retrieves showtime from the Api and adds it to the store if there is no showtime in the order', async () => {
    //     seatingStoreInstance.data.seatLayout = {} as SeatLayout;
    //     orderService.addShowtimeById = jest.fn();
    //     const showtimeId = '5';
    //     configurationStoreInstance.setData({
    //         ticketing: {
    //             isSeatFirstOrdering: true,
    //             maximumAllowedTicketsInAnOrder: 20,
    //             admittingDuration: 15
    //         }
    //     });
    //     const wrapper = mount(<SeatPicker {...testProps} showtimeId={showtimeId}/>);
    //     wrapper.instance().componentDidMount();
    //     await runAllPromises();
    //     expect(orderService.addShowtimeById).toBeCalledWith(showtimeId);
    // });
    // });
    // TO DO REWRITE THOSE TESTS
});
//# sourceMappingURL=seat-picker.test.js.map