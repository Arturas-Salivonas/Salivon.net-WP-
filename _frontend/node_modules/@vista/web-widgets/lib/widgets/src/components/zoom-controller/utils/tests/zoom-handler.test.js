import { ZoomHandler } from '../zoom-handler';
describe('ZoomHandler', function () {
    jest.useFakeTimers();
    var zoomHandler;
    var viewport = {
        addEventListener: jest.fn(),
        removeEventListener: jest.fn(),
        clientWidth: 500,
        clientHeight: 500
    };
    var content = {
        setAttribute: jest.fn()
    };
    var contentDimensions = {
        width: 1000,
        height: 1000
    };
    window.addEventListener = jest.fn();
    window.removeEventListener = jest.fn();
    document.addEventListener = jest.fn();
    document.removeEventListener = jest.fn();
    beforeEach(function () {
        jest.clearAllMocks();
        jest.clearAllTimers();
        window.requestAnimationFrame = jest.fn(function (callback) {
            setTimeout(callback, 1);
            return 1;
        });
        zoomHandler = new ZoomHandler();
        zoomHandler.animationDuration = 5;
    });
    describe('setElements', function () {
        it('should add event listeners to the viewport, window and document', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            expect(viewport.addEventListener).toBeCalled();
            expect(window.addEventListener).toBeCalled();
            expect(document.addEventListener).toBeCalled();
        });
        it('should set the content style attribute', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            jest.runOnlyPendingTimers();
            expect(content.setAttribute).toBeCalledWith('style', expect.anything());
            expect(content.setAttribute).toHaveBeenCalledTimes(1);
        });
    });
    describe('unmount', function () {
        it('should remove all event listeners', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            zoomHandler.unmount();
            expect(viewport.removeEventListener.mock.calls).toEqual(viewport.addEventListener.mock.calls);
            expect(window.removeEventListener.mock.calls).toEqual(window.addEventListener.mock.calls);
            expect(document.removeEventListener.mock.calls).toEqual(document.addEventListener.mock.calls);
        });
        it('can unmount without previously calling setElements', function () {
            zoomHandler.unmount();
            expect(viewport.removeEventListener).not.toHaveBeenCalled();
            expect(window.removeEventListener).toHaveBeenCalled();
            expect(document.removeEventListener).toHaveBeenCalled();
        });
    });
    describe('isAnimating', function () {
        it('should return false if the animator is undefined', function () {
            zoomHandler.animator = undefined;
            expect(zoomHandler.isAnimating).toEqual(false);
        });
        it('should return false if the animator is not animating', function () {
            zoomHandler.animator = { isAnimating: false };
            expect(zoomHandler.isAnimating).toEqual(false);
        });
        it('should return true if the animator is animating', function () {
            zoomHandler.animator = { isAnimating: true };
            expect(zoomHandler.isAnimating).toEqual(true);
        });
    });
    describe('isZoomedIn', function () {
        it('should return false if the minScale == currentTotalScale', function () {
            zoomHandler.minScale = 0.5;
            zoomHandler.getCurrentTotalScale = function () { return 0.5; };
            expect(zoomHandler.isZoomedIn).toEqual(false);
        });
        it('should return true if the the currentTotalScale > minScale', function () {
            zoomHandler.minScale = 0.5;
            zoomHandler.getCurrentTotalScale = function () { return 0.6; };
            expect(zoomHandler.isZoomedIn).toEqual(true);
        });
    });
    describe('zoomIn', function () {
        it('should update the content styles', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            zoomHandler.zoomIn();
            jest.runOnlyPendingTimers();
            expect(content.setAttribute).toHaveBeenCalledTimes(2); // once on setElements, once on zoomIn (animation has been blocked)
        });
        it('should zoom in by one increment around the viewport center', function () {
            var center = { x: 1, y: 1 };
            zoomHandler.getViewportCenterPoint = function () { return center; };
            zoomHandler.getZoomTransform = jest.fn();
            zoomHandler.animateContentTransformation = jest.fn();
            zoomHandler.zoomIn();
            expect(zoomHandler.getZoomTransform).toBeCalledWith(zoomHandler.zoomIncrement, center);
            expect(zoomHandler.animateContentTransformation).toBeCalled();
        });
    });
    describe('zoomOut', function () {
        it('should update the content styles', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            zoomHandler.zoomOut();
            jest.runOnlyPendingTimers();
            expect(content.setAttribute).toHaveBeenCalledTimes(2); // once on setElements, once on zoomIn (animation has been blocked)
        });
        it('should zoom out by one increment around the viewport center', function () {
            var center = { x: 1, y: 1 };
            zoomHandler.getViewportCenterPoint = function () { return center; };
            zoomHandler.getZoomTransform = jest.fn();
            zoomHandler.animateContentTransformation = jest.fn();
            zoomHandler.zoomIncrement = 0.5;
            zoomHandler.zoomOut();
            expect(zoomHandler.getZoomTransform).toBeCalledWith(2, center);
            expect(zoomHandler.animateContentTransformation).toBeCalled();
        });
    });
    describe('panTo', function () {
        it('should return false if panning did not occur', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            var result = zoomHandler.panTo({ x: -10000, y: -1000 }, false);
            expect(result).toEqual(false);
        });
        it('should return true if panning did occur', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            zoomHandler.applyContentTransformation = jest.fn();
            zoomHandler.zoomIn();
            jest.runAllTimers();
            var result = zoomHandler.panTo({ x: 1, y: 1 }, false);
            expect(result).toEqual(true);
            expect(zoomHandler.applyContentTransformation).toBeCalled();
        });
        it('should animate the pan', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            zoomHandler.animateContentTransformation = jest.fn();
            zoomHandler.zoomIn();
            zoomHandler.panTo({ x: 1, y: 1 }, true);
            expect(zoomHandler.animateContentTransformation).toBeCalled();
        });
    });
    describe('panBy', function () {
        it('should pan to the new translation', function () {
            zoomHandler.setElements(viewport, content, contentDimensions);
            zoomHandler.currentContentTransformation.translation = { x: 10, y: 10 };
            zoomHandler.panTo = jest.fn();
            zoomHandler.panBy({ x: 5, y: 20 }, false);
            // x: 10 + 5 = 15, y: 10 + 20 = 30
            expect(zoomHandler.panTo).toBeCalledWith({ x: 15, y: 30 }, false);
        });
    });
    describe('panUp', function () {
        it('should pan up by one increment', function () {
            zoomHandler.panBy = jest.fn();
            zoomHandler.panUp();
            expect(zoomHandler.panBy).toBeCalledWith({ x: 0, y: zoomHandler.panIncrement }, true);
        });
    });
    describe('panDown', function () {
        it('should pan down by one increment', function () {
            zoomHandler.panBy = jest.fn();
            zoomHandler.panDown();
            expect(zoomHandler.panBy).toBeCalledWith({ x: 0, y: -zoomHandler.panIncrement }, true);
        });
    });
    describe('panLeft', function () {
        it('should pan left by one increment', function () {
            zoomHandler.panBy = jest.fn();
            zoomHandler.panLeft();
            expect(zoomHandler.panBy).toBeCalledWith({ x: zoomHandler.panIncrement, y: 0 }, true);
        });
    });
    describe('panRight', function () {
        it('should pan right by one increment', function () {
            zoomHandler.panBy = jest.fn();
            zoomHandler.panRight();
            expect(zoomHandler.panBy).toBeCalledWith({ x: -zoomHandler.panIncrement, y: 0 }, true);
        });
    });
});
//# sourceMappingURL=zoom-handler.test.js.map