var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { CSSTransition } from 'react-transition-group';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { Icon } from '../icon/icon';
export var NotificationStyle;
(function (NotificationStyle) {
    NotificationStyle["Info"] = "Info";
    NotificationStyle["Warning"] = "Warning";
    NotificationStyle["Error"] = "Error";
    NotificationStyle["Success"] = "Success";
})(NotificationStyle || (NotificationStyle = {}));
var defaultTransitionName = 'v-notification-transition';
var Notification = /** @class */ (function (_super) {
    __extends(Notification, _super);
    function Notification(props) {
        var _this = _super.call(this, props) || this;
        _this.handleCloseButtonClick = function () {
            _this.setState({ isVisible: false });
            if (_this.props.onCloseButtonClick)
                _this.props.onCloseButtonClick();
        };
        var isVisible = _this.getVisibility(props) || false;
        _this.state = {
            isVisible: isVisible,
        };
        return _this;
    }
    Notification.prototype.componentWillReceiveProps = function (props) {
        var isVisible = this.getVisibility(props);
        this.setState({
            isVisible: isVisible,
        });
    };
    Notification.prototype.getVisibility = function (props) {
        return React.Children.toArray(props.children).length > 0;
    };
    Notification.prototype.render = function () {
        var transitionName = this.props.transitionName;
        var b = bemClassBuilderFactory('v-notification');
        return (React.createElement(CSSTransition, { classNames: transitionName || defaultTransitionName, timeout: {
                enter: 300,
                exit: 290,
            }, in: this.state.isVisible, unmountOnExit: true, mountOnEnter: true },
            React.createElement("div", { className: this.getWrapperClass(b, this.props) },
                React.createElement("div", { className: b.element('content') }, this.props.children),
                React.createElement("button", { className: b.element('close-button'), onClick: this.handleCloseButtonClick },
                    React.createElement(Icon, { name: "cross" })))));
    };
    Notification.prototype.getWrapperClass = function (b, _a) {
        var wrapperClassName = _a.wrapperClassName, style = _a.style;
        var blockClass = b.block({ style: style });
        return wrapperClassName ? blockClass + " " + wrapperClassName : blockClass;
    };
    return Notification;
}(React.Component));
export { Notification };
//# sourceMappingURL=notification.js.map