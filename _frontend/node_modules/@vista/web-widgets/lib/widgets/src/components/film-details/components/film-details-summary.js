var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { Formatter } from '../../../utils/formatter';
import { getTranslatedTextOrDefault } from '../../../utils/get-translated-text';
import { FilmPoster } from '../../film-poster/film-poster';
import { FilmDetailsSummaryProperty } from './film-details-summary-property';
/**
 * Renders a summary of a film.
 */
var FilmDetailsSummary = /** @class */ (function (_super) {
    __extends(FilmDetailsSummary, _super);
    function FilmDetailsSummary() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    FilmDetailsSummary.prototype.render = function () {
        var _a = this.props, film = _a.film, browsingStore = _a.browsingStore, displayText = _a.displayText;
        var genres = browsingStore.selectors.getGenresByIds(film.genreIds);
        var actors = browsingStore.selectors.getPeopleByIds(film.actorIds);
        var directors = browsingStore.selectors.getPeopleByIds(film.directorIds);
        var censorRating = film.censorRatingId
            ? browsingStore.selectors.getCensorRatingById(film.censorRatingId)
            : undefined;
        var classificationNote = getTranslatedTextOrDefault(film, 'classificationNote')
            || censorRating && getTranslatedTextOrDefault(censorRating, 'description');
        var b = bemClassBuilderFactory('v-film-details-summary');
        return (React.createElement("div", { className: b.block() },
            React.createElement("div", { className: b.element('wrapper') },
                React.createElement("div", { className: b.element('poster') },
                    React.createElement(FilmPoster, { film: film })),
                React.createElement("div", { className: b.element('primary') },
                    film.runtime &&
                        React.createElement(FilmDetailsSummaryProperty, { title: displayText.runtimeLabel, content: getFormattedRuntime(displayText.runtime, film.runtime) }),
                    film.releaseDate &&
                        React.createElement(FilmDetailsSummaryProperty, { title: displayText.releaseDateLabel, content: getFormattedReleaseDate(displayText.releaseDate, film.releaseDate) }),
                    genres.length > 0 &&
                        React.createElement("div", { className: b.element('tags') }, genres.map(function (genre) {
                            return React.createElement("span", { key: genre.id, className: b.element('tag') }, getTranslatedTextOrDefault(genre, 'name'));
                        })),
                    classificationNote &&
                        React.createElement("span", { className: b.element('classification-note') }, classificationNote)),
                React.createElement("div", { className: b.element('secondary') },
                    directors.length > 0 &&
                        React.createElement(FilmDetailsSummaryProperty, { title: displayText.directorsLabel, content: this.getFormattedPeopleString(directors) }),
                    actors.length > 0 &&
                        React.createElement(FilmDetailsSummaryProperty, { title: displayText.actorsLabel, content: this.getFormattedPeopleString(actors) }),
                    React.createElement(FilmDetailsSummaryProperty, { title: displayText.plotLabel, content: getTranslatedTextOrDefault(film, 'plot') })))));
    };
    FilmDetailsSummary.prototype.getFormattedPeopleString = function (people) {
        // todo: We should make these formats configurable
        var peopleStrings = people.map(function (person) { return person.givenName + " " + person.familyName; });
        return peopleStrings.join(', ');
    };
    return FilmDetailsSummary;
}(React.Component));
export { FilmDetailsSummary };
var getFormattedRuntime = function (template, runtime) {
    return Formatter.Instance.template(template, { runtime: runtime });
};
var getFormattedReleaseDate = function (template, date) {
    return Formatter.Instance.template(template, { date: date });
};
//# sourceMappingURL=film-details-summary.js.map