var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { SignInType } from '../../../../../types/loyalty/authentication/sign-in-provider';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { SignIn, SignInDisplayMode } from '../sign-in';
import { defaultSignInDisplayText } from '../types/display-text';
jest.mock('../../../../../common/utils/uuid-utils', function () { return ({
    createUUID: jest.fn(function () { return 'uuid'; })
}); });
describe('SignIn', function () {
    var captchaConfig;
    var signInProviders;
    var signInTestProps;
    beforeEach(function () {
        captchaConfig = { siteKey: '123' };
        var testAuthClaims = {
            givenName: 'Incredible',
            memberId: 'A000001'
        };
        var testAuthResponse = {
            authTokenPayload: testAuthClaims,
            memberDetails: undefined
        };
        signInProviders = [
            { name: 'twitter', type: SignInType.SocialAccount, signIn: function () { return Promise.resolve(testAuthResponse); } },
            {
                name: 'email',
                type: SignInType.EmailPassword,
                signIn: function (username, password) { return Promise.resolve(testAuthResponse); },
            },
        ];
        signInTestProps = {
            displayText: defaultSignInDisplayText,
            displayMode: SignInDisplayMode.Expand,
            providers: signInProviders
        };
    });
    describe('render without recaptcha', function () {
        it('expand mode ', function () {
            compareToSnapshot(React.createElement(SignIn, __assign({}, signInTestProps)));
        });
        it('fadeIn mode ', function () {
            compareToSnapshot(React.createElement(SignIn, __assign({}, signInTestProps, { displayMode: SignInDisplayMode.FadeIn })));
        });
    });
    describe('render with captcha', function () {
        it('expand mode ', function () {
            compareToSnapshot(React.createElement(SignIn, __assign({}, signInTestProps, { captchaConfig: captchaConfig })));
        });
        it('fadeIn mode ', function () {
            compareToSnapshot(React.createElement(SignIn, __assign({}, signInTestProps, { captchaConfig: captchaConfig, displayMode: SignInDisplayMode.FadeIn })));
        });
    });
});
//# sourceMappingURL=sign-in.test.js.map