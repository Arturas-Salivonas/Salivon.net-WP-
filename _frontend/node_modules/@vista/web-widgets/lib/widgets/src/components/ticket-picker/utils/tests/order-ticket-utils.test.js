var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { examplePackageTicket, exampleStandardTicket1, exampleVoucherTicket1 } from '../../../../../../example-data/order/order-ticket';
import { examplePackageTicketType, exampleStandardTicketType1, exampleVoucherTicketType1 } from '../../../../../../example-data/order/order-ticket-type';
import { getTicketSubDescription } from '../order-ticket-utils';
import { orderStoreInstance } from './../../../../../../api/src/stores/order/order-store';
describe('getTicketTypeSubDescription', function () {
    it('returns undefined for a standard ticket type', function () {
        var result = getTicketSubDescription(exampleStandardTicketType1, exampleStandardTicket1);
        expect(result).toEqual(undefined);
    });
    it('returns undefined for a single-use voucher ticket type', function () {
        orderStoreInstance.selectors.getVoucherRedemptionDetails = jest.fn().mockReturnValue({
            max: 1,
            used: 0,
            remaining: 1
        });
        var result = getTicketSubDescription(exampleVoucherTicketType1, exampleVoucherTicket1);
        expect(result).toEqual(undefined);
    });
    it('returns a sub-description for a multi-use voucher ticket type', function () {
        orderStoreInstance.selectors.getVoucherRedemptionDetails = jest.fn().mockReturnValue({
            max: 5,
            used: 3,
            remaining: 2
        });
        var result = getTicketSubDescription(exampleVoucherTicketType1, exampleVoucherTicket1);
        expect(result).toEqual('2/5 available');
    });
    it('returns a sub-description for a package ticket type', function () {
        var ticketType = __assign({}, examplePackageTicketType, { packageContents: {
                items: [],
                tickets: [
                    { description: 'Child', descriptionTranslations: [], quantity: 3 },
                    { description: 'Adult', descriptionTranslations: [], quantity: 2 }
                ]
            } });
        var result = getTicketSubDescription(ticketType, examplePackageTicket);
        expect(result).toEqual('3 Child, 2 Adult');
    });
});
//# sourceMappingURL=order-ticket-utils.test.js.map