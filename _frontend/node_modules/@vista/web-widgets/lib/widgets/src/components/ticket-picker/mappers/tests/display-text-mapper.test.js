import { defaultTicketPickerDisplayText } from '../../types/display-text';
import { mapTicketPickerDisplayText } from '../display-text-mapper';
describe('mapTicketPickerDisplayText', function () {
    it('returns the default display text when the provided display text is undefined', function () {
        var result = mapTicketPickerDisplayText(undefined);
        expect(result).toEqual(defaultTicketPickerDisplayText);
    });
    it('returns the default display text when the provided display text is invalid', function () {
        var result = mapTicketPickerDisplayText(0);
        expect(result).toEqual(defaultTicketPickerDisplayText);
    });
    var propertyTestCases = function (defaultValue, allowNull) {
        if (allowNull === void 0) { allowNull = false; }
        return [
            { value: undefined, expected: allowNull ? undefined : defaultValue },
            { value: null, expected: allowNull ? null : defaultValue },
            { value: 0, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: {}, expected: defaultValue },
            { value: [], expected: defaultValue },
            { value: 'valid', expected: 'valid' },
        ];
    };
    describe('counterLabel', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.counterLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    counterLabel: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.counterLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('tableColumnItemHeaderLabel', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.tableColumnItemHeaderLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    tableColumnItemHeaderLabel: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.tableColumnItemHeaderLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('tableColumnPriceHeaderLabel', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.tableColumnPriceHeaderLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    tableColumnPriceHeaderLabel: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.tableColumnPriceHeaderLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('tableColumnQuantityHeaderLabel', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.tableColumnQuantityHeaderLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    tableColumnQuantityHeaderLabel: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.tableColumnQuantityHeaderLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('tableColumnSubtotalHeaderLabel', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.tableColumnSubtotalHeaderLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    tableColumnSubtotalHeaderLabel: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.tableColumnSubtotalHeaderLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('tableFooterRowBookingFeeLabel', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.tableFooterRowBookingFeeLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    tableFooterRowBookingFeeLabel: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.tableFooterRowBookingFeeLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('tableFooterRowOrderTotalLabel', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.tableFooterRowOrderTotalLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    tableFooterRowOrderTotalLabel: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.tableFooterRowOrderTotalLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('errorNoTicketsSelectedMessage', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.errorNoTicketsSelectedMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorNoTicketsSelectedMessage: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.errorNoTicketsSelectedMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorTooManyTicketsSelectedMessage', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.errorTooManyTicketsSelectedMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorTooManyTicketsSelectedMessage: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.errorTooManyTicketsSelectedMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorTooFewTicketsSelectedMessage', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.errorTooFewTicketsSelectedMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorTooFewTicketsSelectedMessage: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.errorTooFewTicketsSelectedMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorTicketsDoNotMatchAreaCategoriesMessage', function () {
        var testCases = propertyTestCases(defaultTicketPickerDisplayText.errorTicketsDoNotMatchAreaCategoriesMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorTicketsDoNotMatchAreaCategoriesMessage: testCase.value
                };
                var result = mapTicketPickerDisplayText(displayText);
                expect(result.errorTicketsDoNotMatchAreaCategoriesMessage).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=display-text-mapper.test.js.map