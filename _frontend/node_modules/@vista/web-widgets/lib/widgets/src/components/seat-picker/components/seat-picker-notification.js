var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { isSeatingApiError } from '../../../../../api/src/stores/seating/helpers/types';
import { Notification } from '../../notification/notification';
import { mapSeatPickerErrorMessage } from '../mappers/seat-picker-error-message-mapper';
/**
 * @observer Wrapper around Notification, which must be a standard (non-observer) component
 * in order for the CSSTransitionGroup to work.
 */
var SeatPickerNotification = /** @class */ (function (_super) {
    __extends(SeatPickerNotification, _super);
    function SeatPickerNotification() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SeatPickerNotification.prototype.render = function () {
        var _this = this;
        var _a = this.props, config = _a.config, errors = _a.errors, displayText = _a.displayText, onNotificationClosed = _a.onNotificationClosed;
        var _b = config.notification, show = _b.show, style = _b.style;
        if (!show)
            return null;
        return (React.createElement(Notification, { style: style, wrapperClassName: "v-seat-picker-notification", onCloseButtonClick: onNotificationClosed },
            React.createElement("ul", null, errors.map(function (error) {
                return React.createElement("li", { key: _this.getUniqueKeyForError(error) }, mapSeatPickerErrorMessage(error, displayText));
            }))));
    };
    SeatPickerNotification.prototype.getUniqueKeyForError = function (error) {
        var key = error.category;
        if (isSeatingApiError(error))
            return key + error.errorCode;
        else
            return key + error.ruleName;
    };
    SeatPickerNotification = __decorate([
        observer
    ], SeatPickerNotification);
    return SeatPickerNotification;
}(React.Component));
export { SeatPickerNotification };
//# sourceMappingURL=seat-picker-notification.js.map