var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { Logger } from '../../../../../api/src/utils/logger';
var isReady = function () { return typeof window.grecaptcha !== 'undefined'
    && typeof window.grecaptcha.render === 'function'; };
/**
 * Component that wraps a Google reCAPTCHA v2 element
 */
var RecaptchaV2 = /** @class */ (function (_super) {
    __extends(RecaptchaV2, _super);
    function RecaptchaV2(props) {
        var _this = _super.call(this, props) || this;
        _this.recaptchaRef = React.createRef();
        _this.handleValueChanged = function (captchaValue) {
            _this.props.onValueChanged(captchaValue);
        };
        _this.handleExpired = function () {
            _this.props.onValueChanged(undefined);
        };
        _this.renderRecaptcha = function () {
            var recaptchaElement = _this.recaptchaRef.current;
            if (!recaptchaElement) {
                Logger.error('Can\'t render Recaptcha on a null element');
                return;
            }
            // Return if the child element already exists
            if (recaptchaElement.firstChild)
                return;
            var wrapper = document.createElement('div');
            var recaptchaId = window.grecaptcha.render(wrapper, {
                'sitekey': _this.props.siteKey,
                'hl': _this.props.ietfLanguageTag,
                'size': _this.props.size,
                'callback': _this.handleValueChanged,
                'expired-callback': _this.handleExpired
            });
            recaptchaElement.appendChild(wrapper);
            _this.setState({ recaptchaId: recaptchaId });
            if (_this.props.size === 'invisible')
                _this.runCaptchaTest();
        };
        _this.state = {
            isReady: isReady(),
            recaptchaId: undefined
        };
        if (!_this.state.isReady) {
            _this.readyCheckTimerId = window.setInterval(_this.updateReadyState.bind(_this), 1000);
        }
        return _this;
    }
    RecaptchaV2.prototype.render = function () {
        return (React.createElement("div", { className: "v-captcha", ref: this.recaptchaRef }));
    };
    RecaptchaV2.prototype.componentDidMount = function () {
        if (this.state.isReady) {
            this.renderRecaptcha();
        }
    };
    RecaptchaV2.prototype.componentDidUpdate = function (_prevProps, prevState) {
        if (this.state.isReady && !prevState.isReady) {
            this.renderRecaptcha();
        }
    };
    RecaptchaV2.prototype.componentWillUnmount = function () {
        clearInterval(this.readyCheckTimerId);
    };
    RecaptchaV2.prototype.reset = function () {
        var _a = this.state, isReady = _a.isReady, recaptchaId = _a.recaptchaId;
        if (isReady && recaptchaId !== undefined) {
            window.grecaptcha.reset(recaptchaId);
        }
    };
    RecaptchaV2.prototype.runCaptchaTest = function () {
        var _a = this.state, isReady = _a.isReady, recaptchaId = _a.recaptchaId;
        if (isReady && recaptchaId !== undefined) {
            window.grecaptcha.execute(recaptchaId);
        }
    };
    RecaptchaV2.prototype.updateReadyState = function () {
        if (isReady()) {
            this.setState({ isReady: true });
            clearInterval(this.readyCheckTimerId);
        }
    };
    return RecaptchaV2;
}(React.Component));
export { RecaptchaV2 };
//# sourceMappingURL=recaptcha-v2.js.map