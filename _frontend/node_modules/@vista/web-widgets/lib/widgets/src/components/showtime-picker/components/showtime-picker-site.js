import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { getCommonAttributes } from '../utilities/showtime-picker-attribute-utilities';
import { ShowtimePickerAttributesList } from './showtime-picker-attributes-list';
import { ShowtimePickerShowtimeList } from './showtime-picker-showtime-list';
import { ShowtimePickerHeadingLevel, ShowtimePickerSiteDetails } from './showtime-picker-site-details';
export var ShowtimePickerSite = function (_a) {
    var config = _a.config, displayText = _a.displayText, siteId = _a.siteId, showtimes = _a.showtimes, browsingStore = _a.browsingStore, onShowtimeClicked = _a.onShowtimeClicked;
    var allShowtimeAttributes = showtimes.map(function (showtime) {
        return showtime.attributeIds
            .reduce(function (acc, attributeId) {
            var attribute = browsingStore.selectors.getShowtimeAttributeById(attributeId);
            if (attribute)
                acc.push(attribute);
            return acc;
        }, new Array());
    });
    var commonAttributes = getCommonAttributes(allShowtimeAttributes);
    var siteHeadingLevel = config.showFilmDetails ? ShowtimePickerHeadingLevel.H4 : ShowtimePickerHeadingLevel.H3;
    var b = bemClassBuilderFactory('v-showtime-picker-site');
    return (React.createElement("div", { className: b.block() },
        config.showSiteDetails &&
            React.createElement(ShowtimePickerSiteDetails, { siteId: siteId, browsingStore: browsingStore, headingLevel: siteHeadingLevel }),
        commonAttributes.length > 0 &&
            React.createElement("div", { className: b.element('common-attributes') },
                React.createElement(ShowtimePickerAttributesList, { attributes: commonAttributes, prefixString: displayText.commonAttributesListLabel, wrappingEnabled: true })),
        showtimes.length > 0 ?
            React.createElement(ShowtimePickerShowtimeList, { config: config, displayText: displayText, showtimes: showtimes, hiddenAttributeIds: commonAttributes.map(function (attr) { return attr.id; }), browsingStore: browsingStore, onShowtimeClicked: onShowtimeClicked })
            :
                React.createElement("p", { className: b.element('empty-list-label') }, displayText.noShowtimesForSiteOnDateMessage)));
};
//# sourceMappingURL=showtime-picker-site.js.map