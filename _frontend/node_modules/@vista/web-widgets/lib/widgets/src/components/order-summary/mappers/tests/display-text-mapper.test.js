import { defaultOrderSummaryDisplayText } from '../../types/display-text';
import { mapOrderSummaryDisplayText } from '../display-text-mapper';
describe('mapOrderSummaryDisplayText', function () {
    it('returns the default display text when the provided display text is undefined', function () {
        var result = mapOrderSummaryDisplayText(undefined);
        expect(result).toEqual(defaultOrderSummaryDisplayText);
    });
    it('returns the default display text when the provided display text is invalid', function () {
        var result = mapOrderSummaryDisplayText(true);
        expect(result).toEqual(defaultOrderSummaryDisplayText);
    });
    var properties = [
        'pendingStatusLabel',
        'admittingStatusLabel',
        'nowPlayingStatusLabel',
        'admittedStatusLabel',
        'refundedStatusLabel',
        'expiredStatusLabel',
        'showtimeDetails',
        'loadingOrderLabel',
        'failedToLoadDataTitle',
        'failedToLoadDataMessage'
    ];
    var propertyTestCases = function (defaultValue, allowNull) {
        if (allowNull === void 0) { allowNull = false; }
        return [
            { value: undefined, expected: allowNull ? undefined : defaultValue },
            { value: null, expected: allowNull ? null : defaultValue },
            { value: 0, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: {}, expected: defaultValue },
            { value: [], expected: defaultValue },
            { value: 'valid', expected: 'valid' },
        ];
    };
    properties.forEach(function (property) {
        describe(property, function () {
            var testCases = propertyTestCases(defaultOrderSummaryDisplayText[property]);
            testCases.forEach(function (testCase) {
                it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                    var _a;
                    var displayText = (_a = {},
                        _a[property] = testCase.value,
                        _a);
                    var result = mapOrderSummaryDisplayText(displayText);
                    expect(result[property]).toEqual(testCase.expected);
                });
            });
        });
    });
});
//# sourceMappingURL=display-text-mapper.test.js.map