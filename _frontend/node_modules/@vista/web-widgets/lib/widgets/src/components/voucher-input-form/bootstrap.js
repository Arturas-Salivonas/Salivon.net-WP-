var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { services } from '../../../../api/src/services/services';
import { orderStoreInstance } from '../../../../api/src/stores/order/order-store';
import { assertUnreachableHelper } from '../../../../api/src/utils/assertion-utils';
import { getBootstrapConfigOptionOrDefault } from '../../../../api/src/utils/get-bootstrap-config';
import { Logger } from '../../../../api/src/utils/logger';
import { AddVoucherErrorTypes } from '../../../../types/vouchers/add-voucher-to-order-result';
import { addWidgetBootstrap } from '../../bootstrap/add-widget-bootstrap';
import { createComponent } from '../../bootstrap/create-component';
import { mapVoucherInputFormDisplayText } from './mappers/display-text-mapper';
import { VoucherInputForm } from './voucher-input-form';
export var voucherInputForm = function (bootstrap) {
    var showtimeId = bootstrap.showtimeId;
    if (!showtimeId)
        throw new Error('Cannot render the Voucher Input Form widget without a showtimeId');
    var hasShowtime = orderStoreInstance.selectors.hasShowtime(showtimeId);
    if (!hasShowtime)
        throw new Error("Cannot render the Voucher Input Form widget, there is no showtime in the order with the showtimeId '" + showtimeId + "'");
    var assertUnreachable = assertUnreachableHelper('Voucher add fail');
    var getErrorMessage = function (errorType) {
        switch (errorType) {
            case AddVoucherErrorTypes.VoucherNotValid: {
                return 'Voucher is invalid';
            }
            case AddVoucherErrorTypes.AlreadyRedeemed: {
                return 'Voucher has already been redeemed';
            }
            case AddVoucherErrorTypes.IncorrectPin: {
                return 'Incorrect PIN, please try again';
            }
            case AddVoucherErrorTypes.VoucherExpired: {
                return 'Voucher has expired';
            }
            case AddVoucherErrorTypes.VoucherAlreadyInOrder: {
                return 'Voucher already in order';
            }
            case AddVoucherErrorTypes.NoTicketTypeAvailableForVoucher: {
                return 'No ticket type available for voucher';
            }
            case AddVoucherErrorTypes.OrderAlreadyHasMaximumAllowedTickets: {
                return 'Order already has the maximum allowed number of tickets.';
            }
        }
        return assertUnreachable(errorType);
    };
    var handleVoucherDetails = function (voucherBarcode, voucherPin) { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, services.vouchers.addVoucherToOrder(showtimeId, voucherBarcode, voucherPin)];
                case 1:
                    result = _a.sent();
                    if (result.success)
                        return [2 /*return*/, Promise.resolve()];
                    Logger.error("Failed to add voucher to order: " + result.validationError);
                    return [2 /*return*/, Promise.reject(getErrorMessage(result.validationError))];
            }
        });
    }); };
    var props = {
        displayText: mapVoucherInputFormDisplayText(bootstrap.displayText),
        enablePinInput: getBootstrapConfigOptionOrDefault(bootstrap, 'enablePinInput', true),
        handleVoucherDetails: handleVoucherDetails
    };
    return createComponent(bootstrap.selector, VoucherInputForm, props);
};
addWidgetBootstrap('voucherInputForm', voucherInputForm);
//# sourceMappingURL=bootstrap.js.map