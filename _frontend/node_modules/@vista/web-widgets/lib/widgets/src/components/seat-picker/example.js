// tslint:disable:jsx-no-lambda
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { mapMxSeatLayoutToWidgetSeatLayout } from '../../../../api/src/mappers/seating/seat-layout-mapper';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { seatingStoreInstance } from '../../../../api/src/stores/seating/seating-store';
import { aislesSeatLayoutData } from '../../../../example-data/seating/aisles';
import { allocAndNonAllocSeatLayoutData } from '../../../../example-data/seating/alloc-and-non-alloc';
import { largeSeatLayoutData } from '../../../../example-data/seating/large-seating-layout';
import { mediumSizeSeatLayoutData } from '../../../../example-data/seating/medium-size';
import { overlappingAreasSeatLayoutData } from '../../../../example-data/seating/overlapping-areas';
import { overlappingAreasTwoSeatLayoutData } from '../../../../example-data/seating/overlapping-areas-two';
import { seatSizesSeatLayoutData } from '../../../../example-data/seating/seat-sizes';
import { simpleSeatLayoutData } from '../../../../example-data/seating/simple';
import { sofaSeatsLayoutData } from '../../../../example-data/seating/sofa-seats';
import { testSeatLayout } from '../../../../example-data/seating/test';
import { test2SeatLayout } from '../../../../example-data/seating/test-2';
import '../../scss/components/form/form.scss';
// import '../../scss/themes/dark/seat-picker.scss';
import '../../scss/themes/light/seat-picker.scss';
import { Button, ButtonColor, ButtonSize } from '../button/button';
import { Select } from '../form/select/select';
import { SeatPickerMessage, SeatPickerMessageType } from './components/seat-picker-message';
import { SeatPickerSkeleton } from './components/seat-picker-skeleton';
import { SeatPicker } from './seat-picker';
import { defaultSeatPickerAssets } from './types/assets';
import { defaultSeatPickerConfig } from './types/config';
import { defaultSeatPickerDisplayText } from './types/display-text';
// const TouchEmulator = require('hammer-touchemulator');
defaultSeatPickerConfig.navigation.showPanButtons = true;
defaultSeatPickerConfig.navigation.showZoomButtons = true;
window.seatingStore = seatingStoreInstance;
var seatLayouts = [
    { name: 'Simple', data: simpleSeatLayoutData },
    { name: 'Medium Size Seats', data: mediumSizeSeatLayoutData },
    { name: 'Sofa', data: sofaSeatsLayoutData },
    { name: 'Test 1', data: testSeatLayout },
    { name: 'Test 2', data: test2SeatLayout },
    { name: 'Overlapping Areas 1', data: overlappingAreasSeatLayoutData },
    { name: 'Overlapping Areas 2', data: overlappingAreasTwoSeatLayoutData },
    { name: 'Allocated and Non-Allocated Areas', data: allocAndNonAllocSeatLayoutData },
    { name: 'Different Seat Sizes', data: seatSizesSeatLayoutData },
    { name: 'Large Layout (2500 seats)', data: largeSeatLayoutData },
    { name: 'Two area categories w/ aisles', data: aislesSeatLayoutData }
];
seatingStoreInstance.setSeatLayout(mapMxSeatLayoutToWidgetSeatLayout(seatLayouts[0].data));
var exampleConfig = __assign({}, defaultSeatPickerConfig, { seats: __assign({}, defaultSeatPickerConfig.seats, { showLabels: true }), areaLabels: __assign({}, defaultSeatPickerConfig.areaLabels, { show: true }) });
var SeatPickerExample = /** @class */ (function (_super) {
    __extends(SeatPickerExample, _super);
    function SeatPickerExample(props) {
        var _this = _super.call(this, props) || this;
        _this.setSeatLayoutData = function (newLayoutIndex) {
            _this.setState({ seatLayoutIndex: newLayoutIndex });
            seatingStoreInstance.setSeatLayout(mapMxSeatLayoutToWidgetSeatLayout(seatLayouts[newLayoutIndex].data));
        };
        _this.validateSelection = function () {
            seatingStoreInstance.validateSelection();
        };
        _this.state = { seatLayoutIndex: '0' };
        return _this;
    }
    SeatPickerExample.prototype.componentDidMount = function () {
        // TouchEmulator();
        var _this = this;
        setTimeout(function () {
            _this.setSeatLayoutData(_this.state.seatLayoutIndex);
        }, configurationStoreInstance.data.enableLoadingIndicator ? 3000 : 0);
    };
    SeatPickerExample.prototype.render = function () {
        return (React.createElement("div", { style: { margin: '0 auto', maxWidth: '1000px' } },
            React.createElement("h1", null, "Seat Picker"),
            React.createElement("div", { style: { margin: '0 auto 20px auto', maxWidth: '400px' } },
                React.createElement(Select, { onChangeValue: this.setSeatLayoutData, value: this.state.seatLayoutIndex }, seatLayouts.map(function (layout, i) {
                    return React.createElement("option", { key: i, value: i.toString() }, layout.name);
                }))),
            React.createElement(SeatPicker, { seatingStore: seatingStoreInstance, config: exampleConfig, displayText: defaultSeatPickerDisplayText, assets: defaultSeatPickerAssets, isSeatFirstOrdering: false, events: { onSelectedSeatsChanged: function () { return console.log('Seats Changed'); } } }),
            React.createElement(Button, { color: ButtonColor.Primary, size: ButtonSize.Large, label: "Validate Selection", onClick: this.validateSelection }),
            React.createElement("br", null),
            React.createElement(SeatPickerSkeleton, null),
            React.createElement("br", null),
            React.createElement(SeatPickerMessage, { messageType: SeatPickerMessageType.FailedToLoadData, displayText: defaultSeatPickerDisplayText, assets: defaultSeatPickerAssets })));
    };
    return SeatPickerExample;
}(React.Component));
export { SeatPickerExample };
//# sourceMappingURL=example.js.map