var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { Validator } from '../../../../../api/src/utils/validator';
import { NumberInputType } from '../../form/number-input/number-input';
import { defaultTicketPickerConfig } from '../types/config';
/**
 * Maps the config provided via the API to the config required by the Ticket Picker widget.
 * Nulls out any invalid values and logs appropriate warnings.
 * Any undefined values will be replaced during mapping by the defaults.
 * @param config
 */
export function mapTicketPickerConfig(config) {
    if (!config)
        return defaultTicketPickerConfig;
    var valid = new Validator().ofType('object').validate(config, 'Ticket picker config');
    if (!valid)
        return defaultTicketPickerConfig;
    var validatedConfig = getValidatedTicketPickerConfig(config);
    return __assign({}, defaultTicketPickerConfig, validatedConfig);
}
/**
 * Validates the config values provided for the Ticket Picker.
 * Removes any invalid values and logs appropriate warnings.
 * @param config
 */
function getValidatedTicketPickerConfig(config) {
    if ('quantityInputType' in config) {
        var valid = new Validator()
            .ofType('string')
            .includedInValues(Object.values(NumberInputType))
            .validate(config.quantityInputType, 'Ticket picker quantity input type');
        if (!valid)
            delete config.quantityInputType;
    }
    return config;
}
//# sourceMappingURL=config-mapper.js.map