var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { SeatType } from '../../../../../types/seating/seat-type';
import { SeatPickerWidgetScreenPosition } from '../types/config';
import { getMapDimension } from './map';
/**
 * Returns the boundary of a seat in SVG units.
 */
export function getSeatBoundary(seat, area, scaleFactor, config) {
    var dimensions = getSeatDimensions(area, seat.type, scaleFactor, config);
    var coordinates = getSeatCoordinates(area, seat.type, seat.position, scaleFactor, config);
    return __assign({}, dimensions, coordinates);
}
/**
 * Returns the dimensions of a seat in SVG units.
 */
function getSeatDimensions(area, type, scaleFactor, config) {
    var widthPercentage = area.width / area.columnCount;
    var heightPercentage = area.height / area.rowCount;
    var seatMargin = config.seats.margin;
    var widthAdjustment = seatMargin * 2;
    if (type === SeatType.SofaLeft || type === SeatType.SofaRight) {
        widthAdjustment = seatMargin * 1;
    }
    else if (type === SeatType.SofaMiddle) {
        widthAdjustment = 0;
    }
    return {
        width: getMapDimension(widthPercentage, scaleFactor) - widthAdjustment,
        height: getMapDimension(heightPercentage, scaleFactor) - (seatMargin * 2),
    };
}
/**
 * Returns the coordinates of a seat in SVG units.
 */
function getSeatCoordinates(area, type, position, scaleFactor, config) {
    var invertSeatMap = config.screen.position === SeatPickerWidgetScreenPosition.Top;
    var columnIndex = invertSeatMap ? area.columnCount - position.columnIndex - 1 : position.columnIndex;
    var rowIndex = invertSeatMap ? area.rowCount - position.rowIndex - 1 : position.rowIndex;
    var leftPercentage = columnIndex * area.width / area.columnCount;
    var topPercentage = rowIndex * area.height / area.rowCount;
    var leftAdjustment = config.seats.margin;
    if (type === SeatType.SofaMiddle || type === SeatType.SofaRight) {
        leftAdjustment = 0;
    }
    return {
        left: getMapDimension(leftPercentage, scaleFactor) + leftAdjustment,
        top: getMapDimension(topPercentage, scaleFactor) + config.seats.margin
    };
}
//# sourceMappingURL=seat.js.map