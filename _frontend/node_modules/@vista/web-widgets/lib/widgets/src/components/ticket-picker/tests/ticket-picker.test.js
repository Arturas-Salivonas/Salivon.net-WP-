var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
// import { mount } from 'enzyme';
import { orderService } from '../../../../../api/src/services/order/order-service';
import { services } from '../../../../../api/src/services/services';
import { browsingStoreInstance } from '../../../../../api/src/stores/browsing/browsing-store';
import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
import { orderStoreInstance } from '../../../../../api/src/stores/order/order-store';
import { exampleOrder } from '../../../../../example-data/order/order';
import { exampleOrderTicketTypes } from '../../../../../example-data/order/order-ticket-type';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
// import { runAllPromises } from '../../../tests/run-all-promises';
import { TicketPicker } from '../ticket-picker';
import { defaultTicketPickerAssets } from '../types/assets';
import { defaultTicketPickerConfig } from '../types/config';
import { defaultTicketPickerDisplayText } from '../types/display-text';
// import { browsingService } from '../../../../../api/src/services/browsing/browsing-service';
describe('TicketPicker', function () {
    var testProps = {
        orderStore: orderStoreInstance,
        orderService: orderService,
        showtimeId: exampleOrder.showtimes[0].showtimeId,
        config: defaultTicketPickerConfig,
        displayText: defaultTicketPickerDisplayText,
        assets: defaultTicketPickerAssets,
    };
    jest.spyOn(browsingStoreInstance.selectors, 'getSiteById').mockReturnValue({});
    services.salesData.loadTicketTypesForShowtime = jest.fn().mockResolvedValue(exampleOrderTicketTypes);
    beforeEach(function () {
        orderStoreInstance.actions.setOrderData(exampleOrder);
    });
    afterEach(function () {
        configurationStoreInstance.data.ticketing.isSeatFirstOrdering = false;
        orderStoreInstance.flush();
        jest.clearAllMocks();
    });
    describe('render', function () {
        it('should render ticket-first ordering mode correctly', function () {
            compareToSnapshot(React.createElement(TicketPicker, __assign({}, testProps)));
        });
        // it('should render seat-first mode correctly', () => {
        //     configurationStoreInstance.data.ticketing.isSeatFirstOrdering = true;
        //     compareToSnapshot(
        //         <TicketPicker
        //             {...testProps}
        //         />
        //     );
        // });
        // it('should render the loading indicator correctly', () => {
        //     orderStoreInstance.flush();
        //     compareToSnapshot(<TicketPicker {...testProps} />);
        // });
        // describe('componentDidMount', () => {
        //     it('does not reload the ticket types if they have already been loaded', async () => {
        //         expect.assertions(1);
        //         orderStoreInstance.selectors.hasTicketTypesForShowtime = jest.fn().mockReturnValue(true);
        //         orderStoreInstance.selectors.hasShowtime = jest.fn().mockReturnValue(true);
        //         const wrapper = mount(
        //             <TicketPicker
        //                 {...testProps}
        //             />
        //         );
        //         wrapper.instance().componentDidMount();
        //         await runAllPromises();
        //         expect(services.salesData.getTicketTypesForShowtime).not.toHaveBeenCalled();
        //     });
        // it('loads the ticket types if they have not already been loaded', async () => {
        //     expect.assertions(2);
        //     orderStoreInstance.selectors.hasShowtime = jest.fn().mockReturnValue(true);
        //     orderStoreInstance.selectors.hasTicketTypesForShowtime = jest.fn().mockReturnValue(false);
        //     const onOrderTicketsLoadedMock = jest.fn();
        //     const mockEvents = {onTicketTypesLoaded: onOrderTicketsLoadedMock};
        //     const wrapper = mount(
        //         <TicketPicker
        //             {...testProps}
        //             events={mockEvents}
        //         />
        //     );
        //     wrapper.instance().componentDidMount();
        //     await runAllPromises();
        //     expect(services.salesData.getTicketTypesForShowtime).toBeCalledWith(testProps.showtimeId);
        //     expect(onOrderTicketsLoadedMock).toHaveBeenCalledTimes(1);
        // });
        // it('retrieves showtime from the Api and adds it to the store if there is no showtime in the order', async () => {
        //     const showtime = testProps.showtimeId;
        //     orderStoreInstance.selectors.hasTicketTypesForShowtime = jest.fn().mockReturnValue(false);
        //     orderStoreInstance.selectors.isSeatFirstOrderingForShowtime = jest.fn().mockReturnValue(false);
        //     browsingService.loadShowtimeById = jest.fn().mockResolvedValue(showtime);
        //     orderService.addShowtime = jest.fn();
        //     const onOrderTicketsLoadedMock = jest.fn();
        //     const mockedShowtimeId = '~';
        //     const mockEvents = { onTicketTypesLoaded: onOrderTicketsLoadedMock };
        //     const wrapper = mount(
        //         <TicketPicker
        //             {...testProps}
        //             showtimeId={mockedShowtimeId}
        //             events={mockEvents}
        //         />
        //     );
        //     wrapper.instance().componentDidMount();
        //     await runAllPromises();
        //     expect(services.browsing.loadShowtimeById).toBeCalledWith(mockedShowtimeId);
        //     expect(services.order.addShowtime).toBeCalledWith(showtime);
        //     expect(services.salesData.getTicketTypesForShowtime).toBeCalledWith(mockedShowtimeId);
        //     expect(onOrderTicketsLoadedMock).toHaveBeenCalledTimes(1);
        // });
        // });
        // TO DO: REWRITE THOSE TESTS
    });
});
//# sourceMappingURL=ticket-picker.test.js.map