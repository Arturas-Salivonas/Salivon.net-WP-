var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { browsingService } from '../../../../api/src/services/browsing/browsing-service';
import { Logger } from '../../../../api/src/utils/logger';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { FilmDetailsBanner } from './components/film-details-banner';
import { FilmDetailsMessage, FilmDetailsMessageType } from './components/film-details-message';
import { FilmDetailsSkeleton } from './components/film-details-skeleton';
import { FilmDetailsSummary } from './components/film-details-summary';
/**
 * Renders the details of a film.
 */
var FilmDetails = /** @class */ (function (_super) {
    __extends(FilmDetails, _super);
    function FilmDetails(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { failedToLoadFilm: false };
        return _this;
    }
    FilmDetails.prototype.render = function () {
        var _a = this.props, browsingStore = _a.browsingStore, filmId = _a.filmId, displayText = _a.displayText, config = _a.config, onActionButtonClicked = _a.onActionButtonClicked, assets = _a.assets;
        var failedToLoadFilm = this.state.failedToLoadFilm;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var film = browsingStore.selectors.getFilmById(filmId);
        if (failedToLoadFilm) {
            return (React.createElement(FilmDetailsMessage, { displayText: displayText, assets: assets, messageType: FilmDetailsMessageType.FailedToLoadData }));
        }
        if (!film)
            return enableLoadingIndicator ? React.createElement(FilmDetailsSkeleton, null) : null;
        return (React.createElement("div", { className: "v-film-details" },
            React.createElement(FilmDetailsBanner, { film: film, browsingStore: browsingStore, displayText: displayText, config: config, onActionButtonClicked: onActionButtonClicked }),
            React.createElement(FilmDetailsSummary, { film: film, browsingStore: browsingStore, displayText: displayText })));
    };
    FilmDetails.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, filmId = _a.filmId, browsingStore = _a.browsingStore;
        if (browsingStore.selectors.getFilmById(filmId))
            return;
        browsingService.loadFilmById(filmId)
            .then(function () {
            _this.setState({ failedToLoadFilm: false });
        })
            .catch(function () {
            _this.setState({ failedToLoadFilm: true });
            Logger.error("Could not load film with ID " + filmId);
        });
    };
    FilmDetails = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], FilmDetails);
    return FilmDetails;
}(React.Component));
export { FilmDetails };
//# sourceMappingURL=film-details.js.map