var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { renderIntoDocument } from 'react-dom/test-utils';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { ZoomController } from '../zoom-controller';
var MockZoomHandler = /** @class */ (function () {
    function MockZoomHandler() {
        this.setElements = jest.fn;
    }
    return MockZoomHandler;
}());
jest.mock('../utils/zoom-handler', MockZoomHandler);
describe('ZoomController', function () {
    var exampleProps = {
        contentDimensions: {
            width: 100,
            height: 100,
        },
    };
    var createNodeMock = function (element) {
        return element.type === 'div' ? {} : null;
    };
    describe('render', function () {
        it('should render with default options correctly', function () {
            compareToSnapshot(React.createElement(ZoomController, __assign({}, exampleProps),
                React.createElement("div", null)), { createNodeMock: createNodeMock });
        });
        test('should render with all buttons correctly', function () {
            compareToSnapshot(React.createElement(ZoomController, __assign({}, exampleProps, { showPanButtons: true, showZoomButtons: true }),
                React.createElement("div", null)), { createNodeMock: createNodeMock });
        });
        it('should render with no buttons correctly', function () {
            compareToSnapshot(React.createElement(ZoomController, __assign({}, exampleProps, { showPanButtons: false, showZoomButtons: false }),
                React.createElement("div", null)), { createNodeMock: createNodeMock });
        });
        it('should render with only pan buttons correctly', function () {
            compareToSnapshot(React.createElement(ZoomController, __assign({}, exampleProps, { showPanButtons: true, showZoomButtons: false }),
                React.createElement("div", null)), { createNodeMock: createNodeMock });
        });
        it('should render with only zoom buttons correctly', function () {
            compareToSnapshot(React.createElement(ZoomController, __assign({}, exampleProps, { showPanButtons: false, showZoomButtons: true }),
                React.createElement("div", null)), { createNodeMock: createNodeMock });
        });
    });
    describe('componentDidMount', function () {
        it('should set up the zoom handler', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.setUpHandler = jest.fn();
            zoomController.componentDidMount();
            expect(zoomController.setUpHandler).toBeCalled();
        });
    });
    describe('componentDidUpdate', function () {
        it('should set up the zoom handler', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.setUpHandler = jest.fn();
            zoomController.componentDidUpdate();
            expect(zoomController.setUpHandler).toBeCalled();
        });
    });
    describe('setUpHandler', function () {
        it('set the elements on the zoom handler', function () {
            var zoomController = renderIntoDocument(React.createElement(ZoomController, __assign({}, exampleProps)));
            zoomController.handler = {
                setElements: jest.fn()
            };
            zoomController.setUpHandler({});
            expect(zoomController.handler.setElements).toBeCalled();
        });
        it('set the zoom button padding to 0 if zoom buttons are not shown', function () {
            var zoomController = renderIntoDocument(React.createElement(ZoomController, __assign({}, exampleProps)));
            zoomController.handler = {
                setElements: jest.fn(),
                zoomButtonPadding: -1
            };
            zoomController.setUpHandler({ showZoomButtons: false });
            expect(zoomController.handler.zoomButtonPadding).toEqual(0);
        });
        it('set the zoom button padding to 44 if zoom buttons are not shown', function () {
            var zoomController = renderIntoDocument(React.createElement(ZoomController, __assign({}, exampleProps)));
            zoomController.handler = {
                setElements: jest.fn(),
                zoomButtonPadding: -1
            };
            zoomController.setUpHandler({ showZoomButtons: true });
            expect(zoomController.handler.zoomButtonPadding).toEqual(44);
        });
    });
    describe('handleKeyDown', function () {
        var getKeyPressEvent = function (keyCode) {
            return {
                keyCode: keyCode,
                preventDefault: jest.fn()
            };
        };
        it('should return if the handler is animating', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.handler = {
                isAnimating: true,
                zoomIn: jest.fn()
            };
            var event = getKeyPressEvent(107);
            zoomController.handleKeyDown(event);
            expect(event.preventDefault).not.toBeCalled();
            expect(zoomController.handler.zoomIn).not.toBeCalled();
        });
        it('should return if the key is unrecognised', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.handler = {};
            var event = getKeyPressEvent(-1);
            zoomController.handleKeyDown(event);
            expect(event.preventDefault).not.toBeCalled();
        });
        it('should zoom in when key 107 or 187 is pressed', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.handler = {
                zoomIn: jest.fn()
            };
            var event1 = getKeyPressEvent(107);
            zoomController.handleKeyDown(event1);
            expect(event1.preventDefault).toBeCalled();
            var event2 = getKeyPressEvent(187);
            zoomController.handleKeyDown(event2);
            expect(event2.preventDefault).toBeCalled();
            expect(zoomController.handler.zoomIn).toHaveBeenCalledTimes(2);
        });
        it('should zoom out when key 109 or 189 is pressed', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.handler = {
                zoomOut: jest.fn()
            };
            var event1 = getKeyPressEvent(109);
            zoomController.handleKeyDown(event1);
            expect(event1.preventDefault).toBeCalled();
            var event2 = getKeyPressEvent(189);
            zoomController.handleKeyDown(event2);
            expect(event2.preventDefault).toBeCalled();
            expect(zoomController.handler.zoomOut).toHaveBeenCalledTimes(2);
        });
        it('should pan left when key 37 is pressed', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.handler = {
                panLeft: jest.fn()
            };
            var event = getKeyPressEvent(37);
            zoomController.handleKeyDown(event);
            expect(event.preventDefault).toBeCalled();
            expect(zoomController.handler.panLeft).toHaveBeenCalledTimes(1);
        });
        it('should pan up when key 38 is pressed', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.handler = {
                panUp: jest.fn()
            };
            var event = getKeyPressEvent(38);
            zoomController.handleKeyDown(event);
            expect(event.preventDefault).toBeCalled();
            expect(zoomController.handler.panUp).toHaveBeenCalledTimes(1);
        });
        it('should pan right when key 39 is pressed', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.handler = {
                panRight: jest.fn()
            };
            var event = getKeyPressEvent(39);
            zoomController.handleKeyDown(event);
            expect(event.preventDefault).toBeCalled();
            expect(zoomController.handler.panRight).toHaveBeenCalledTimes(1);
        });
        it('should pan down when key 40 is pressed', function () {
            var zoomController = new ZoomController(exampleProps);
            zoomController.handler = {
                panDown: jest.fn()
            };
            var event = getKeyPressEvent(40);
            zoomController.handleKeyDown(event);
            expect(event.preventDefault).toBeCalled();
            expect(zoomController.handler.panDown).toHaveBeenCalledTimes(1);
        });
    });
    describe('handleContentTransformationChanged', function () {
        var zoomController;
        beforeEach(function () {
            zoomController = new ZoomController({
                onContentTransformationChanged: jest.fn()
            });
            zoomController.handler = {
                isZoomedIn: true
            };
            zoomController.viewportRef.current = {
                classList: {
                    add: jest.fn(),
                    remove: jest.fn()
                }
            };
        });
        it('passes the event to the parent component via props', function () {
            zoomController.handleContentTransformationChanged({});
            expect(zoomController.props.onContentTransformationChanged).toBeCalled();
        });
        it('adds the zoomed in class if the handler is zoomed in', function () {
            zoomController.handler = {
                isZoomedIn: true
            };
            zoomController.handleContentTransformationChanged({});
            expect(zoomController.viewportRef.current.classList.add).toBeCalledWith('v-zoom-controller-viewport--is-zoomed-in');
        });
        it('removes the zoomed in class if the handler is not zoomed in', function () {
            zoomController.handler = {
                isZoomedIn: false
            };
            zoomController.handleContentTransformationChanged({});
            expect(zoomController.viewportRef.current.classList.remove).toBeCalledWith('v-zoom-controller-viewport--is-zoomed-in');
        });
    });
    describe('resetZoom', function () {
        it('resets the zoom of the zoom handler', function () {
            var zoomController = renderIntoDocument(React.createElement(ZoomController, __assign({}, exampleProps)));
            zoomController.handler = {
                resetZoom: jest.fn()
            };
            zoomController.resetZoom();
            expect(zoomController.handler.resetZoom).toBeCalled();
        });
    });
});
//# sourceMappingURL=zoom-controller.test.js.map