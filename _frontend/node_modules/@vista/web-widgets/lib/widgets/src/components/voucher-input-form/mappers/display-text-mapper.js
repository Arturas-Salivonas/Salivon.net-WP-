var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { fieldValidator } from '../../../../../api/src/utils/field-validator';
import { Validator } from '../../../../../api/src/utils/validator';
import { defaultVoucherInputFormDisplayText } from '../types/display-text';
export function mapVoucherInputFormDisplayText(displayText) {
    if (!displayText)
        return defaultVoucherInputFormDisplayText;
    var valid = new Validator().ofType('object').validate(displayText, 'Voucher input form display text');
    if (!valid)
        return defaultVoucherInputFormDisplayText;
    var validatedDisplayText = getValidatedVoucherInputFormDisplayText(displayText);
    return __assign({}, defaultVoucherInputFormDisplayText, validatedDisplayText);
}
export function getValidatedVoucherInputFormDisplayText(displayText) {
    var validateField = fieldValidator(displayText);
    var validator = new Validator().ofType('string').minLength(1);
    var nullableValidator = new Validator().ofType('string').minLength(1).allowNull().allowUndefined();
    validateField(validator, 'buttonAddLabel', 'Voucher input form add button label');
    validateField(validator, 'fieldBarcodeLabel', 'Voucher input form barcode field label');
    validateField(nullableValidator, 'fieldBarcodePlaceholder', 'Voucher input form barcode field placeholder');
    validateField(validator, 'fieldPinLabel', 'Voucher input form pin field label');
    validateField(nullableValidator, 'fieldPinPlaceholder', 'Voucher input form pin field placeholder');
    return displayText;
}
//# sourceMappingURL=display-text-mapper.js.map