var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { Logger } from '../../../../api/src/utils/logger';
import { getKeyCodeForEvent, KeyCode } from '../../dom/key-code';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { ZoomHandler } from './utils/zoom-handler';
import { ZoomControllerButtons } from './zoom-controller-buttons';
/**
 * Renders a ZoomController component that handles zooming and panning of a child element.
 * Supports mouse, keyboard and touch input.
 */
var ZoomController = /** @class */ (function (_super) {
    __extends(ZoomController, _super);
    function ZoomController(props) {
        var _this = _super.call(this, props) || this;
        _this.viewportRef = React.createRef();
        _this.contentRef = React.createRef();
        _this.resetZoom = function () {
            _this.handler.resetZoom();
        };
        _this.handleKeyDown = function (event) {
            var handler = _this.handler;
            if (handler.isAnimating)
                return;
            var keyCode = getKeyCodeForEvent(event);
            switch (keyCode) {
                case KeyCode.Plus:
                    handler.zoomIn();
                    break;
                case KeyCode.Minus:
                    handler.zoomOut();
                    break;
                case KeyCode.LeftArrow:
                    handler.panLeft();
                    break;
                case KeyCode.UpArrow:
                    handler.panUp();
                    break;
                case KeyCode.RightArrow:
                    handler.panRight();
                    break;
                case KeyCode.DownArrow:
                    handler.panDown();
                    break;
                default:
                    return; // no action to be performed
            }
            // prevent default here to disable touch device double-tap to zoom of browser window
            event.preventDefault();
        };
        _this.handleContentTransformationChanged = function (transformation) {
            var viewport = _this.viewportRef.current;
            if (!viewport) {
                Logger.error('Cannot handle content transformation with null viewport');
                return;
            }
            if (_this.props.onContentTransformationChanged) {
                _this.props.onContentTransformationChanged(transformation);
            }
            var zoomedInClass = 'v-zoom-controller-viewport--is-zoomed-in';
            if (_this.handler.isZoomedIn)
                viewport.classList.add(zoomedInClass);
            else
                viewport.classList.remove(zoomedInClass);
            var animatingClass = 'v-zoom-controller-viewport--is-animating';
            if (_this.handler.isAnimating)
                viewport.classList.add(animatingClass);
            else
                viewport.classList.remove(animatingClass);
        };
        _this.handler = new ZoomHandler();
        _this.handler.onContentTransformationChanged = _this.handleContentTransformationChanged;
        return _this;
    }
    ZoomController.prototype.render = function () {
        var _a = this.props, showPanButtons = _a.showPanButtons, showZoomButtons = _a.showZoomButtons;
        var b = bemClassBuilderFactory('v-zoom-controller');
        var bViewport = bemClassBuilderFactory('v-zoom-controller-viewport');
        return (React.createElement("div", { className: this.getClass(b, this.props), onKeyDown: this.handleKeyDown, tabIndex: 0 },
            React.createElement("div", { className: bViewport.block(), ref: this.viewportRef },
                React.createElement("div", { className: bViewport.element('content'), ref: this.contentRef }, this.props.children)),
            React.createElement(ZoomControllerButtons, { handler: this.handler, showPanButtons: showPanButtons, showZoomButtons: showZoomButtons })));
    };
    ZoomController.prototype.getClass = function (b, props) {
        var baseClass = b.block({
            showPanButtons: props.showPanButtons
        });
        return props.className ? baseClass + " " + props.className : baseClass;
    };
    ZoomController.prototype.componentDidMount = function () {
        this.setUpHandler(this.props);
    };
    ZoomController.prototype.componentWillUnmount = function () {
        this.handler.unmount();
    };
    ZoomController.prototype.componentDidUpdate = function () {
        this.setUpHandler(this.props);
    };
    ZoomController.prototype.setUpHandler = function (props) {
        var viewport = this.viewportRef.current;
        var content = this.contentRef.current;
        if (!viewport || !content) {
            Logger.error('Cannot setup handler with null viewport or null content');
            return;
        }
        this.handler.setElements(viewport, content, props.contentDimensions);
        this.handler.zoomButtonPadding = props.showZoomButtons ? 44 : 0;
    };
    return ZoomController;
}(React.Component));
export { ZoomController };
//# sourceMappingURL=zoom-controller.js.map