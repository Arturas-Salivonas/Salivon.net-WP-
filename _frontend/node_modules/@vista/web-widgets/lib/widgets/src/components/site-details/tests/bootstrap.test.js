import { browsingStoreInstance } from '../../../../../api/src/stores/browsing/browsing-store';
import { exampleSite } from '../../../../../example-data/browsing/site';
import * as createComponent from '../../../bootstrap/create-component';
import { siteDetails } from '../bootstrap';
import { defaultSiteDetailsAssets } from '../types/assets';
import { defaultSiteDetailsWidgetDisplayText } from '../types/display-text';
describe('siteDetails bootstrap', function () {
    var component = { _component: {} };
    var createComponentSpy = jest.spyOn(createComponent, 'createComponent').mockReturnValue(component);
    var siteId = exampleSite.id;
    afterEach(function () { return jest.clearAllMocks(); });
    it('calls the create component function', function () {
        expect.assertions(2);
        var response = siteDetails({
            selector: 'test',
            siteId: siteId
        });
        expect(createComponentSpy).toBeCalledWith('test', expect.anything(), {
            browsingStore: browsingStoreInstance,
            siteId: siteId,
            displayText: defaultSiteDetailsWidgetDisplayText,
            assets: defaultSiteDetailsAssets
        });
        expect(response).toEqual(component);
    });
    it('throws an error when no siteId has been passed in', function () {
        expect(function () { return siteDetails({
            selector: 'test',
            siteId: undefined
        }); }).toThrow('Cannot render the site details widget without a site id');
    });
});
//# sourceMappingURL=bootstrap.test.js.map