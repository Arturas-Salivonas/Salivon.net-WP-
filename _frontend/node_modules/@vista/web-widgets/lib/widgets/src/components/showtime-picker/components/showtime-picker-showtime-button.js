import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { Formatter } from '../../../utils/formatter';
import { getAccessibilityDescriptionForAttribute, getAttributeCdnUrl, heroAttributeForShowtime, promotedAttributeForShowtime, standardAttributesForShowtime } from '../utilities/showtime-picker-attribute-utilities';
import { ShowtimePickerAttributesList } from './showtime-picker-attributes-list';
export var ShowtimePickerButton = function (_a) {
    var showtime = _a.showtime, browsingStore = _a.browsingStore, hiddenAttributeIds = _a.hiddenAttributeIds, onShowtimeClicked = _a.onShowtimeClicked, displayText = _a.displayText, heroAttributeColors = _a.heroAttributeColors;
    var showtimeAttributes = showtime.attributeIds
        .map(browsingStore.selectors.getShowtimeAttributeById)
        .filter(function (attr) { return !!attr; });
    var heroAttribute = heroAttributeForShowtime(showtimeAttributes);
    var promotedAttribute = promotedAttributeForShowtime(showtimeAttributes);
    var timeString = Formatter.Instance.date(showtime.startTime, displayText.showtimeTimeFormat);
    var ampmString = displayText.showtimeAmPmFormat.length > 0 ? Formatter.Instance.date(showtime.startTime, displayText.showtimeAmPmFormat) : '';
    /*
     * On iOS devices, the :active state of the anchor link is not displayed.
     * We can work around this by setting the link's onTouchStart to an empty handler.
     * In future we should handle the onTouchStart and onTouchEnd events in JS.
     */
    var iosTouchWorkaround = function () { return undefined; };
    var b = bemClassBuilderFactory('v-showtime-picker-button');
    return (
    // tslint:disable-next-line:jsx-no-lambda TODO: change to class component
    React.createElement("a", { className: b.block(), onClick: function () { return onShowtimeClicked(showtime); }, onTouchStart: iosTouchWorkaround },
        React.createElement("div", { className: b.element('detail-wrapper') },
            React.createElement("div", { className: b.element('detail-start-time-wrapper') },
                React.createElement("time", { className: b.element('detail-start-time'), dateTime: showtime.startTime.toISOString() }, timeString),
                ampmString.length > 0 &&
                    React.createElement("span", { className: b.element('detail-start-time-ampm') }, ampmString)),
            React.createElement(ShowtimePickerAttributesList, { attributes: standardAttributesForShowtime(showtimeAttributes, hiddenAttributeIds), prefixString: undefined, wrappingEnabled: false })),
        heroAttribute &&
            React.createElement("div", { className: b.element('hero-attribute'), style: getHeroAttributeStyle(heroAttribute, heroAttributeColors), "aria-label": getAccessibilityDescriptionForAttribute(heroAttribute) }),
        promotedAttribute &&
            React.createElement("div", { className: b.element('promoted-attribute') },
                React.createElement("img", { className: b.element('promoted-attribute-icon'), src: getAttributeCdnUrl(promotedAttribute), alt: getAccessibilityDescriptionForAttribute(promotedAttribute) }))));
};
var getHeroAttributeStyle = function (attribute, heroAttributeColors) {
    var heroImageUrl = "url('" + getAttributeCdnUrl(attribute) + "')";
    if (heroAttributeColors && heroAttributeColors[attribute.id]) {
        return { backgroundColor: heroAttributeColors[attribute.id], backgroundImage: heroImageUrl };
    }
    return { backgroundImage: heroImageUrl };
};
//# sourceMappingURL=showtime-picker-showtime-button.js.map