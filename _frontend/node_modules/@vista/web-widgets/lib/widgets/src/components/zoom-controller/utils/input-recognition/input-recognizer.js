import { distanceBetweenPoints, subtractPoints } from '../measurement-utils';
import { getMouseEventPoint } from '../mouse-event-utils';
import { getCenterPointOfTouchEvent } from '../touch-event-utils';
/**
 * Base class for handling mouse and touch inputs.
 * Contains common processing logic for panning.
 */
var InputRecognizer = /** @class */ (function () {
    function InputRecognizer() {
        var _this = this;
        this.panThreshold = 10;
        this.onPan = function (onPanHandler) { return _this.onPanHandler = onPanHandler; };
    }
    InputRecognizer.prototype.handlePan = function (event) {
        var currentPanPoint = isTouchEvent(event)
            ? getCenterPointOfTouchEvent(event)
            : getMouseEventPoint(event);
        if (this.firstPanPoint === undefined) {
            this.firstPanPoint = currentPanPoint;
            return false;
        }
        var distanceFromFirstPanPoint = distanceBetweenPoints(currentPanPoint, this.firstPanPoint);
        var panDelta = subtractPoints(currentPanPoint, this.lastPanPoint || this.firstPanPoint);
        this.lastPanPoint = currentPanPoint;
        if (distanceFromFirstPanPoint >= this.panThreshold) {
            if (this.onPanHandler)
                this.onPanHandler(panDelta);
            return true;
        }
        return false;
    };
    InputRecognizer.prototype.reset = function () {
        this.firstPanPoint = undefined;
        this.lastPanPoint = undefined;
    };
    return InputRecognizer;
}());
export { InputRecognizer };
export function isTouchEvent(event) {
    return !!(event.touches);
}
//# sourceMappingURL=input-recognizer.js.map