var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { configurationStoreInstance } from '../../../../../../api/src/stores/configuration/configuration-store';
import { createSingleRowSeatLayout } from '../../../../../../api/src/stores/seating/helpers/test/test-utils';
import { SeatAvailability } from '../../../../../../types/seating/seat-availability';
import { SeatType } from '../../../../../../types/seating/seat-type';
import { compareToSnapshot } from '../../../../tests/compare-to-snapshot';
import { defaultSeatPickerConfig } from '../../types/config';
import { SeatPickerSeat } from '../seat-picker-seat';
var baseSeat = {
    position: {
        rowIndex: 0,
        columnIndex: 0,
        areaNumber: 0
    },
    seatsInGroup: [],
    seatLabel: '1',
    areaCategoryCode: '',
    availability: SeatAvailability.Available,
    type: SeatType.Normal
};
// tslint:disable-next-line:no-empty
var onSeatClicked = function () { };
// TODO: SeatPickerArea and SeatPickerSeat test snapshots contain NaN in svg/path elements
describe('SeatPickerSeat', function () {
    it('should render correctly', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row.addSeat(baseSeat); });
        compareToSnapshot(React.createElement(SeatPickerSeat, { seat: seatLayout.areas[0].rows[0].seats[0], area: seatLayout.areas[0], rowLabel: 'A', scaleFactor: 1, config: defaultSeatPickerConfig, isSelectable: true, onSeatClicked: onSeatClicked }));
    });
    it('should render friend seat correctly', function () {
        var friendSeat = __assign({}, baseSeat, { availability: SeatAvailability.Sold, isFriendSeat: true });
        var seatLayout = createSingleRowSeatLayout(function (row) { return row.addSeat(friendSeat); });
        compareToSnapshot(React.createElement(SeatPickerSeat, { seat: seatLayout.areas[0].rows[0].seats[0], area: seatLayout.areas[0], rowLabel: 'A', scaleFactor: 1, config: defaultSeatPickerConfig, isSelectable: true, onSeatClicked: onSeatClicked }));
    });
    it('should render skeleton correctly', function () {
        configurationStoreInstance.setConfig({ enableLoadingIndicator: true });
        var seatLayout = createSingleRowSeatLayout(function (row) { return row.addSeat(baseSeat); });
        compareToSnapshot(React.createElement(SeatPickerSeat, { seat: seatLayout.areas[0].rows[0].seats[0], area: seatLayout.areas[0], rowLabel: 'A', scaleFactor: 1, config: defaultSeatPickerConfig, isSelectable: true, onSeatClicked: onSeatClicked }));
    });
});
//# sourceMappingURL=seat-picker-seat.test.js.map