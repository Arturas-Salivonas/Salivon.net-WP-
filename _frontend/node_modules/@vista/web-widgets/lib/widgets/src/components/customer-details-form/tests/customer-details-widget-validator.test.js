var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { toJS } from 'mobx';
import * as customerDetailsValidator from '../../../../../api/src/stores/order/helpers/customer-details-validator';
import { orderStoreInstance } from '../../../../../api/src/stores/order/order-store';
import { CustomerDetailsWidgetValidator } from '../customer-details-widget-validator';
describe('CustomerDetailsWidgetValidator', function () {
    var validateFieldMock = jest.fn();
    var validateFormMock = jest.fn();
    jest.spyOn(customerDetailsValidator, 'CustomerDetailsValidator').mockImplementation(function () { return ({
        validateField: validateFieldMock,
        validateForm: validateFormMock,
    }); });
    var testField = 'email';
    var testError = 'testError';
    var widgetValidator = new CustomerDetailsWidgetValidator({}, orderStoreInstance);
    var updateCustomerDetailsErrorsSpy = jest.spyOn(orderStoreInstance.actions, 'updateCustomerDetailsErrors');
    var clearCustomerDetailsErrorsSpy = jest.spyOn(orderStoreInstance.actions, 'clearCustomerDetailsErrors');
    beforeEach(function () {
        validateFieldMock.mockClear();
        validateFormMock.mockClear();
        updateCustomerDetailsErrorsSpy.mockClear();
        clearCustomerDetailsErrorsSpy.mockClear();
        orderStoreInstance.flush();
    });
    describe('validateField', function () {
        var returnValues = [true, false, Promise.resolve(true), Promise.resolve(false)];
        var _loop_1 = function (returnValue) {
            it("returns the result of the validator's validateField for '" + returnValue + "'", function () { return __awaiter(_this, void 0, void 0, function () {
                var result, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            expect.assertions(1);
                            validateFieldMock.mockReturnValueOnce(returnValue);
                            return [4 /*yield*/, widgetValidator.validateField(testField)];
                        case 1:
                            result = _c.sent();
                            _b = (_a = expect(result)).toBe;
                            return [4 /*yield*/, returnValue];
                        case 2:
                            _b.apply(_a, [_c.sent()]);
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        for (var _i = 0, returnValues_1 = returnValues; _i < returnValues_1.length; _i++) {
            var returnValue = returnValues_1[_i];
            _loop_1(returnValue);
        }
        it('stores a returned error in the order store', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(1);
                        validateFieldMock.mockReturnValueOnce(testError);
                        return [4 /*yield*/, widgetValidator.validateField(testField)];
                    case 1:
                        _a.sent();
                        expect(updateCustomerDetailsErrorsSpy).toBeCalledWith([[testField, testError]]);
                        return [2 /*return*/];
                }
            });
        }); });
        it('removes a previously stored error in the order store when valid', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(1);
                        return [4 /*yield*/, widgetValidator.validateField(testField)];
                    case 1:
                        _a.sent();
                        expect(clearCustomerDetailsErrorsSpy).toBeCalledWith([testField]);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('validateForm', function () {
        var returnValues = [{ validationErrors: {} }, Promise.resolve({ validationErrors: {} })];
        var _loop_2 = function (returnValue) {
            it("returns the result of the validator's validateForm for '" + returnValue + "'", function () { return __awaiter(_this, void 0, void 0, function () {
                var result, _a, _b;
                return __generator(this, function (_c) {
                    switch (_c.label) {
                        case 0:
                            expect.assertions(1);
                            validateFormMock.mockReturnValueOnce(returnValue);
                            return [4 /*yield*/, widgetValidator.validateForm()];
                        case 1:
                            result = _c.sent();
                            _b = (_a = expect(result)).toBe;
                            return [4 /*yield*/, returnValue];
                        case 2:
                            _b.apply(_a, [_c.sent()]);
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        for (var _i = 0, returnValues_2 = returnValues; _i < returnValues_2.length; _i++) {
            var returnValue = returnValues_2[_i];
            _loop_2(returnValue);
        }
        it('stores a failed validation result in the order store', function () { return __awaiter(_this, void 0, void 0, function () {
            var validationErrors, validationResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(3);
                        validationErrors = {
                            'email': testError,
                            'givenName': testError,
                        };
                        validationResult = {
                            isValid: false,
                            validationErrors: new Map(Object.entries(validationErrors)),
                        };
                        validateFormMock.mockReturnValueOnce(validationResult);
                        return [4 /*yield*/, widgetValidator.validateForm()];
                    case 1:
                        _a.sent();
                        expect(orderStoreInstance.data.customerDetailsErrors.hasBeenValidated).toBe(true);
                        expect(orderStoreInstance.data.customerDetailsErrors.isValid).toBe(false);
                        expect(toJS(orderStoreInstance.data.customerDetailsErrors.validationErrors)).toEqual(validationErrors);
                        return [2 /*return*/];
                }
            });
        }); });
        it('stores a successful validation result in the order store', function () { return __awaiter(_this, void 0, void 0, function () {
            var validationResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(3);
                        validationResult = {
                            isValid: true,
                            validationErrors: new Map(),
                        };
                        validateFormMock.mockReturnValueOnce(validationResult);
                        return [4 /*yield*/, widgetValidator.validateForm()];
                    case 1:
                        _a.sent();
                        expect(orderStoreInstance.data.customerDetailsErrors.hasBeenValidated).toBe(true);
                        expect(orderStoreInstance.data.customerDetailsErrors.isValid).toBe(true);
                        expect(orderStoreInstance.data.customerDetailsErrors.validationErrors.size).toBe(0);
                        return [2 /*return*/];
                }
            });
        }); });
        it('replaces and removes existing errors in the order store', function () { return __awaiter(_this, void 0, void 0, function () {
            var oldTestError, validationErrors, validationResult;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(1);
                        oldTestError = 'oldTestError';
                        orderStoreInstance.data.customerDetailsErrors.validationErrors.set('email', oldTestError);
                        orderStoreInstance.data.customerDetailsErrors.validationErrors.set('givenName', oldTestError);
                        validationErrors = {
                            'email': testError,
                        };
                        validationResult = {
                            isValid: false,
                            validationErrors: new Map(Object.entries(validationErrors)),
                        };
                        validateFormMock.mockReturnValueOnce(validationResult);
                        return [4 /*yield*/, widgetValidator.validateForm()];
                    case 1:
                        _a.sent();
                        expect(toJS(orderStoreInstance.data.customerDetailsErrors.validationErrors)).toEqual(validationErrors);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=customer-details-widget-validator.test.js.map