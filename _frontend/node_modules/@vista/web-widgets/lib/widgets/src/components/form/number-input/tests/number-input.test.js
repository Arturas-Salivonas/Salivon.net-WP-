var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { create } from 'react-test-renderer';
import { compareToSnapshot } from '../../../../tests/compare-to-snapshot';
import { FormElementStyle } from '../../form-element-style';
import { NumberInput, NumberInputType } from '../number-input';
var onChangeFunc = function (value) {
    console.log('onChange, value: ' + value);
};
describe('NumberInput', function () {
    it('should render the default NumberInput component correctly', function () {
        var props = {
            value: 0,
            onChangeValue: onChangeFunc,
        };
        compareToSnapshot(React.createElement(NumberInput, __assign({}, props)));
    });
    it('should render the warning NumberInput component correctly', function () {
        var props = {
            value: 0,
            onChangeValue: onChangeFunc,
            style: FormElementStyle.Warning
        };
        compareToSnapshot(React.createElement(NumberInput, __assign({}, props)));
    });
    it('should render the error NumberInput component correctly', function () {
        var props = {
            value: 0,
            onChangeValue: onChangeFunc,
            style: FormElementStyle.Error
        };
        compareToSnapshot(React.createElement(NumberInput, __assign({}, props)));
    });
    it('should render the success NumberInput component correctly', function () {
        var props = {
            value: 0,
            onChangeValue: onChangeFunc,
            style: FormElementStyle.Success
        };
        compareToSnapshot(React.createElement(NumberInput, __assign({}, props)));
    });
    it('should render spinner style correctly', function () {
        var testProps = {
            value: 0,
            onChangeValue: onChangeFunc,
            min: 0,
            max: 10,
            step: 1,
            type: NumberInputType.Basic,
            name: 'quantity'
        };
        compareToSnapshot(React.createElement(NumberInput, __assign({}, testProps)));
    });
    it('should render basic style correctly', function () {
        var testProps = {
            value: 0,
            onChangeValue: onChangeFunc,
            min: 0,
            max: 10,
            step: 1,
            type: NumberInputType.Basic,
            name: 'quantity'
        };
        compareToSnapshot(React.createElement(NumberInput, __assign({}, testProps)));
    });
    it('should render select style correctly', function () {
        var testProps = {
            value: 0,
            onChangeValue: onChangeFunc,
            min: 0,
            max: 10,
            step: 1,
            type: NumberInputType.Select,
            name: 'quantity'
        };
        compareToSnapshot(React.createElement(NumberInput, __assign({}, testProps)));
    });
    it('should trigger error when max < min', function () {
        var testProps = {
            value: 1,
            onChangeValue: onChangeFunc,
            min: 2,
            max: 1,
            step: 1,
            type: NumberInputType.Basic,
            name: 'quantity'
        };
        expect(function () {
            create(React.createElement(NumberInput, __assign({}, testProps)));
        }).toThrow("The min value: " + testProps.min + " must be lower than the max value: " + testProps.max);
    });
    it('should trigger error when step <= 0', function () {
        var testProps = {
            value: 1,
            onChangeValue: onChangeFunc,
            min: 0,
            max: 10,
            step: 0,
            type: NumberInputType.Basic,
            name: 'quantity'
        };
        expect(function () {
            create(React.createElement(NumberInput, __assign({}, testProps)));
        }).toThrow('The step value must be greater than 0');
    });
    it('should trigger error when value is out of min and max', function () {
        var testProps = {
            value: -1,
            onChangeValue: onChangeFunc,
            min: 0,
            max: 4,
            step: 1,
            type: NumberInputType.Basic,
            name: 'quantity'
        };
        expect(function () {
            create(React.createElement(NumberInput, __assign({}, testProps)));
        }).toThrow("The value: " + testProps.value + " must be within the min and max range of " + testProps.min + " & " + testProps.max + " respectively.");
    });
    it('should update props when new props are received', function () {
        var numberInput = new NumberInput({
            value: 1,
            onChangeValue: onChangeFunc
        });
        numberInput.updateProps = jest.fn();
        var newProps = {
            value: 2,
            onChangeValue: onChangeFunc,
            min: 0,
            max: 4,
            step: 1,
            type: NumberInputType.Basic,
            name: 'quantity'
        };
        numberInput.componentWillReceiveProps(newProps);
        expect(numberInput.updateProps).toBeCalled();
    });
    it('should should limit the min and max for select style to 0 - 10', function () {
        var numberInput = new NumberInput({
            value: 1,
            onChangeValue: onChangeFunc,
            type: NumberInputType.Select,
            min: 10,
            max: 200
        });
        expect(numberInput.min).toEqual(0);
        expect(numberInput.max).toEqual(10);
    });
    it('should increment the value by one step', function () {
        var value = 1;
        var onChangeFn = function (newValue) {
            value = newValue;
        };
        var numberInput = new NumberInput({
            value: value,
            step: 1,
            onChangeValue: onChangeFn,
        });
        numberInput.incrementValue();
        expect(value).toEqual(2);
    });
    it('should decrement the value by one step', function () {
        var value = 1;
        var onChangeFn = function (newValue) {
            value = newValue;
        };
        var numberInput = new NumberInput({
            value: value,
            step: 1,
            onChangeValue: onChangeFn,
        });
        numberInput.decrementValue();
        expect(value).toEqual(0);
    });
    it('should decrement the value by one step', function () {
        var value = 1;
        var onChangeFn = function (newValue) {
            value = newValue;
        };
        var numberInput = new NumberInput({
            value: value,
            step: 1,
            onChangeValue: onChangeFn,
        });
        numberInput.decrementValue();
        expect(value).toEqual(0);
    });
    describe('handleKeyPress', function () {
        var testCases = [
            { keyCode: 107, expectedAction: 'increment' },
            { keyCode: 187, expectedAction: 'increment' },
            { keyCode: 38, expectedAction: 'increment' },
            { keyCode: 109, expectedAction: 'decrement' },
            { keyCode: 189, expectedAction: 'decrement' },
            { keyCode: 40, expectedAction: 'decrement' },
            { keyCode: 0, expectedAction: 'handleChange' },
        ];
        testCases.forEach(function (testCase) {
            it("should " + testCase.expectedAction + " when key " + testCase.keyCode + " is pressed", function () {
                var numberInput = new NumberInput({
                    value: 0,
                    step: 1,
                    onChangeValue: onChangeFunc,
                });
                numberInput.incrementValue = jest.fn();
                numberInput.decrementValue = jest.fn();
                numberInput.handleChange = jest.fn();
                numberInput.handleKeyDown({
                    keyCode: testCase.keyCode,
                    preventDefault: function () { } // tslint:disable-line
                });
                var action = testCase.expectedAction;
                expect(numberInput.incrementValue).toHaveBeenCalledTimes(action === 'increment' ? 1 : 0);
                expect(numberInput.decrementValue).toHaveBeenCalledTimes(action === 'decrement' ? 1 : 0);
                expect(numberInput.handleChange).toHaveBeenCalledTimes(action === 'handleChange' ? 1 : 0);
            });
        });
    });
    describe('onChange', function () {
        it('should reset the value to min if NaN', function () {
            var value = 1;
            var onChangeFn = function (newValue) {
                value = newValue;
            };
            var numberInput = new NumberInput({
                value: value,
                step: 1,
                onChangeValue: onChangeFn,
                min: 0
            });
            numberInput.onChange('not a number');
            expect(value).toEqual(0);
        });
        it('should reset the value to min if less than min', function () {
            var value = 1;
            var onChangeFn = function (newValue) {
                value = newValue;
            };
            var numberInput = new NumberInput({
                value: value,
                step: 1,
                onChangeValue: onChangeFn,
                min: 0
            });
            numberInput.onChange(-1);
            expect(value).toEqual(0);
        });
        it('should reset the value to max if less than max', function () {
            var value = 1;
            var onChangeFn = function (newValue) {
                value = newValue;
            };
            var numberInput = new NumberInput({
                value: value,
                step: 1,
                onChangeValue: onChangeFn,
                max: 10
            });
            numberInput.onChange(11);
            expect(value).toEqual(10);
        });
    });
});
//# sourceMappingURL=number-input.test.js.map