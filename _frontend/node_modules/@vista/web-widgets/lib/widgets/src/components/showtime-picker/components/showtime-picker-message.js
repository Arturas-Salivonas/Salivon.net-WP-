import * as React from 'react';
import { Formatter } from '../../../utils/formatter';
import { Message } from '../../message/message';
export var ShowtimePickerMessageType;
(function (ShowtimePickerMessageType) {
    ShowtimePickerMessageType["NoCinemasSelected"] = "NoCinemasSelected";
    ShowtimePickerMessageType["NoShowtimesForFilmOnDate"] = "NoShowtimesForFilmOnDate";
    ShowtimePickerMessageType["NoShowtimesForSitesOnDate"] = "NoShowtimesForSitesOnDate";
    ShowtimePickerMessageType["NoShowtimesAllDates"] = "NoShowtimesAllDates";
    ShowtimePickerMessageType["FailedToLoadData"] = "FailedToLoadData";
})(ShowtimePickerMessageType || (ShowtimePickerMessageType = {}));
function getFormattedMessage(template, selectedFilmTitle) {
    return Formatter.Instance.template(template, {
        selectedFilmTitle: selectedFilmTitle,
    });
}
function getIconName(messageType, assets) {
    switch (messageType) {
        case ShowtimePickerMessageType.NoCinemasSelected:
            return assets.noSitesSelectedIconName;
        case ShowtimePickerMessageType.FailedToLoadData:
            return assets.failedToLoadDataIconName;
        default:
            return assets.noShowtimesIconName;
    }
}
function getTitleString(messageType, displayText) {
    switch (messageType) {
        case ShowtimePickerMessageType.NoCinemasSelected:
            return displayText.noSitesSelectedTitle;
        case ShowtimePickerMessageType.NoShowtimesAllDates:
            return displayText.noShowtimesForAnyDateTitle;
        case ShowtimePickerMessageType.FailedToLoadData:
            return displayText.failedToLoadDataTitle;
        default:
            return undefined;
    }
}
function getDescriptionString(messageType, displayText, selectedFilmTitle) {
    switch (messageType) {
        case ShowtimePickerMessageType.NoCinemasSelected:
            return displayText.noSitesSelectedMessage;
        case ShowtimePickerMessageType.NoShowtimesAllDates:
            return displayText.noShowtimesForAnyDateMessage;
        case ShowtimePickerMessageType.FailedToLoadData:
            return displayText.failedToLoadDataMessage;
        case ShowtimePickerMessageType.NoShowtimesForFilmOnDate:
            return selectedFilmTitle ? getFormattedMessage(displayText.noShowtimesForFilmMessage, selectedFilmTitle) : displayText.noShowtimesGenericMessage;
        case ShowtimePickerMessageType.NoShowtimesForSitesOnDate:
            return displayText.noShowtimesGenericMessage;
        default:
            return undefined;
    }
}
export var ShowtimePickerMessage = function (_a) {
    var messageType = _a.messageType, displayText = _a.displayText, assets = _a.assets, selectedFilmTitle = _a.selectedFilmTitle, children = _a.children;
    return (React.createElement(Message, { icon: getIconName(messageType, assets), title: getTitleString(messageType, displayText), description: getDescriptionString(messageType, displayText), className: 'v-showtime-picker-message' }, children));
};
//# sourceMappingURL=showtime-picker-message.js.map