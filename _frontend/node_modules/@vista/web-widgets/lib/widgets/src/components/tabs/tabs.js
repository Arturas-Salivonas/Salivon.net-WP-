var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import debounce from 'debounce';
import React, { createRef } from 'react';
import { Animator, easeInOutSine } from '../../dom/animator';
import { deviceHasTouch } from '../../dom/device-has-touch';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { Icon } from '../icon/icon';
var Tabs = /** @class */ (function (_super) {
    __extends(Tabs, _super);
    function Tabs(props) {
        var _this = _super.call(this, props) || this;
        _this.tablistRef = createRef();
        _this.scrollButtonLeftRef = createRef();
        _this.scrollButtonRightRef = createRef();
        _this.handleTabClicked = function (index) {
            _this.setState({ selectedTabIndex: index });
        };
        _this.handleLeftScrollClick = function () {
            var tablist = _this.tablistRef.current;
            if (!tablist)
                return;
            _this.scrollBy(-tablist.clientWidth);
        };
        _this.handleRightScrollClick = function () {
            var tablist = _this.tablistRef.current;
            if (!tablist)
                return;
            _this.scrollBy(tablist.clientWidth);
        };
        _this.handleTabsScroll = debounce(function () {
            _this.updateScrollState();
        }, 166);
        _this.handleWindowResize = debounce(function () {
            _this.updateScrollState();
            _this.updateIndicatorStyleState();
            var tablist = _this.tablistRef.current;
            if (!tablist)
                return;
            // reset scroll position if container width sufficient
            if (tablist.scrollWidth - 1 <= tablist.clientWidth) { // - 1 to allow for IE calculation issue
                tablist.scrollLeft = 0;
            }
        }, 166);
        _this.scrollBy = function (delta) {
            var tablist = _this.tablistRef.current;
            if (!tablist)
                return;
            _this.scrollTo(tablist.scrollLeft + delta);
        };
        _this.scrollTo = function (scrollPosition) {
            var tablist = _this.tablistRef.current;
            if (!tablist)
                return;
            _this.animator = new Animator(tablist.scrollLeft, scrollPosition, 300, _this.handleScrollAnimationFrame);
            // Start the animation
            _this.animator.start();
        };
        _this.handleScrollAnimationFrame = function (frame) {
            var tablist = _this.tablistRef.current;
            if (!tablist)
                return;
            var progress = frame.progress, isFinalFrame = frame.isFinalFrame, startState = frame.startState, endState = frame.endState;
            if (isFinalFrame) {
                tablist.scrollLeft = endState;
                _this.animator = undefined;
                return;
            }
            var currentScrollPosition = easeInOutSine(progress, startState, endState);
            tablist.scrollLeft = currentScrollPosition;
        };
        _this.getSelectedTab = function () {
            var tablist = _this.tablistRef.current;
            var selectedTabIndex = _this.state.selectedTabIndex;
            if (!tablist)
                return null;
            return tablist.children[selectedTabIndex];
        };
        _this.getSelectedTabContent = function () {
            var selectedTab = _this.props.children[_this.state.selectedTabIndex];
            return selectedTab ? selectedTab.props.children : null;
        };
        _this.scrollSelectedTabIntoView = function () {
            var tablist = _this.tablistRef.current;
            var selectedTab = _this.getSelectedTab();
            if (!tablist || !selectedTab)
                return;
            var tablistRect = tablist.getBoundingClientRect();
            var tabRect = selectedTab.getBoundingClientRect();
            // tab is bigger than tablist, cannot show it all at once
            if (tabRect.width > tablistRect.width) {
                return;
            }
            var _a = _this.state, canScrollLeft = _a.canScrollLeft, canScrollRight = _a.canScrollRight;
            var scrollButtonLeft = _this.scrollButtonLeftRef.current;
            var scrollButtonRight = _this.scrollButtonRightRef.current;
            var leftOffset = canScrollLeft && scrollButtonLeft
                ? scrollButtonLeft.getBoundingClientRect().width
                : 0;
            var rightOffset = canScrollRight && scrollButtonRight
                ? scrollButtonRight.getBoundingClientRect().width
                : 0;
            var leftBoundary = tablistRect.left + leftOffset;
            var rightBoundary = tablistRect.right - rightOffset;
            // left side of tab is out of view
            if (tabRect.left < leftBoundary) {
                _this.scrollBy(tabRect.left - leftBoundary);
            }
            // right side of tab is out of view
            else if (tabRect.right > rightBoundary) {
                _this.scrollBy(tabRect.right - rightBoundary);
            }
        };
        _this.updateScrollState = function () {
            var tablist = _this.tablistRef.current;
            if (!tablist)
                return;
            var scrollLeft = tablist.scrollLeft, scrollWidth = tablist.scrollWidth, clientWidth = tablist.clientWidth;
            var canScrollLeft = scrollLeft > 0;
            var canScrollRight = scrollWidth > clientWidth + scrollLeft + 1; // + 1 to allow for IE calculation issue
            var scrollStateChanged = canScrollLeft !== _this.state.canScrollLeft
                || canScrollRight !== _this.state.canScrollRight;
            if (scrollStateChanged) {
                _this.setState({ canScrollLeft: canScrollLeft, canScrollRight: canScrollRight });
            }
        };
        _this.updateIndicatorStyleState = function () {
            var tablist = _this.tablistRef.current;
            var selectedTab = _this.getSelectedTab();
            if (!tablist || !selectedTab)
                return;
            var tablistRect = tablist.getBoundingClientRect();
            var tabRect = selectedTab.getBoundingClientRect();
            var left = Math.round(tabRect.left - tablistRect.left + tablist.scrollLeft);
            var width = Math.round(tabRect.width);
            var lastIndicatorStyle = _this.state.indicatorStyle;
            var indicatorStyleStyleChanged = left !== lastIndicatorStyle.left
                || width !== lastIndicatorStyle.width;
            if (indicatorStyleStyleChanged) {
                _this.setState({
                    indicatorStyle: { left: left, width: width }
                });
            }
        };
        _this.state = {
            canScrollLeft: false,
            canScrollRight: false,
            indicatorStyle: {},
            selectedTabIndex: props.defaultSelectedTabIndex || 0
        };
        return _this;
    }
    Tabs.prototype.render = function () {
        var _this = this;
        var b = bemClassBuilderFactory('v-tabs');
        var _a = this.props, childrenProp = _a.children, centered = _a.centered;
        var _b = this.state, canScrollLeft = _b.canScrollLeft, canScrollRight = _b.canScrollRight, indicatorStyle = _b.indicatorStyle, selectedTabIndex = _b.selectedTabIndex;
        var showScrollButtons = !deviceHasTouch();
        var children = React.Children.map(childrenProp, function (child, index) {
            if (!React.isValidElement(child))
                return null;
            return React.cloneElement(child, {
                selected: index === selectedTabIndex,
                onClick: _this.handleTabClicked,
                index: index,
            });
        });
        return (React.createElement("div", { className: b.block() },
            React.createElement("header", { className: b.element('header') },
                showScrollButtons &&
                    React.createElement("button", { className: b.element('scroll-button', { left: true }), onClick: this.handleLeftScrollClick, disabled: !canScrollLeft, ref: this.scrollButtonLeftRef },
                        React.createElement(Icon, { name: "chevron-left" })),
                React.createElement("div", { className: b.element('wrapper', {
                        canScrollLeft: canScrollLeft,
                        canScrollRight: canScrollRight,
                        showScrollButtons: showScrollButtons
                    }) },
                    React.createElement("ul", { className: b.element('tab-list', { centered: centered }), role: "tablist", ref: this.tablistRef, onScroll: this.handleTabsScroll },
                        children,
                        React.createElement("span", { className: b.element('indicator'), style: indicatorStyle }))),
                showScrollButtons &&
                    React.createElement("button", { className: b.element('scroll-button', { right: true }), onClick: this.handleRightScrollClick, disabled: !canScrollRight, ref: this.scrollButtonRightRef },
                        React.createElement(Icon, { name: "chevron-right" }))),
            React.createElement("div", { className: b.element('tab-panel'), role: "tabpanel" }, this.getSelectedTabContent())));
    };
    Tabs.prototype.componentDidMount = function () {
        var _this = this;
        window.addEventListener('resize', this.handleWindowResize);
        // Update the state on the next animation frame to ensure that all styles have loaded
        requestAnimationFrame(function () {
            _this.updateScrollState();
            _this.updateIndicatorStyleState();
        });
    };
    Tabs.prototype.componentDidUpdate = function (_, prevState) {
        this.updateScrollState();
        this.updateIndicatorStyleState();
        if (this.state.selectedTabIndex !== prevState.selectedTabIndex) {
            this.scrollSelectedTabIntoView();
        }
    };
    Tabs.prototype.componentWillUnmount = function () {
        window.removeEventListener('resize', this.handleWindowResize);
        this.handleWindowResize.clear();
        this.handleTabsScroll.clear();
    };
    return Tabs;
}(React.Component));
export { Tabs };
//# sourceMappingURL=tabs.js.map