var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { Icon } from '../icon/icon';
// TODO: Split into ButtonColor and ButtonStyle
export var ButtonColor;
(function (ButtonColor) {
    ButtonColor["Primary"] = "Primary";
    ButtonColor["Secondary"] = "Secondary";
    ButtonColor["Tertiary"] = "Tertiary";
})(ButtonColor || (ButtonColor = {}));
export var ButtonSize;
(function (ButtonSize) {
    ButtonSize["Small"] = "Small";
    ButtonSize["Medium"] = "Medium";
    ButtonSize["Large"] = "Large";
})(ButtonSize || (ButtonSize = {}));
/**
 * Renders a button.
 */
var Button = /** @class */ (function (_super) {
    __extends(Button, _super);
    function Button() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleClick = function (event) {
            if (_this.props.disabled || _this.props.loading)
                return;
            if (_this.props.onClick)
                _this.props.onClick(event);
        };
        return _this;
    }
    Button.prototype.render = function () {
        var _a = this.props, disabled = _a.disabled, type = _a.type, tabIndex = _a.tabIndex, icon = _a.icon, iconOnly = _a.iconOnly, label = _a.label;
        var b = bemClassBuilderFactory('v-button');
        return (React.createElement("button", { className: this.getButtonClass(b, this.props), type: type, disabled: disabled, onClick: this.handleClick, tabIndex: disabled ? -1 : tabIndex, "aria-label": iconOnly ? label : undefined },
            icon &&
                React.createElement("span", { className: b.element('icon') },
                    React.createElement(Icon, { name: icon })),
            !iconOnly && label && label.length > 0 &&
                React.createElement("span", { className: b.element('label') }, label),
            this.props.children));
    };
    Button.prototype.getButtonClass = function (b, props) {
        var buttonClass = b.block({
            color: props.color || ButtonColor.Secondary,
            size: props.size || ButtonSize.Medium,
            loading: props.loading || false,
            iconOnly: props.iconOnly || false
        });
        return props.className ? buttonClass + " " + props.className : buttonClass;
    };
    return Button;
}(React.Component));
export { Button };
//# sourceMappingURL=button.js.map