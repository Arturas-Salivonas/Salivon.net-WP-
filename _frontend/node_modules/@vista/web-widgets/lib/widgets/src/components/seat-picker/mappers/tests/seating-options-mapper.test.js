import { PopFirstSelectedSeatHandler } from '../../../../../../api/src/stores/seating/helpers/handlers/pop-first-selected-seat-handler';
import { defaultSeatSelectionRules } from '../../../../../../api/src/stores/seating/helpers/rules/rules';
import { SeatSelectionRuleName } from '../../../../../../api/src/stores/seating/helpers/rules/seat-selection-rule';
import { seatingStoreInstance } from '../../../../../../api/src/stores/seating/seating-store';
import { mapSeatPickerSeatingOptions } from '../seating-options-mapper';
jest.mock('../../../../../../api/src/stores/seating/helpers/handlers/pop-first-selected-seat-handler');
describe('mapSeatPickerSeatingOptions', function () {
    beforeEach(function () {
        PopFirstSelectedSeatHandler.mockImplementation(function (rules) {
            return { rules: rules };
        });
        PopFirstSelectedSeatHandler.mockClear();
        seatingStoreInstance.options = undefined;
    });
    it('returns the default handler and default rules', function () {
        var config = {};
        var result = mapSeatPickerSeatingOptions(config);
        expect(PopFirstSelectedSeatHandler).toHaveBeenCalledTimes(1);
        expect(result.selectSeatHandler).toEqual({
            rules: defaultSeatSelectionRules
        });
    });
    it('returns the default handler and configured rules', function () {
        var rules = {
            mustFillSofaSeats: { enabled: false }
        };
        var config = { seatSelection: { rules: rules } };
        var result = mapSeatPickerSeatingOptions(config);
        expect(PopFirstSelectedSeatHandler).toHaveBeenCalledTimes(1);
        var hasMustFillSofaSeatsRule = result.selectSeatHandler.rules.some(function (r) { return r.name === SeatSelectionRuleName.MustFillSofaSeats; });
        expect(hasMustFillSofaSeatsRule).toEqual(false);
    });
    it('returns a custom handler', function () {
        var handler = {};
        var config = { seatSelection: { handler: handler } };
        var result = mapSeatPickerSeatingOptions(config);
        expect(result.selectSeatHandler).toEqual(handler);
        expect(PopFirstSelectedSeatHandler).not.toHaveBeenCalled();
    });
});
//# sourceMappingURL=seating-options-mapper.test.js.map