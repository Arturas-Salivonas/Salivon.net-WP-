var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { PaymentClient } from '@vista/embedded-payments';
import { observer } from 'mobx-react';
import * as React from 'react';
import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../../api/src/utils/logger';
import { mxtApi } from '../../../../../mx-api-client/src/mxt/api/mxt-api';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { defaultOrderPaymentFormAssets } from '../types/assets';
import { defaultOrderPaymentFormDisplayText } from '../types/display-text';
import { OrderPaymentFormMessage, OrderPaymentFormMessageType } from './order-payment-form-message';
var b = bemClassBuilderFactory('v-order-payment-form-method');
var OrderPaymentFormMethod = /** @class */ (function (_super) {
    __extends(OrderPaymentFormMethod, _super);
    function OrderPaymentFormMethod(props) {
        var _this = _super.call(this, props) || this;
        _this.containerRef = React.createRef();
        _this.state = {
            isLoading: true,
            failedToInitialiseConnector: false
        };
        return _this;
    }
    OrderPaymentFormMethod.prototype.render = function () {
        var _a = this.state, isLoading = _a.isLoading, failedToInitialiseConnector = _a.failedToInitialiseConnector;
        if (failedToInitialiseConnector) {
            return (React.createElement(OrderPaymentFormMessage, { messageType: OrderPaymentFormMessageType.FailedToInitialiseConnector, assets: defaultOrderPaymentFormAssets, displayText: defaultOrderPaymentFormDisplayText }));
        }
        return (React.createElement("div", { className: b.block({ loading: isLoading }) },
            React.createElement("div", { className: b.element('container'), ref: this.containerRef })));
    };
    OrderPaymentFormMethod.prototype.componentDidMount = function () {
        var _this = this;
        if (!this.containerRef.current)
            return;
        var _a = this.props, orderId = _a.orderId, paymentMethod = _a.paymentMethod, displayText = _a.displayText, onPaymentSuccessful = _a.onPaymentSuccessful, onPaymentFailed = _a.onPaymentFailed;
        var cinemaChainId = configurationStoreInstance.data.api.cinemaChainId;
        this.client = new PaymentClient({
            orderId: orderId,
            paymentMethod: paymentMethod,
            container: this.containerRef.current,
            paymentButtonConfig: {
                className: 'v-button v-button--size-medium v-button--color-primary',
                loadingClassName: 'v-button--loading',
                label: displayText.paymentButtonLabel
            },
            childContainerClassName: b.element('child-container'),
            events: {
                onPaymentSuccessful: onPaymentSuccessful,
                onPaymentFailed: onPaymentFailed,
            },
            api: {
                startEmbeddedPayment: function (orderId, request) { return mxtApi.startEmbeddedPayment(cinemaChainId, orderId, request); },
                getOrderCompletionStatus: function (orderId) { return mxtApi.getOrderCompletionStatus(cinemaChainId, orderId); }
            }
        });
        this.client.initialiseConnector()
            .then(function () {
            _this.setState({ isLoading: false });
        })
            .catch(function (error) {
            Logger.error("Failed to initialise payment connector " + paymentMethod + ". " + error);
            _this.setState({ isLoading: false, failedToInitialiseConnector: true });
        });
    };
    OrderPaymentFormMethod.prototype.componentWillUnmount = function () {
        if (this.client)
            this.client.unmount();
    };
    OrderPaymentFormMethod = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], OrderPaymentFormMethod);
    return OrderPaymentFormMethod;
}(React.Component));
export { OrderPaymentFormMethod };
//# sourceMappingURL=order-payment-form-method.js.map