import { browsingStoreInstance } from '../../../../../api/src/stores/browsing/browsing-store';
import { exampleFilm } from '../../../../../example-data/browsing/film';
import * as createComponent from '../../../bootstrap/create-component';
import { filmDetails } from '../bootstrap';
import { defaultFilmDetailsWidgetConfig } from '../types/config';
import { defaultFilmDetailsAssets } from '../types/assets';
import { defaultFilmDetailsWidgetDisplayText } from '../types/display-text';
describe('filmDetails bootstrap', function () {
    var component = { _component: {} };
    var createComponentSpy = jest.spyOn(createComponent, 'createComponent').mockReturnValue(component);
    var filmId = exampleFilm.id;
    afterEach(function () { return jest.clearAllMocks(); });
    it('calls the create component function', function () {
        expect.assertions(2);
        var response = filmDetails({
            selector: 'test',
            filmId: filmId
        });
        expect(createComponentSpy).toBeCalledWith('test', expect.anything(), {
            browsingStore: browsingStoreInstance,
            filmId: filmId,
            config: defaultFilmDetailsWidgetConfig,
            displayText: defaultFilmDetailsWidgetDisplayText,
            assets: defaultFilmDetailsAssets
        });
        expect(response).toEqual(component);
    });
    it('throws an error when no filmId has been passed in', function () {
        expect(function () { return filmDetails({
            selector: 'test',
            filmId: undefined
        }); }).toThrow('Cannot render the film details widget without a film id');
    });
});
//# sourceMappingURL=bootstrap.test.js.map