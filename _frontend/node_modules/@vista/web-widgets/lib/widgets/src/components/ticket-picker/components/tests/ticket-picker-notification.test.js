var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { TicketSelectionValidationError } from '../../../../../../types/stores/order-store-data';
import { compareToSnapshot } from '../../../../tests/compare-to-snapshot';
import { NotificationStyle } from '../../../notification/notification';
import { defaultTicketPickerDisplayText } from '../../types/display-text';
import { TicketPickerNotification } from '../ticket-picker-notification';
describe('TicketPickerNotification', function () {
    var notificationProps = {
        errors: [TicketSelectionValidationError.NoTicketsSelected],
        style: NotificationStyle.Warning,
        displayText: defaultTicketPickerDisplayText,
        onNotificationClosed: function () { return; }
    };
    beforeEach(function () {
        jest.clearAllMocks();
    });
    describe('render', function () {
        it('should render info style correctly', function () {
            compareToSnapshot(React.createElement(TicketPickerNotification, __assign({}, notificationProps, { style: NotificationStyle.Info })));
        });
        it('should render warning style correctly', function () {
            compareToSnapshot(React.createElement(TicketPickerNotification, __assign({}, notificationProps, { style: NotificationStyle.Warning })));
        });
        it('should render error style correctly', function () {
            compareToSnapshot(React.createElement(TicketPickerNotification, __assign({}, notificationProps, { style: NotificationStyle.Error })));
        });
        it('should render success style correctly', function () {
            compareToSnapshot(React.createElement(TicketPickerNotification, __assign({}, notificationProps, { style: NotificationStyle.Success })));
        });
        it('should render no error correctly', function () {
            compareToSnapshot(React.createElement(TicketPickerNotification, __assign({}, notificationProps, { style: NotificationStyle.Warning, errors: [] })));
        });
    });
});
//# sourceMappingURL=ticket-picker-notification.test.js.map