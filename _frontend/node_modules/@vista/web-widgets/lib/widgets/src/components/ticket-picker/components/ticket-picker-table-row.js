var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { isVoucherTicket } from '../../../../../api/src/services/order/utils/order-ticket-utils';
import { isLoyaltyTicketType, isVoucherTicketType } from '../../../../../api/src/services/order/utils/ticket-type-utils';
import { AllowedTicketQuantityStatus } from '../../../../../api/src/stores/order/selectors/get-allowed-ticket-quantity';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { Formatter } from '../../../utils/formatter';
import { NumberInput } from '../../form/number-input/number-input';
import { TicketPickerTableRowDetails } from './ticket-picker-table-row-details';
var TicketPickerTableRow = /** @class */ (function (_super) {
    __extends(TicketPickerTableRow, _super);
    function TicketPickerTableRow() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleQuantityChange = function (newQuantity) {
            var _a = _this.props, ticket = _a.ticket, showtimeId = _a.showtimeId;
            if (isVoucherTicket(ticket)) {
                _this.props.onTicketQuantityUpdate(showtimeId, ticket.ticketTypeKey, newQuantity, ticket.barcode);
            }
            else {
                _this.props.onTicketQuantityUpdate(showtimeId, ticket.ticketTypeKey, newQuantity);
            }
        };
        return _this;
    }
    TicketPickerTableRow.prototype.render = function () {
        var _a = this.props, orderStore = _a.orderStore, showtimeId = _a.showtimeId, ticket = _a.ticket, ticketType = _a.ticketType;
        if (!orderStore.selectors.hasShowtime(showtimeId))
            return null;
        var subTotal = ticket.quantity * ticketType.price;
        var quantityInputType = this.props.config.quantityInputType;
        var allowedQuantity = orderStore.selectors.getAllowedTicketQuantity(showtimeId, ticket, ticketType);
        var max = Math.max(allowedQuantity.quantity, ticket.quantity);
        var disabled = allowedQuantity.status === AllowedTicketQuantityStatus.NotAllowed || max === 0;
        var b = bemClassBuilderFactory('v-ticket-picker-table-row');
        return (React.createElement("tr", { className: this.getClass(b, ticketType, allowedQuantity) },
            React.createElement("td", { className: b.element('item') },
                React.createElement(TicketPickerTableRowDetails, { ticket: ticket, ticketType: ticketType })),
            React.createElement("td", { className: b.element('price') }, Formatter.Instance.currency(ticketType.price)),
            React.createElement("td", { className: b.element('quantity') },
                React.createElement(NumberInput, { min: 0, value: ticket.quantity, max: max, onChangeValue: this.handleQuantityChange, disabled: disabled, type: quantityInputType })),
            React.createElement("td", { className: b.element('subtotal') }, Formatter.Instance.currency(subTotal))));
    };
    TicketPickerTableRow.prototype.getClass = function (b, ticketType, allowedQuantity) {
        return b.block({
            voucher: isVoucherTicketType(ticketType),
            loyalty: isLoyaltyTicketType(ticketType),
            disabled: allowedQuantity.status === AllowedTicketQuantityStatus.NotAllowed,
            invalid: allowedQuantity.status === AllowedTicketQuantityStatus.Invalid,
        });
    };
    TicketPickerTableRow = __decorate([
        observer
    ], TicketPickerTableRow);
    return TicketPickerTableRow;
}(React.Component));
export { TicketPickerTableRow };
//# sourceMappingURL=ticket-picker-table-row.js.map