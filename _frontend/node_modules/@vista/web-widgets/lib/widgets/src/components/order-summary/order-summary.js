var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { isFetchedDataFailure, isFetchedDataSuccess } from '../../../../api/src/stores/cache-tools/fetched-data';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../api/src/utils/logger';
import { loadJourneyByIdApi } from '../../../../api/src/widgets-api/journey/load-journey-by-id-api';
import { loadJourneyByReferenceApi } from '../../../../api/src/widgets-api/journey/load-journey-by-reference-api';
import { getJourneyOrderShowtimeStatus, JourneyOrderShowtimeStatus } from '../../../../api/src/widgets-api/journey/utils/get-journey-order-showtime-status';
import { getJourneyState, JourneyStatus } from '../../../../api/src/widgets-api/journey/utils/get-journey-state';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { getCountdownForDate } from '../../utils/date-utils';
import { QRCode } from '../qr-code/qr-code';
import { OrderSummaryMessage, OrderSummaryMessageType } from './components/order-summary-message';
import { OrderSummaryShowtimeDetails } from './components/order-summary-showtime-details';
import { OrderSummarySkeleton } from './components/order-summary-skeleton';
import { OrderSummaryStatusIndicator } from './components/order-summary-status-indicator';
var OrderSummary = /** @class */ (function (_super) {
    __extends(OrderSummary, _super);
    function OrderSummary(props) {
        var _this = _super.call(this, props) || this;
        _this.startTimer = function () {
            if (!_this.timer)
                _this.timer = setInterval(_this.updateState, 1000);
        };
        _this.getFetchedJourneyData = function () {
            var _a = _this.props, journeyReference = _a.journeyReference, journeyId = _a.journeyId, journeyStore = _a.journeyStore;
            if (!journeyReference && !journeyId)
                return undefined; // invalid state, will throw in bootstrap
            return journeyId
                ? journeyStore.data.journeysById.get(journeyId)
                : journeyStore.data.journeysByReference.get(journeyReference);
        };
        _this.getJourney = function (fetchedJourneyData) {
            if (!fetchedJourneyData)
                return undefined;
            return isFetchedDataSuccess(fetchedJourneyData) ? fetchedJourneyData.payload : undefined;
        };
        _this.getCurrentState = function () {
            var _a = _this.props, journeyStore = _a.journeyStore, cancelTimerWhenLastShowtimeIsInactive = _a.cancelTimerWhenLastShowtimeIsInactive;
            var journey = _this.getJourney(_this.getFetchedJourneyData());
            if (!journey)
                return {};
            var journeyState = getJourneyState(journey);
            if (cancelTimerWhenLastShowtimeIsInactive
                && journeyState.status !== JourneyStatus.Active)
                clearInterval(_this.timer);
            var nextOrderShowtime = journeyState.nextOrderShowtime;
            var nextShowtime = nextOrderShowtime
                ? journeyStore.selectors.getShowtimeById(nextOrderShowtime.showtimeId)
                : undefined;
            if (!nextOrderShowtime || !nextShowtime)
                return { journeyState: journeyState };
            return {
                journeyState: journeyState,
                nextShowtimeStatus: getJourneyOrderShowtimeStatus(nextOrderShowtime),
                countdownForNextShowtime: getCountdownForDate(nextShowtime.startTime.utc)
            };
        };
        _this.updateState = function () {
            _this.setState(_this.getCurrentState());
        };
        _this.state = _this.getCurrentState();
        return _this;
    }
    OrderSummary.prototype.render = function () {
        var _a = this.props, journeyStore = _a.journeyStore, displayText = _a.displayText, assets = _a.assets;
        var _b = this.state, journeyState = _b.journeyState, nextShowtimeStatus = _b.nextShowtimeStatus, countdownForNextShowtime = _b.countdownForNextShowtime;
        var fetchedJourneyData = this.getFetchedJourneyData();
        if (fetchedJourneyData && isFetchedDataFailure(fetchedJourneyData)) {
            return (React.createElement(OrderSummaryMessage, { messageType: OrderSummaryMessageType.FailedToLoadData, displayText: displayText, assets: assets }));
        }
        var journey = this.getJourney(fetchedJourneyData);
        var b = bemClassBuilderFactory('v-order-summary');
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        if (!journey || !journeyState)
            return enableLoadingIndicator ? React.createElement(OrderSummarySkeleton, { assets: assets, displayText: displayText }) : null;
        var status = journeyState.status, nextOrderShowtime = journeyState.nextOrderShowtime;
        var statusModifier = getStatusModifierValue(status, nextShowtimeStatus);
        return (React.createElement("div", { className: b.block({ status: statusModifier }) },
            React.createElement("div", { className: b.element('wrapper') },
                React.createElement(OrderSummaryStatusIndicator, { journeyStatus: status, nextShowtimeStatus: nextShowtimeStatus, countdownForNextShowtime: countdownForNextShowtime, displayText: displayText }),
                React.createElement(QRCode, { value: journey.id, size: 190, showLabel: false }),
                React.createElement(OrderSummaryShowtimeDetails, { orderShowtime: nextOrderShowtime, journeyStore: journeyStore, displayText: displayText }))));
    };
    OrderSummary.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, journeyStore, journeyReference, journeyId, cinemaChainId, _b, loadJourneyById, loadJourneyByReference, error_1;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        _a = this.props, journeyStore = _a.journeyStore, journeyReference = _a.journeyReference, journeyId = _a.journeyId;
                        if (!journeyId && !journeyReference)
                            return [2 /*return*/, null]; // invalid state
                        cinemaChainId = configurationStoreInstance.data.api.cinemaChainId;
                        _b = journeyStore.actions, loadJourneyById = _b.loadJourneyById, loadJourneyByReference = _b.loadJourneyByReference;
                        _c.label = 1;
                    case 1:
                        _c.trys.push([1, 6, , 7]);
                        if (!journeyId) return [3 /*break*/, 3];
                        return [4 /*yield*/, loadJourneyById(loadJourneyByIdApi, cinemaChainId, journeyId)];
                    case 2:
                        _c.sent();
                        return [3 /*break*/, 5];
                    case 3: return [4 /*yield*/, loadJourneyByReference(loadJourneyByReferenceApi, cinemaChainId, journeyReference)];
                    case 4:
                        _c.sent();
                        _c.label = 5;
                    case 5:
                        this.startTimer();
                        return [3 /*break*/, 7];
                    case 6:
                        error_1 = _c.sent();
                        Logger.error(error_1);
                        return [3 /*break*/, 7];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    OrderSummary.prototype.componentWillUnmount = function () {
        clearInterval(this.timer);
    };
    OrderSummary = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], OrderSummary);
    return OrderSummary;
}(React.Component));
export { OrderSummary };
var getStatusModifierValue = function (journeyStatus, showtimeStatus) {
    switch (journeyStatus) {
        case JourneyStatus.Active:
            switch (showtimeStatus) {
                case JourneyOrderShowtimeStatus.Admitting:
                case JourneyOrderShowtimeStatus.NowPlaying:
                    return 'active';
                case JourneyOrderShowtimeStatus.Admitted:
                    return 'admitted';
                default:
                    return 'pending';
            }
        case JourneyStatus.Expired:
        case JourneyStatus.Refunded:
            return 'inactive';
    }
};
//# sourceMappingURL=order-summary.js.map