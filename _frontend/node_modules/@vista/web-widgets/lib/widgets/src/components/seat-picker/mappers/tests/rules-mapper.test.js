import { defaultSeatSelectionRules } from '../../../../../../api/src/stores/seating/helpers/rules/rules';
import { SeatSelectionRuleName } from '../../../../../../api/src/stores/seating/helpers/rules/seat-selection-rule';
import { mapSeatPickerSeatSelectionRules } from '../rules-mapper';
describe('mapSeatPickerSeatSelectionRules', function () {
    it('returns the default set of rules when undefined is passed in', function () {
        var result = mapSeatPickerSeatSelectionRules(undefined);
        expect(result).toEqual(defaultSeatSelectionRules);
    });
    it('returns the default set of rules when an invalid value is passed in', function () {
        var result = mapSeatPickerSeatSelectionRules(true);
        expect(result).toEqual(defaultSeatSelectionRules);
    });
    var rules = [
        { property: 'cannotSelectUnavailableSeats', name: SeatSelectionRuleName.CannotSelectUnavailableSeats },
        { property: 'cannotExceedAllocatedSeatsForAreaCategory', name: SeatSelectionRuleName.CannotExceedAllocatedSeatsForAreaCategory },
        { property: 'mustSelectAllSeatsAllocatedForOrder', name: SeatSelectionRuleName.MustSelectAllSeatsAllocatedForOrder },
        { property: 'mustSelectAtLeastOneSeat', name: SeatSelectionRuleName.MustSelectAtLeastOneSeat },
        { property: 'mustFillSofaSeats', name: SeatSelectionRuleName.MustFillSofaSeats },
        { property: 'mustSelectAssociatedWheelchairSeat', name: SeatSelectionRuleName.MustSelectAssociatedWheelchairSeat },
        { property: 'cannotLeaveGapsBetweenSelectedSeatsRule', name: SeatSelectionRuleName.CannotLeaveGapsBetweenSelectedSeats },
        { property: 'cannotLeaveSingleSeatGapFromUnavailableSeat', name: SeatSelectionRuleName.CannotLeaveSingleSeatGapFromUnavailableSeat },
        { property: 'cannotLeaveSingleSeatGapFromAisle', name: SeatSelectionRuleName.CannotLeaveSingleSeatGapFromAisle }
    ];
    rules.forEach(function (_a) {
        var property = _a.property, name = _a.name;
        describe(property, function () {
            it("includes the " + property + " rule if the config is invalid", function () {
                var _a;
                var config = (_a = {},
                    _a[property] = {},
                    _a);
                var result = mapSeatPickerSeatSelectionRules(config);
                expect(result.length).toEqual(defaultSeatSelectionRules.length);
                expect(result.some(function (r) { return r.name === name; })).toEqual(true);
            });
            it("excludes the " + property + " rule if the enabled value is false", function () {
                var _a;
                var config = (_a = {},
                    _a[property] = { enabled: false },
                    _a);
                var result = mapSeatPickerSeatSelectionRules(config);
                expect(result.length).toEqual(defaultSeatSelectionRules.length - 1);
                expect(result.some(function (r) { return r.name === name; })).toEqual(false);
            });
            it("includes the " + property + " rule if the enabled value is invalid", function () {
                var _a;
                var config = (_a = {},
                    _a[property] = { enabled: [] },
                    _a);
                var result = mapSeatPickerSeatSelectionRules(config);
                expect(result.length).toEqual(defaultSeatSelectionRules.length);
                expect(result.some(function (r) { return r.name === name; })).toEqual(true);
            });
            it("includes the " + property + " rule if the enabled value is true", function () {
                var _a;
                var config = (_a = {},
                    _a[property] = { enabled: true },
                    _a);
                var result = mapSeatPickerSeatSelectionRules(config);
                expect(result.length).toEqual(defaultSeatSelectionRules.length);
                expect(result.some(function (r) { return r.name === name; })).toEqual(true);
            });
        });
    });
});
//# sourceMappingURL=rules-mapper.test.js.map