var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import * as React from 'react';
import { orderService } from '../../../../api/src/services/order/order-service';
import { services } from '../../../../api/src/services/services';
import { vouchersService } from '../../../../api/src/services/vouchers/vouchers-service';
import { orderStoreInstance } from '../../../../api/src/stores/order/order-store';
import { exampleOrder } from '../../../../example-data/order/order';
import { exampleVouchers } from '../../../../example-data/vouchers';
import { AddVoucherErrorTypes } from '../../../../types/vouchers/add-voucher-to-order-result';
import '../../scss/themes/light/_all.scss';
// import '../../scss/themes/dark/_all.scss';
import { TicketPicker } from '../ticket-picker/ticket-picker';
import { defaultTicketPickerAssets } from '../ticket-picker/types/assets';
import { defaultTicketPickerConfig } from '../ticket-picker/types/config';
import { defaultTicketPickerDisplayText } from '../ticket-picker/types/display-text';
import { defaultVoucherInputFormDisplayText } from '../voucher-input-form/types/display-text';
import { VoucherInputForm } from '../voucher-input-form/voucher-input-form';
orderStoreInstance.actions.setOrderData(exampleOrder);
var showtimeId = exampleOrder.showtimes[0].showtimeId;
var getErrorMessageForValidationError = function (voucherBarcode, error) {
    var message = "Voucher with barcode " + voucherBarcode + " ";
    switch (error) {
        case AddVoucherErrorTypes.VoucherNotValid:
            message += 'is invalid';
            break;
        case AddVoucherErrorTypes.IncorrectPin:
            message += 'does not match the pin number entered';
            break;
        case AddVoucherErrorTypes.AlreadyRedeemed:
            message += 'has already been redeemed';
            break;
        case AddVoucherErrorTypes.VoucherExpired:
            message += 'has expired';
            break;
        case AddVoucherErrorTypes.VoucherAlreadyInOrder:
            message += 'has already been added to the order';
            break;
        case AddVoucherErrorTypes.NoTicketTypeAvailableForVoucher:
            message += 'has no matching ticket types for the selected showtime';
            break;
        case AddVoucherErrorTypes.OrderAlreadyHasMaximumAllowedTickets:
            message = 'Order already has the maximum allowed number of tickets.';
            break;
    }
    return message;
};
// Mocking API call
var handleVoucherDetails = function (voucherBarcode, voucherPin) { return __awaiter(_this, void 0, void 0, function () {
    var voucher, result;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                voucher = exampleVouchers.find(function (v) {
                    if (v.barcode !== voucherBarcode)
                        return false;
                    return voucherPin && voucherPin.length > 0
                        ? v.pin === voucherPin
                        : true;
                });
                if (!voucher)
                    return [2 /*return*/, Promise.reject("Voucher with barcode '" + voucherBarcode + "' and pin '" + voucherPin + "' not found in example data")];
                vouchersService.validateVoucher = function () { return Promise.resolve(voucher); };
                return [4 /*yield*/, services.vouchers.addVoucherToOrder(showtimeId, voucherBarcode)];
            case 1:
                result = _a.sent();
                if (result.success)
                    return [2 /*return*/, Promise.resolve()];
                return [2 /*return*/, Promise.reject(getErrorMessageForValidationError(voucherBarcode, result.validationError))];
        }
    });
}); };
var VoucherTestingHelper = /** @class */ (function (_super) {
    __extends(VoucherTestingHelper, _super);
    function VoucherTestingHelper() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    VoucherTestingHelper.prototype.render = function () {
        return (React.createElement("div", { style: { maxWidth: '960px', margin: '0 auto', padding: '15px' } },
            React.createElement("h1", null, "Voucher Testing Helper"),
            React.createElement(VoucherInputForm, { handleVoucherDetails: handleVoucherDetails, displayText: defaultVoucherInputFormDisplayText }),
            React.createElement(TicketPicker, { orderStore: orderStoreInstance, orderService: orderService, showtimeId: showtimeId, config: defaultTicketPickerConfig, displayText: defaultTicketPickerDisplayText, assets: defaultTicketPickerAssets })));
    };
    return VoucherTestingHelper;
}(React.Component));
export { VoucherTestingHelper };
//# sourceMappingURL=voucher-testing-helper.js.map