var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { orderService } from '../../../../api/src/services/order/order-service';
import { seatingService } from '../../../../api/src/services/seating/seating-service';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { orderStoreInstance } from '../../../../api/src/stores/order/order-store';
import { Logger } from '../../../../api/src/utils/logger';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { SeatPickerLegend } from './components/seat-picker-legend';
import { SeatPickerMessage, SeatPickerMessageType } from './components/seat-picker-message';
import { SeatPickerNotification } from './components/seat-picker-notification';
import { SeatPickerSkeleton } from './components/seat-picker-skeleton';
import { SeatPickerZoomController } from './components/seat-picker-zoom-controller';
import { mapSeatPickerSeatingOptions } from './mappers/seating-options-mapper';
import { getValidatedFriendSeats } from './utils/get-validated-friends-seats';
var SeatPicker = /** @class */ (function (_super) {
    __extends(SeatPicker, _super);
    function SeatPicker(props) {
        var _this = _super.call(this, props) || this;
        // TO DO IS THIS FUNCTION NECESSARY?
        _this.selectedSeatsDisposer = undefined;
        _this.handleNotificationClosed = function () {
            var seatingStore = _this.props.seatingStore;
            seatingStore.clearErrorMessages();
        };
        _this.handleSeatClicked = function (seat) {
            var _a = _this.props, seatingStore = _a.seatingStore, events = _a.events;
            seatingStore.seatClicked(seat);
            if (events && events.onSeatClicked)
                events.onSeatClicked(seat);
        };
        _this.setSeatLayoutData = function (seatLayout) {
            var _a = _this.props, config = _a.config, events = _a.events, seatingStore = _a.seatingStore;
            var friendSeats = config && config.friendSeats
                ? getValidatedFriendSeats(config.friendSeats)
                : undefined;
            seatingStore.set({ seatLayout: seatLayout, friendSeats: friendSeats, errors: [] }, mapSeatPickerSeatingOptions(config));
            if (events && events.onSeatLayoutLoaded) {
                events.onSeatLayoutLoaded(seatLayout);
            }
            if (events && events.onSelectedSeatsChanged) {
                _this.selectedSeatsDisposer = seatingStore.onSelectedSeatsChanged(events.onSelectedSeatsChanged);
            }
        };
        _this.setSeatLayoutDataFromApi = function () {
            var _a = _this.props, showtimeId = _a.showtimeId, events = _a.events;
            seatingService.getSeatLayout(showtimeId)
                .then(function (seatLayout) {
                _this.setState({ failedToLoadSeatLayout: false });
                _this.setSeatLayoutData(seatLayout);
            })
                .catch(function (error) {
                _this.setState({ failedToLoadSeatLayout: true });
                if (events && events.onLoadSeatLayoutFailed) {
                    events.onLoadSeatLayoutFailed(error);
                }
                Logger.error("Unable to load seat layout data for showtime " + showtimeId);
            });
        };
        _this.state = { failedToLoadSeatLayout: false };
        return _this;
    }
    SeatPicker.prototype.render = function () {
        var _a;
        var _b = this.props, seatingStore = _b.seatingStore, config = _b.config, displayText = _b.displayText, isSeatFirstOrdering = _b.isSeatFirstOrdering, assets = _b.assets;
        var failedToLoadSeatLayout = this.state.failedToLoadSeatLayout;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var _c = seatingStore.data, seatLayout = _c.seatLayout, errors = _c.errors, hasSeatLayoutData = seatingStore.hasSeatLayoutData;
        if (failedToLoadSeatLayout) {
            return (React.createElement(SeatPickerMessage, { messageType: SeatPickerMessageType.FailedToLoadData, displayText: displayText, assets: assets }));
        }
        if (!hasSeatLayoutData)
            return enableLoadingIndicator ? React.createElement(SeatPickerSkeleton, null) : null;
        var b = bemClassBuilderFactory('v-seat-picker');
        return (React.createElement("div", { className: b.block() },
            React.createElement("div", { className: b.element('legend', (_a = {}, _a[config.legend.position] = true, _a)) },
                React.createElement(SeatPickerLegend, { config: config, displayText: displayText })),
            React.createElement("div", { className: b.element('map') },
                React.createElement(SeatPickerZoomController, { seatLayout: seatLayout, config: config, displayText: displayText, onSeatClicked: this.handleSeatClicked, isSeatFirstOrdering: isSeatFirstOrdering })),
            (errors && errors.length > 0) &&
                React.createElement(SeatPickerNotification, { config: config, errors: errors, displayText: displayText, onNotificationClosed: this.handleNotificationClosed })));
    };
    SeatPicker.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, config = _a.config, showtimeId = _a.showtimeId, seatingStore = _a.seatingStore;
        // Data has been passed in, no need to load any data or pass in showtimeId
        if (config && config.seatLayoutData)
            return this.setSeatLayoutData(config.seatLayoutData);
        if (!showtimeId)
            throw new Error('Cannot render the Seat Picker widget without a showtimeId');
        // Load showtime if it is missing
        if (!orderStoreInstance.selectors.hasShowtime(showtimeId)) {
            orderService.addShowtimeById(showtimeId)
                .catch(function () {
                _this.setState({ failedToLoadSeatLayout: true });
                Logger.error("Unable to load seat layout data for showtime " + showtimeId);
            });
        }
        // Seat Layout has already been loaded, no need to reload
        if (seatingStore.hasSeatLayoutData)
            this.setSeatLayoutData(seatingStore.data.seatLayout);
        // Load Seat Layout from the API
        else
            this.setSeatLayoutDataFromApi();
    };
    SeatPicker.prototype.componentWillUnmount = function () {
        this.selectedSeatsDisposer && this.selectedSeatsDisposer();
    };
    SeatPicker = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], SeatPicker);
    return SeatPicker;
}(React.Component));
export { SeatPicker };
//# sourceMappingURL=seat-picker.js.map