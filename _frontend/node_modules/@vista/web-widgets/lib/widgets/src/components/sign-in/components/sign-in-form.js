var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as React from 'react';
import { assertUnreachableHelper } from '../../../../../api/src/utils/assertion-utils';
import { createUUID } from '../../../../../common/utils/uuid-utils';
import { isSuccessfullySignedIn } from '../../../../../types/loyalty/authentication/loyalty-auth';
import { SignInErrorCode } from '../../../../../types/loyalty/authentication/sign-in-error';
import { SignInType } from '../../../../../types/loyalty/authentication/sign-in-provider';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { Formatter } from '../../../utils/formatter';
import { convertToKebabCase } from '../../../utils/string-utils';
import { isEmptyOrWhitespace } from '../../../utils/validator';
import { Button, ButtonColor, ButtonSize } from '../../button/button';
import { Captcha } from '../../captcha/captcha';
import { Field } from '../../form/field/field';
import { FormElementStyle } from '../../form/form-element-style';
import { HelpText } from '../../form/help-text/help-text';
import { Input } from '../../form/input/input';
var SignInFormValidationError;
(function (SignInFormValidationError) {
    SignInFormValidationError[SignInFormValidationError["EmptyInput"] = 0] = "EmptyInput";
    SignInFormValidationError[SignInFormValidationError["UnverifiedRecaptcha"] = 1] = "UnverifiedRecaptcha";
    SignInFormValidationError[SignInFormValidationError["IncorrectEmailAddress"] = 2] = "IncorrectEmailAddress";
})(SignInFormValidationError || (SignInFormValidationError = {}));
var SignInForm = /** @class */ (function (_super) {
    __extends(SignInForm, _super);
    function SignInForm(props) {
        var _this = _super.call(this, props) || this;
        _this.captchaRef = React.createRef();
        _this.clearSignInFields = function () {
            _this.setState({
                userIdentifier: '',
                password: '',
                isLoading: false,
                error: undefined
            });
            var captcha = _this.captchaRef.current;
            captcha && captcha.reset();
        };
        _this.handleUsernameChange = function (userIdentifier) {
            _this.setState({ userIdentifier: userIdentifier });
        };
        _this.handlePasswordChange = function (password) {
            _this.setState({ password: password });
        };
        _this.handleCaptchaChanged = function (captchaResponse) {
            _this.setState({ captchaResponse: captchaResponse });
        };
        _this.handleSubmit = function (event) { return __awaiter(_this, void 0, void 0, function () {
            var displayText, validationResult, error, response;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        displayText = this.props.displayText;
                        event.preventDefault();
                        validationResult = this.validateSignInForm();
                        if (!validationResult.success) {
                            error = this.getValidationErrorMessage(validationResult.error, displayText);
                            this.setState({ error: error });
                            return [2 /*return*/];
                        }
                        this.setState({ error: undefined, isLoading: true });
                        return [4 /*yield*/, this.props.signIn(this.state.userIdentifier, this.state.password)
                                .catch(function (e) {
                                var error = _this.getSignInErrorMessage(e.code, displayText);
                                _this.setState({ error: error, isLoading: false });
                                return;
                            })];
                    case 1:
                        response = _a.sent();
                        if (isSuccessfullySignedIn(response)) {
                            this.setState({ error: undefined, isLoading: false });
                            return [2 /*return*/];
                        }
                        return [2 /*return*/];
                }
            });
        }); };
        _this.state = {
            isLoading: false,
            password: '',
            userIdentifier: '',
        };
        return _this;
    }
    SignInForm.prototype.render = function () {
        var _a = this.props, signInMethod = _a.signInMethod, captchaConfig = _a.captchaConfig, displayText = _a.displayText;
        var uuid = createUUID();
        var error = this.state.error;
        var b = bemClassBuilderFactory('v-sign-in-form');
        return (React.createElement("form", { className: b.block(), onSubmit: this.handleSubmit },
            React.createElement(Field, { id: "v-sign-in-form__identifier-" + convertToKebabCase(signInMethod) + "-" + uuid, label: this.getSignInMethodLabel(signInMethod, displayText), style: error ? FormElementStyle.Warning : FormElementStyle.Normal },
                React.createElement(Input, { placeholder: this.getSignInMethodPlaceHolder(signInMethod, displayText), disabled: this.state.isLoading, onChangeValue: this.handleUsernameChange, value: this.state.userIdentifier })),
            React.createElement(Field, { id: "v-sign-in-form__password-" + convertToKebabCase(signInMethod) + "-" + uuid, style: error ? FormElementStyle.Warning : FormElementStyle.Normal, label: displayText.fieldPasswordLabel },
                React.createElement(Input, { placeholder: displayText.fieldPasswordPlaceholder, disabled: this.state.isLoading, onChangeValue: this.handlePasswordChange, type: "password", value: this.state.password })),
            (captchaConfig && captchaConfig.siteKey) &&
                React.createElement("div", { className: b.element('captcha') },
                    React.createElement(Captcha, { ref: this.captchaRef, config: captchaConfig, onValueChanged: this.handleCaptchaChanged })),
            error &&
                React.createElement("div", { className: b.element('validation') },
                    React.createElement(HelpText, { style: FormElementStyle.Warning }, error)),
            React.createElement("div", { className: b.element('button') },
                React.createElement(Button, { color: ButtonColor.Primary, size: ButtonSize.Medium, loading: this.state.isLoading, type: "submit" }, displayText.buttonSignInLabel))));
    };
    SignInForm.prototype.validateInputFieldsNotEmpty = function () {
        var _a = this.state, userIdentifier = _a.userIdentifier, password = _a.password;
        return !isEmptyOrWhitespace(userIdentifier) && !isEmptyOrWhitespace(password);
    };
    SignInForm.prototype.validateCaptcha = function () {
        if (!this.props.captchaConfig || !this.props.captchaConfig.siteKey)
            return true;
        return !!this.state.captchaResponse;
    };
    SignInForm.prototype.validateSignInForm = function () {
        if (!this.validateInputFieldsNotEmpty()) {
            return { success: false, error: SignInFormValidationError.EmptyInput };
        }
        if (this.props.captchaConfig && !this.validateCaptcha()) {
            return { success: false, error: SignInFormValidationError.UnverifiedRecaptcha };
        }
        return { success: true };
    };
    SignInForm.prototype.getValidationErrorMessage = function (errorType, displayText) {
        switch (errorType) {
            case SignInFormValidationError.EmptyInput:
                return Formatter.Instance.template(displayText.errorRequiredFieldMissingInputMessage, {
                    signInMethod: this.getSignInMethodLabel(this.props.signInMethod, displayText)
                });
            case SignInFormValidationError.UnverifiedRecaptcha:
                return displayText.errorMissingCaptchaVerificationMessage;
        }
        return '';
    };
    SignInForm.prototype.getSignInErrorMessage = function (errorCode, displayText) {
        if (errorCode === void 0) { errorCode = SignInErrorCode.FailedSignIn; }
        switch (errorCode) {
            case SignInErrorCode.FailedSignIn:
                return displayText.errorApiFailedLoginMessage;
            case SignInErrorCode.IncorrectSignInCredentials:
                return displayText.errorApiIncorrectLoginCredentialsMessage;
        }
        return assertUnreachableHelper('Invalid sign in error type')(errorCode);
    };
    SignInForm.prototype.getSignInMethodLabel = function (signInMethod, displayText) {
        return signInMethod === SignInType.EmailPassword ? displayText.fieldEmailLabel : displayText.fieldNameLabel;
    };
    SignInForm.prototype.getSignInMethodPlaceHolder = function (signInMethod, displayText) {
        return signInMethod === SignInType.EmailPassword ? displayText.fieldEmailPlaceholder : displayText.fieldNamePlaceholder;
    };
    return SignInForm;
}(React.Component));
export { SignInForm };
//# sourceMappingURL=sign-in-form.js.map