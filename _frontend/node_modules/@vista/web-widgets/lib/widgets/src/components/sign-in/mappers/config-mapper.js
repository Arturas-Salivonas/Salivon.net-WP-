import { Validator } from '../../../../../api/src/utils/validator';
import { SignInType } from '../../../../../types/loyalty/authentication/sign-in-provider';
import { SignInWidgetDisplayMode } from '../types/config';
export function getValidSignInWidgetConfig(signInWidgetConfig) {
    if (signInWidgetConfig === undefined)
        return undefined;
    return {
        displayMode: signInWidgetConfig.displayMode ? getValidSignInDisplayMode(signInWidgetConfig.displayMode) : undefined,
        providers: signInWidgetConfig.providers ? getValidSignInOptions(signInWidgetConfig.providers) : undefined,
        fetchMemberDetailsOnSignIn: signInWidgetConfig.fetchMemberDetailsOnSignIn !== undefined ? signInWidgetConfig.fetchMemberDetailsOnSignIn : true
    };
}
function getValidSignInDisplayMode(signInDisplayMode) {
    if (Object.keys(SignInWidgetDisplayMode).map(function (key) { return SignInWidgetDisplayMode[key]; }).includes(signInDisplayMode))
        return signInDisplayMode;
    return undefined;
}
function getValidSignInOptions(signInOptions) {
    return signInOptions.filter(isValidSignInOption);
}
function isValidSignInOption(signInOption) {
    if (!signInOption)
        return false;
    var nameValidator = new Validator().ofType('string').minLength(0);
    if (!nameValidator.validate(signInOption.name, 'SignInOption name'))
        return false;
    if (!Object.keys(SignInType).map(function (key) { return SignInType[key]; }).includes(signInOption.type))
        return false;
    var signInValidator = new Validator().ofType('function');
    if (signInOption.type !== SignInType.SocialAccount)
        signInValidator = signInValidator.allowUndefined();
    if (!signInValidator.validate(signInOption.signIn, 'SignInOption signIn'))
        return false;
    return true;
}
//# sourceMappingURL=config-mapper.js.map