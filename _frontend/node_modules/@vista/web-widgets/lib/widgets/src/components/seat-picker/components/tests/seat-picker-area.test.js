import * as React from 'react';
import { createSingleRowSeatLayout } from '../../../../../../api/src/stores/seating/helpers/test/test-utils';
import { SeatAvailability } from '../../../../../../types/seating/seat-availability';
import { compareToSnapshot } from '../../../../tests/compare-to-snapshot';
import { defaultSeatPickerConfig, SeatPickerWidgetScreenPosition } from '../../types/config';
import { SeatPickerArea } from '../seat-picker-area';
var seatLayout = createSingleRowSeatLayout(function (row) { return row
    .addSeat({ availability: SeatAvailability.Available, seatLabel: '1' })
    .addSeat({ availability: SeatAvailability.Available, seatLabel: '2' })
    .addSeat({ availability: SeatAvailability.Available, seatLabel: '3' }); });
var mapBoundary = {
    height: 100,
    left: 0,
    top: 0,
    width: 100
};
// tslint:disable-next-line:no-empty
var onSeatClicked = function () { };
// TODO: SeatPickerArea and SeatPickerSeat test snapshots contain NaN in svg/path elements
describe('SeatPickerArea', function () {
    var customConfig;
    var area;
    var areaCategory;
    beforeEach(function () {
        customConfig = JSON.parse(JSON.stringify(defaultSeatPickerConfig));
        area = JSON.parse(JSON.stringify(seatLayout.areas[0]));
        areaCategory = JSON.parse(JSON.stringify(seatLayout.areaCategories[0]));
    });
    it('should render correctly for a non-inverted seat map', function () {
        customConfig.screen.position = SeatPickerWidgetScreenPosition.Bottom;
        compareToSnapshot(React.createElement(SeatPickerArea, { limitSeatSelectionByAreaCategoryAllocation: false, area: area, areaCategory: areaCategory, scaleFactor: 1, config: customConfig, mapBoundary: mapBoundary, onSeatClicked: onSeatClicked }));
    });
    it('should render correctly for an inverted seat map', function () {
        customConfig.screen.position = SeatPickerWidgetScreenPosition.Top;
        compareToSnapshot(React.createElement(SeatPickerArea, { limitSeatSelectionByAreaCategoryAllocation: false, area: area, areaCategory: areaCategory, scaleFactor: 1, config: customConfig, mapBoundary: mapBoundary, onSeatClicked: onSeatClicked }));
    });
    it('should render area labels correctly for a non-inverted seat map', function () {
        customConfig.areaLabels = {
            margin: 10,
            show: true
        };
        customConfig.screen.position = SeatPickerWidgetScreenPosition.Bottom;
        compareToSnapshot(React.createElement(SeatPickerArea, { limitSeatSelectionByAreaCategoryAllocation: false, area: area, areaCategory: areaCategory, scaleFactor: 1, config: customConfig, mapBoundary: mapBoundary, onSeatClicked: onSeatClicked }));
    });
    it('should render area labels correctly for an inverted seat map', function () {
        customConfig.areaLabels = {
            margin: 10,
            show: true
        };
        customConfig.screen.position = SeatPickerWidgetScreenPosition.Top;
        compareToSnapshot(React.createElement(SeatPickerArea, { limitSeatSelectionByAreaCategoryAllocation: false, area: area, areaCategory: areaCategory, scaleFactor: 1, config: customConfig, mapBoundary: mapBoundary, onSeatClicked: onSeatClicked }));
    });
});
//# sourceMappingURL=seat-picker-area.test.js.map