var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import Glider from 'glider-js';
import * as React from 'react';
import { deviceHasTouch } from '../../dom/device-has-touch';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { Icon } from '../icon/icon';
var defaultIcons = {
    prevButton: 'chevron-left',
    nextButton: 'chevron-right'
};
var Carousel = /** @class */ (function (_super) {
    __extends(Carousel, _super);
    function Carousel() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.viewport = React.createRef();
        _this.nextButton = React.createRef();
        _this.prevButton = React.createRef();
        _this.dots = React.createRef();
        return _this;
    }
    Carousel.prototype.render = function () {
        var _a = this.props, icons = _a.icons, showDots = _a.showDots;
        var mergedIcons = __assign({}, defaultIcons, icons);
        var b = bemClassBuilderFactory('v-carousel');
        this.positionGlider();
        var hasTouch = deviceHasTouch();
        return (React.createElement("div", { className: b.block() },
            React.createElement("div", { className: b.element('wrapper') },
                !hasTouch &&
                    React.createElement("button", { role: "button", className: b.element('button', { prev: true }), ref: this.prevButton },
                        React.createElement(Icon, { name: mergedIcons.prevButton })),
                React.createElement("div", { className: b.element('viewport'), ref: this.viewport },
                    React.createElement("ul", { className: b.element('track') }, this.props.children)),
                !hasTouch &&
                    React.createElement("button", { role: "button", className: b.element('button', { next: true }), ref: this.nextButton },
                        React.createElement(Icon, { name: mergedIcons.nextButton }))),
            showDots !== false &&
                React.createElement("div", { role: "tablist", className: b.element('dots'), ref: this.dots })));
    };
    Carousel.prototype.componentDidMount = function () {
        var _this = this;
        if (!this.viewport.current)
            return;
        // Initialise on the next animation frame to ensure that all styles have loaded
        requestAnimationFrame(function () {
            _this.glider = new Glider(_this.viewport.current, _this.getGliderOptions(_this.props));
        });
    };
    Carousel.prototype.componentDidUpdate = function () {
        if (this.glider && this.props.refreshOnUpdate) {
            this.glider.setOption(this.getGliderOptions(this.props), true);
            this.glider.refresh(true);
            this.glider.scrollTo(0, 0); // reset the scroll position
        }
    };
    Carousel.prototype.componentWillUnmount = function () {
        if (this.glider)
            this.glider.destroy();
    };
    Carousel.prototype.getGliderOptions = function (props) {
        var settings = props.settings, showDots = props.showDots;
        return __assign({ arrows: {
                next: this.nextButton.current,
                prev: this.prevButton.current
            }, dots: showDots !== false && this.dots.current, dragVelocity: 1, addTrack: false }, settings);
    };
    Carousel.prototype.positionGlider = function () {
        if (!this.glider)
            return;
        if (this.props.scrollToSlide) {
            this.glider.scrollItem(this.props.scrollToSlide - 1);
        }
        else if (this.props.scrollToPage) {
            this.glider.scrollItem(this.props.scrollToPage - 1, true);
        }
    };
    return Carousel;
}(React.Component));
export { Carousel };
//# sourceMappingURL=carousel.js.map