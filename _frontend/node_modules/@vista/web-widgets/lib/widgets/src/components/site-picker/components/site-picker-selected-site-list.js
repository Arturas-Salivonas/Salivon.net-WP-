var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { getTranslatedTextOrDefault } from '../../../utils/get-translated-text';
import { Tags } from '../../tags/tags';
var SitePickerSelectedSiteList = /** @class */ (function (_super) {
    __extends(SitePickerSelectedSiteList, _super);
    function SitePickerSelectedSiteList() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.getTagValues = function (sites) {
            return sites.map(_this.mapSiteToTagValue).sort(function (a, b) {
                if (!a.label || !b.label)
                    return 0;
                if (a.label < b.label) {
                    return -1;
                }
                if (a.label > b.label) {
                    return 1;
                }
                return 0;
            });
        };
        return _this;
    }
    SitePickerSelectedSiteList.prototype.render = function () {
        var _a = this.props, sites = _a.sites, onSiteClicked = _a.onSiteClicked;
        if (sites.length === 0)
            return null;
        var b = bemClassBuilderFactory('v-site-picker-selected-site-list');
        return (React.createElement("div", { className: b.block() },
            React.createElement(Tags, { tags: this.getTagValues(sites), onTagClicked: onSiteClicked })));
    };
    SitePickerSelectedSiteList.prototype.mapSiteToTagValue = function (site) {
        return {
            id: site.id,
            label: getTranslatedTextOrDefault(site, 'name'),
            buttonIcon: 'cross'
        };
    };
    return SitePickerSelectedSiteList;
}(React.Component));
export { SitePickerSelectedSiteList };
//# sourceMappingURL=site-picker-selected-site-list.js.map