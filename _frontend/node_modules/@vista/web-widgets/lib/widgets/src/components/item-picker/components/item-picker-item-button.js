var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { ItemModelType } from '../../../../../types/sales-data/item-models/item-model';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { CdnClient } from '../../../utils/cdn-client';
import { Formatter } from '../../../utils/formatter';
import { getTranslatedTextOrDefault } from '../../../utils/get-translated-text';
var ItemPickerItemButton = /** @class */ (function (_super) {
    __extends(ItemPickerItemButton, _super);
    function ItemPickerItemButton() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.handleClick = function () {
            var _a = _this.props, onClick = _a.onClick, itemButton = _a.itemButton, salesDataStore = _a.salesDataStore;
            var getItemModelById = salesDataStore.selectors.getItemModelById;
            var itemModel = getItemModelById(itemButton.itemModelId);
            if (!itemModel)
                return;
            onClick(itemModel);
        };
        return _this;
    }
    ItemPickerItemButton.prototype.render = function () {
        var _a = this.props, salesDataStore = _a.salesDataStore, orderStore = _a.orderStore, itemButton = _a.itemButton, displayText = _a.displayText;
        var getItemModelById = salesDataStore.selectors.getItemModelById;
        var b = bemClassBuilderFactory('v-item-picker-item-button');
        var itemModelId = itemButton.itemModelId;
        var itemModel = getItemModelById(itemModelId);
        if (!itemModel)
            return null;
        if (itemModel.type !== ItemModelType.Normal)
            return null; // we only support basic items currently
        var quantity = orderStore.selectors.getSelectedItemModelQuantity(itemModelId);
        // TODO: The item id currently comes prefixed with the siteId to make it unique, so we need to
        // strip that away before constructing the imageUrl
        var itemModelIdComponents = itemModelId.split('-');
        var strippedItemModelId = itemModelIdComponents[itemModelIdComponents.length - 1];
        var imageUrl = CdnClient.Instance.item(strippedItemModelId).image();
        var description = getTranslatedTextOrDefault(itemModel, 'description');
        var extendedDescription = getTranslatedTextOrDefault(itemModel, 'extendedDescription');
        var price = Formatter.Instance.currency(itemModel.price);
        return (React.createElement("li", { className: b.block() },
            React.createElement("button", { className: b.element('button'), onClick: this.handleClick },
                React.createElement("div", { className: b.element('wrapper') },
                    React.createElement("div", { className: b.element('image'), role: "img", style: { backgroundImage: "url(" + imageUrl + ")" } },
                        React.createElement("div", { className: b.element('hover-overlay') },
                            React.createElement("span", { className: b.element('add-to-order-label') }, displayText.addToOrderLabel)),
                        React.createElement("span", { className: b.element('quantity', { isSelected: quantity > 0 }) }, quantity)),
                    React.createElement("div", { className: b.element('details') },
                        React.createElement("h4", { className: b.element('description') }, description),
                        React.createElement("span", { className: b.element('price') }, price),
                        (extendedDescription && extendedDescription.length > 0) &&
                            React.createElement("p", { className: b.element('extended-description') }, extendedDescription))))));
    };
    ItemPickerItemButton = __decorate([
        observer
    ], ItemPickerItemButton);
    return ItemPickerItemButton;
}(React.Component));
export { ItemPickerItemButton };
//# sourceMappingURL=item-picker-item-button.js.map