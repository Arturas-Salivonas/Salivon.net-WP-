var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { fieldValidator } from '../../../../../api/src/utils/field-validator';
import { Validator } from '../../../../../api/src/utils/validator';
import { defaultCustomerDetailsFormDisplayText } from '../types/display-text';
export function mapCustomerDetailsFormDisplayText(displayText) {
    if (!displayText)
        return defaultCustomerDetailsFormDisplayText;
    var valid = new Validator().ofType('object').validate(displayText, 'Customer details form display text');
    if (!valid)
        return defaultCustomerDetailsFormDisplayText;
    var validatedDisplayText = getValidatedCustomerDetailsFormDisplayText(displayText);
    return __assign({}, defaultCustomerDetailsFormDisplayText, validatedDisplayText);
}
function getValidatedCustomerDetailsFormDisplayText(displayText) {
    var validateField = fieldValidator(displayText);
    var validator = new Validator().ofType('string').minLength(1);
    var nullableValidator = new Validator().ofType('string').minLength(1).allowNull().allowUndefined();
    validateField(validator, 'fieldGivenNameLabel', 'Customer details form given name field label');
    validateField(nullableValidator, 'fieldGivenNamePlaceholder', 'Customer details form given name field placeholder');
    validateField(validator, 'fieldFamilyNameLabel', 'Customer details form family name field label');
    validateField(nullableValidator, 'fieldFamilyNamePlaceholder', 'Customer details form family name field placeholder');
    validateField(validator, 'fieldEmailLabel', 'Customer details form email field label');
    validateField(nullableValidator, 'fieldEmailPlaceholder', 'Customer details form email field placeholder');
    validateField(validator, 'fieldPhoneLabel', 'Customer details form phone field label');
    validateField(nullableValidator, 'fieldPhonePlaceholder', 'Customer details form phone field placeholder');
    validateField(validator, 'errorGivenNameRequiredMessage', 'Customer details form given name required error message');
    validateField(validator, 'errorGivenNameFormatMessage', 'Customer details form given name format error message');
    validateField(validator, 'errorGivenNameLengthMessage', 'Customer details form given name length error message');
    validateField(validator, 'errorFamilyNameRequiredMessage', 'Customer details form family name required error message');
    validateField(validator, 'errorFamilyNameFormatMessage', 'Customer details form family name format error message');
    validateField(validator, 'errorFamilyNameLengthMessage', 'Customer details form family name length error message');
    validateField(validator, 'errorPhoneRequiredMessage', 'Customer details form phone required error message');
    validateField(validator, 'errorPhoneFormatMessage', 'Customer details form phone format error message');
    validateField(validator, 'errorPhoneLengthMessage', 'Customer details form phone length error message');
    validateField(validator, 'errorEmailRequiredMessage', 'Customer details form email required error message');
    validateField(validator, 'errorEmailFormatMessage', 'Customer details form email format error message');
    validateField(validator, 'errorEmailLengthMessage', 'Customer details form email length error message');
    return displayText;
}
//# sourceMappingURL=display-text-mapper.js.map