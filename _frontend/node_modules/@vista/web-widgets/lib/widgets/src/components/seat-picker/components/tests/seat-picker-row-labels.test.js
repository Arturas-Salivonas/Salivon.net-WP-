var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { compareToSnapshot } from '../../../../tests/compare-to-snapshot';
import { SeatPickerWidgetScreenPosition } from '../../types/config';
import { SeatPickerRowLabels } from '../seat-picker-row-labels';
describe('SeatPickerRowLabels', function () {
    it('should render a set of seat picker row labels for a non-inverted seat map', function () {
        var area = {
            top: 10,
            left: 15,
            width: 25,
            height: 50,
            rowCount: 2,
            columnCount: 1,
            rows: [
                { rowLabel: 'A', seats: [{ position: { rowIndex: 2 } }] },
                { rowLabel: 'B', seats: [{ position: { rowIndex: 1 } }] }
            ]
        };
        var seatLayout = {
            areas: [area]
        };
        var scaleFactor = 10;
        var config = {
            screen: {
                height: 25,
                margin: 5,
                position: SeatPickerWidgetScreenPosition.Bottom
            },
            seats: { margin: 5 },
            rowLabels: {
                size: 20,
                margin: 6
            }
        };
        var boundary = {
            top: 0,
            left: 0,
            width: 40,
            height: 60
        };
        var props = {
            seatLayout: seatLayout,
            scaleFactor: scaleFactor,
            config: config,
            mapBoundary: boundary,
            dimensions: {
                width: 25,
                height: 200
            }
        };
        compareToSnapshot(React.createElement(SeatPickerRowLabels, __assign({}, props)));
    });
    it('should render a set of seat picker row labels for an inverted seat map', function () {
        var area = {
            top: 10,
            left: 15,
            width: 25,
            height: 50,
            rowCount: 2,
            columnCount: 1,
            rows: [
                { rowLabel: 'A', seats: [{ position: { rowIndex: 2 } }] },
                { rowLabel: 'B', seats: [{ position: { rowIndex: 1 } }] }
            ]
        };
        var seatLayout = {
            areas: [area]
        };
        var scaleFactor = 10;
        var config = {
            screen: {
                height: 25,
                margin: 5,
                position: SeatPickerWidgetScreenPosition.Top
            },
            seats: { margin: 5 },
            rowLabels: {
                size: 20,
                margin: 6
            }
        };
        var boundary = {
            top: 0,
            left: 0,
            width: 40,
            height: 60
        };
        var props = {
            seatLayout: seatLayout,
            scaleFactor: scaleFactor,
            config: config,
            mapBoundary: boundary,
            dimensions: {
                width: 25,
                height: 200
            }
        };
        compareToSnapshot(React.createElement(SeatPickerRowLabels, __assign({}, props)));
    });
});
//# sourceMappingURL=seat-picker-row-labels.test.js.map