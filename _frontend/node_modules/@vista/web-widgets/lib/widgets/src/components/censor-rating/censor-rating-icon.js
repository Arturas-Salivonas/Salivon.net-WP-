var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { CdnClient } from '../../utils/cdn-client';
import { getTranslatedTextOrDefault } from '../../utils/get-translated-text';
var CensorRatingIcon = /** @class */ (function (_super) {
    __extends(CensorRatingIcon, _super);
    function CensorRatingIcon(props) {
        var _this = _super.call(this, props) || this;
        _this.onError = function () {
            _this.setState({ isValidURL: false });
        };
        _this.state = { isValidURL: true };
        return _this;
    }
    CensorRatingIcon.prototype.render = function () {
        var censorRating = this.props.censorRating;
        if (!censorRating)
            return null;
        var b = bemClassBuilderFactory('v-censor-rating-icon');
        var classification = getTranslatedTextOrDefault(censorRating, 'classification');
        var censorRatingIconUrl = CdnClient.Instance.censorRating(censorRating.id).icon({ allowPlaceHolder: false });
        return (React.createElement("span", { className: this.getCensorRatingIconClass(b, this.props) }, this.state.isValidURL ? React.createElement("img", { onError: this.onError, className: b.element('img'), src: censorRatingIconUrl, alt: classification })
            : React.createElement("span", { className: b.element('classification') }, classification)));
    };
    CensorRatingIcon.prototype.getCensorRatingIconClass = function (b, props) {
        var censorRatingIconClass = b.block();
        return props.className ? props.className + " " + censorRatingIconClass : censorRatingIconClass;
    };
    return CensorRatingIcon;
}(React.Component));
export { CensorRatingIcon };
//# sourceMappingURL=censor-rating-icon.js.map