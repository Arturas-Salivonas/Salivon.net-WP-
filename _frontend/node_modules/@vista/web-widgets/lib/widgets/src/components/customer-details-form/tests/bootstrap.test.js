var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { orderStoreInstance } from '../../../../../api/src/stores/order/order-store';
import { defaultConfigurationStoreData } from '../../../../../types/stores/configuration-store-data';
import * as createComponent from '../../../bootstrap/create-component';
import { customerDetailsForm } from '../bootstrap';
import { mapCustomerDetailsFormConfig } from '../mappers/config-mapper';
import { defaultCustomerDetailsFormConfig } from '../types/config';
import { defaultCustomerDetailsFormDisplayText } from '../types/display-text';
describe('customerDetailsForm bootstrap', function () {
    var component = { _component: {} };
    var createComponentSpy = jest.spyOn(createComponent, 'createComponent').mockReturnValue(component);
    afterEach(function () { return jest.clearAllMocks(); });
    it('calls the create component function', function () {
        expect.assertions(2);
        var response = customerDetailsForm({
            selector: 'test',
        });
        expect(createComponentSpy).toBeCalledWith('test', expect.anything(), {
            orderStore: orderStoreInstance,
            config: mapCustomerDetailsFormConfig(defaultCustomerDetailsFormConfig),
            validationConfig: defaultConfigurationStoreData.customerDetails.validation,
            displayText: defaultCustomerDetailsFormDisplayText,
            onSubmit: undefined
        });
        var expectedResponse = __assign({}, component, { validateCustomerDetails: expect.any(Function), saveCustomerDetails: expect.any(Function) });
        expect(response).toEqual(expectedResponse);
    });
    it('passes onSubmit callback if supplied', function () {
        expect.assertions(1);
        var submitEvent = function () { return undefined; };
        customerDetailsForm({
            selector: 'test',
            events: {
                onSubmit: submitEvent,
            },
        });
        expect(createComponentSpy.mock.calls[0][2].onSubmit).toBe(submitEvent);
    });
});
//# sourceMappingURL=bootstrap.test.js.map