var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { getNotLoadedFetchedData, isFetchedDataSuccess } from '../../../../api/src/stores/cache-tools/fetched-data';
import { compactMap } from '../../../../api/src/utils/array-utils';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { getBusinessDateFromDate } from '../../utils/business-date-utils';
import { Button, ButtonColor, ButtonSize } from '../button/button';
import { DatePicker } from '../date-picker/date-picker';
import { ShowtimePickerFilmList } from './components/showtime-picker-film-list';
import { ShowtimePickerMessage, ShowtimePickerMessageType } from './components/showtime-picker-message';
import { getShowtimesQuery, handleActionButtonClicked, handleApiError, handleDateSelected, handleShowtimeClicked, loadScreeningDates, loadShowtimes, validateShowtimePickerData } from './utilities/showtime-picker-utilities';
var ShowtimePicker = /** @class */ (function (_super) {
    __extends(ShowtimePicker, _super);
    function ShowtimePicker(props) {
        var _this = _super.call(this, props) || this;
        /**
         * This method can be used to reload the screening dates and showtimes.
         * Call this method when the showtime picker filters (filmIds and siteIds) have been changed outside the widget.
         */
        _this.reloadData = function () {
            var _a = _this.props, browsingService = _a.browsingService, browsingStore = _a.browsingStore, filmIds = _a.filmIds, siteIds = _a.siteIds;
            var query = getShowtimesQuery(browsingStore, filmIds, siteIds);
            _this.updateShowtimePickerErrorMessage(undefined);
            Promise.all([
                loadScreeningDates(browsingService, query).then(function () { _this.attemptSetSelectedDateIfNotSet(); }),
                loadShowtimes(browsingService, query, _this.state.selectedBusinessDate)
            ]).catch(function (err) { return _this.updateShowtimePickerErrorMessage(handleApiError(err)); });
        };
        /**
         * Action performed when a showtime button is clicked.
         */
        _this.handleShowtimeClicked = function (showtime) { return __awaiter(_this, void 0, void 0, function () {
            var _a, orderStore, configurationStore, orderService, events;
            var _this = this;
            return __generator(this, function (_b) {
                _a = this.props, orderStore = _a.orderStore, configurationStore = _a.configurationStore, orderService = _a.orderService, events = _a.events;
                handleShowtimeClicked(showtime, orderStore, configurationStore, orderService, events)
                    .catch(function (err) { return _this.updateShowtimePickerErrorMessage(handleApiError(err)); });
                return [2 /*return*/];
            });
        }); };
        /**
         * Action performed when a date is selected in the date picker
         */
        _this.handleDateClicked = function (businessDate) { return __awaiter(_this, void 0, void 0, function () {
            var _a, filmIds, siteIds, browsingStore, browsingService, query;
            var _this = this;
            return __generator(this, function (_b) {
                _a = this.props, filmIds = _a.filmIds, siteIds = _a.siteIds, browsingStore = _a.browsingStore, browsingService = _a.browsingService;
                query = getShowtimesQuery(browsingStore, filmIds, siteIds);
                this.updateShowtimePickerErrorMessage(undefined);
                // Update Widget State
                this.setState({ selectedBusinessDate: businessDate });
                handleDateSelected(browsingService, browsingStore, query, businessDate)
                    .catch(function (err) { return _this.updateShowtimePickerErrorMessage(handleApiError(err)); });
                return [2 /*return*/];
            });
        }); };
        /**
         * Action performed when the action button is clicked.
         */
        _this.handleActionButtonClicked = function () {
            handleActionButtonClicked(_this.props.events);
        };
        /**
         * If selectedBusinessDate is already set, or the data in the browsing store is not available, this method does nothing.
         */
        _this.attemptSetSelectedDateIfNotSet = function () {
            if (_this.state.selectedBusinessDate === undefined) {
                var firstBusinessDate = getBusinessDateFromDate(new Date(Date.now()));
                _this.setState({ selectedBusinessDate: firstBusinessDate });
                _this.updateShowtimePickerErrorMessage(undefined);
                _this.handleDateClicked(firstBusinessDate)
                    .catch(function (err) { return _this.updateShowtimePickerErrorMessage(handleApiError(err)); });
            }
        };
        _this.updateShowtimePickerErrorMessage = function (newErrorMessage) {
            _this.setState({ apiErrorMessageType: newErrorMessage });
        };
        _this.state = __assign({}, _this.state, { selectedBusinessDate: props.selectedBusinessDate });
        return _this;
    }
    ShowtimePicker.prototype.render = function () {
        var _a = this.props, filmIds = _a.filmIds, siteIds = _a.siteIds, browsingStore = _a.browsingStore, config = _a.config, displayText = _a.displayText, assets = _a.assets;
        // Get Data for Widget
        var showtimesQuery = getShowtimesQuery(browsingStore, filmIds, siteIds);
        var screeningDatesForQuery = browsingStore.selectors.getScreeningDatesForQuery(showtimesQuery);
        var datePickerActiveDates = isFetchedDataSuccess(screeningDatesForQuery) ?
            screeningDatesForQuery.payload.map(function (date) { return date.businessDate; }) :
            [];
        var showtimesDataForDate = this.state.selectedBusinessDate ?
            browsingStore.selectors.getShowtimesForQueryOnBusinessDate(showtimesQuery, this.state.selectedBusinessDate) :
            getNotLoadedFetchedData();
        var showtimes = isFetchedDataSuccess(showtimesDataForDate) ?
            compactMap(showtimesDataForDate.payload, function (id) { return browsingStore.data.showtimesById.get(id); }) :
            [];
        var filmIdsToDisplay = filmIds && filmIds.length > 0 ? filmIds : Array.from(new Set((showtimes || []).map(function (s) { return s.filmId; })));
        // Check for invalid states - e.g. empty data, or no sites selected.
        var invalidState = this.state.apiErrorMessageType ?
            { messageType: this.state.apiErrorMessageType, messageFilmTitle: undefined } :
            validateShowtimePickerData(screeningDatesForQuery, showtimesDataForDate, showtimesQuery, browsingStore, config);
        var hideDatePicker = invalidState && (invalidState.messageType === ShowtimePickerMessageType.FailedToLoadData ||
            invalidState.messageType === ShowtimePickerMessageType.NoCinemasSelected ||
            invalidState.messageType === ShowtimePickerMessageType.NoShowtimesAllDates);
        var hideActionButton = config.actionButton.show === false ||
            (invalidState && invalidState.messageType === ShowtimePickerMessageType.FailedToLoadData);
        var b = bemClassBuilderFactory('v-showtime-picker');
        var actionButton = !hideActionButton && (React.createElement(Button, { className: b.element('action-button'), label: displayText.actionButtonLabel, color: ButtonColor.Primary, size: ButtonSize.Large, onClick: this.handleActionButtonClicked }));
        return (React.createElement("div", { className: b.block() },
            !hideDatePicker &&
                React.createElement(DatePicker, { loadingState: screeningDatesForQuery.loadingState, businessDates: datePickerActiveDates, selectedBusinessDate: this.state.selectedBusinessDate, onDateClicked: this.handleDateClicked }),
            invalidState ?
                React.createElement(ShowtimePickerMessage, { messageType: invalidState.messageType, displayText: displayText, assets: assets, selectedFilmTitle: invalidState.messageFilmTitle }, actionButton)
                :
                    React.createElement(React.Fragment, null,
                        React.createElement(ShowtimePickerFilmList, { filmIds: filmIdsToDisplay, siteIds: showtimesQuery.siteIds, showtimesData: showtimesDataForDate, onShowtimeClicked: this.handleShowtimeClicked, browsingStore: browsingStore, config: config, displayText: displayText }),
                        actionButton)));
    };
    ShowtimePicker.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, browsingService = _a.browsingService, browsingStore = _a.browsingStore, filmIds = _a.filmIds, siteIds = _a.siteIds;
        var query = getShowtimesQuery(browsingStore, filmIds, siteIds);
        this.updateShowtimePickerErrorMessage(undefined);
        Promise.all([
            loadScreeningDates(browsingService, query).then(function () { _this.attemptSetSelectedDateIfNotSet(); }),
            loadShowtimes(browsingService, query, this.state.selectedBusinessDate)
        ]).catch(function (err) { return _this.updateShowtimePickerErrorMessage(handleApiError(err)); });
    };
    ShowtimePicker = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], ShowtimePicker);
    return ShowtimePicker;
}(React.Component));
export { ShowtimePicker };
//# sourceMappingURL=showtime-picker.js.map