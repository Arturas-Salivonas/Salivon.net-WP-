var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { services } from '../../../../../api/src/services/services';
import { browsingStoreInstance } from '../../../../../api/src/stores/browsing/browsing-store';
import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
import { orderStoreInstance } from '../../../../../api/src/stores/order/order-store';
import { seatingStoreInstance } from '../../../../../api/src/stores/seating/seating-store';
import { exampleOrder } from '../../../../../example-data/order/order';
import { exampleOrderShowtime } from '../../../../../example-data/order/order-showtime';
// import * as createComponent from '../../../bootstrap/create-component';
// import { runAllPromises } from '../../../tests/run-all-promises';
import { seatPicker } from '../bootstrap';
// import { defaultSeatPickerConfig } from '../types/config';
// import { defaultSeatPickerDisplayText } from '../types/display-text';
describe('seatPicker bootstrap', function () {
    var onLoadSeatLayoutFailedMock = jest.fn();
    var onSeatLayoutLoadedMock = jest.fn();
    var onSelectedSeatsChangedMock = jest.fn();
    var bootstrap = {
        selector: 'test',
        showtimeId: exampleOrderShowtime.showtimeId,
        events: {
            onLoadSeatLayoutFailed: onLoadSeatLayoutFailedMock,
            onSeatLayoutLoaded: onSeatLayoutLoadedMock,
            onSelectedSeatsChanged: onSelectedSeatsChangedMock
        }
    };
    // const component = { _component: {}, unmount: () => undefined };
    // const createComponentSpy = jest.spyOn(createComponent, 'createComponent').mockReturnValue(component);
    // const saveSeatSelectionSpy = jest.spyOn(services.order, 'saveSeatSelection').mockReturnValue(undefined);
    jest.spyOn(seatingStoreInstance, 'setData');
    jest.spyOn(browsingStoreInstance.selectors, 'getSiteById').mockReturnValue({});
    jest.spyOn(browsingStoreInstance.selectors, 'getFilmById').mockReturnValue({});
    services.salesData.loadTicketTypesForShowtime = jest.fn().mockReturnValue([]);
    beforeAll(function () {
        orderStoreInstance.actions.setOrderData(exampleOrder);
    });
    afterEach(function () {
        onSelectedSeatsChangedMock = jest.fn();
        bootstrap.events.onSelectedSeatsChanged = onSelectedSeatsChangedMock;
        jest.clearAllMocks();
        configurationStoreInstance.flush();
        seatingStoreInstance.flush();
    });
    // it('calls the create component function and returns the correct response', () => {
    //     const response = seatPicker(bootstrap);
    //     expect(createComponentSpy).toBeCalledWith(
    //         'test',
    //         expect.anything(),
    //         {
    //             showtimeId: exampleOrderShowtime.showtimeId,
    //             seatingStore: seatingStoreInstance,
    //             config: defaultSeatPickerConfig,
    //             displayText: defaultSeatPickerDisplayText,
    //             assets: defaultSeatPickerAssets,
    //             isSeatFirstOrdering: false,
    //             events: {
    //                 onLoadSeatLayoutFailed: onLoadSeatLayoutFailedMock,
    //                 onSeatLayoutLoaded: onSeatLayoutLoadedMock,
    //                 onSelectedSeatsChanged: onSelectedSeatsChangedMock
    //             }
    //         }
    //     );
    //     expect(response).toEqual({
    //         _component: component._component,
    //         unmount: expect.any(Function),
    //         validateSeatSelection: expect.any(Function),
    //         saveSeatSelection: expect.any(Function)
    //     });
    // });
    // it('throws an error when the cinemaChainId is undefined', () => {
    //     configurationStoreInstance.data.api.cinemaChainId = undefined as any;
    //     expect(() => seatPicker(bootstrap)).toThrowError('Cannot render the Seat Picker widget without a cinemaChainId');
    // });
    // it('doesn\'t call onSelectedSeatsChanged after unmount', async () => {
    //     expect.assertions(1);
    //     const component = seatPicker(bootstrap);
    //     component.unmount();
    //     await runAllPromises();
    //     expect(onSelectedSeatsChangedMock).not.toHaveBeenCalled();
    // });
    // it('saveSeatSelection calls the service with the selected seats', async () => {
    //     const widget = seatPicker(bootstrap);
    //     await widget.saveSeatSelection();
    //     expect(saveSeatSelectionSpy).toBeCalledWith(bootstrap.showtimeId);
    // });
    it('throws an error if no showtimeId is passed in the bootstrap', function () {
        expect(function () {
            seatPicker(__assign({}, bootstrap, { showtimeId: undefined }));
        }).toThrowError(/showtimeId/);
    });
    // it('throws an error when there is no showtime and is ticket first ordering mode', async () => {
    //     configurationStoreInstance.setData({
    //         ticketing: {
    //             isSeatFirstOrdering: false,
    //             maximumAllowedTicketsInAnOrder: 20,
    //             admittingDuration: 15
    //         }
    //     });
    //     expect(() => seatPicker({ ...bootstrap, showtimeId: '~' })).toThrowError('Cannot render Seat Picker widget when tickets have not been selected yet in ticket first ordering mode');
    // });
    // TO DO: REWRITE THOSE TESTS
});
//# sourceMappingURL=bootstrap.test.js.map