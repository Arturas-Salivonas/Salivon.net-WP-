var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { mapMxSeatLayoutToWidgetSeatLayout } from '../../../../../api/src/mappers/seating/seat-layout-mapper';
import { salesDataService } from '../../../../../api/src/services/sales-data/sales-data-service';
import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
import { orderStoreInstance } from '../../../../../api/src/stores/order/order-store';
import { PopFirstSelectedSeatHandler } from '../../../../../api/src/stores/seating/helpers/handlers/pop-first-selected-seat-handler';
import { seatingStoreInstance } from '../../../../../api/src/stores/seating/seating-store';
import { aislesSeatLayoutData } from '../../../../../example-data/seating/aisles';
import { simpleSeatLayoutData } from '../../../../../example-data/seating/simple';
import { mxtApi } from '../../../../../mx-api-client/src/mxt/api/mxt-api';
import { defaultSeatSelectionRules } from './../../../../../api/src/stores/seating/helpers/rules/rules';
var seatSelectionHandler = new PopFirstSelectedSeatHandler(defaultSeatSelectionRules, true, 10);
var seatLayouts = [
    { name: 'Two area categories w/ aisles', data: aislesSeatLayoutData },
    { name: 'Simple', data: simpleSeatLayoutData }
];
export var setSampleData = function (layoutName, showtimeId) {
    var layout = seatLayouts.find(function (l) { return l.name === layoutName; });
    setTimeout(function () {
        setSeatLayoutData(layout.data);
        setSampleOrderData(showtimeId);
        setDebuggingHelper();
    }, 0);
};
export var setDataFromApi = function (cinemaChainId, showtimeId) { return __awaiter(_this, void 0, void 0, function () {
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                configurationStoreInstance.setConfig({
                    api: {
                        url: 'http://localhost/Vista.WebWidgets.ConnectProxy',
                        authToken: 'test'
                    }
                });
                return [4 /*yield*/, setSeatLayoutFromApi(cinemaChainId, showtimeId)];
            case 1:
                _a.sent();
                return [4 /*yield*/, setTicketsFromApi(showtimeId)];
            case 2:
                _a.sent();
                setDebuggingHelper();
                return [2 /*return*/];
        }
    });
}); };
function setSeatLayoutFromApi(cinemaChainId, showtimeId) {
    return __awaiter(this, void 0, void 0, function () {
        var seatLayout;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, mxtApi.getSeatLayoutForShowtime(cinemaChainId, showtimeId)];
                case 1:
                    seatLayout = _a.sent();
                    setSeatLayoutData(seatLayout);
                    return [2 /*return*/];
            }
        });
    });
}
function setTicketsFromApi(showtimeId) {
    return __awaiter(this, void 0, void 0, function () {
        var ticketTypes;
        return __generator(this, function (_a) {
            ticketTypes = salesDataService.loadTicketTypesForShowtime(showtimeId);
            orderStoreInstance.actions.setOrderData({
                hasUnsavedChanges: true,
                showtimes: (this.data ? this.data.showtimes : []).concat([
                    {
                        showtimeId: showtimeId,
                        filmId: "film-" + showtimeId,
                        tickets: ticketTypes,
                        screenName: '',
                        startTime: new Date(),
                    }
                ])
            });
            return [2 /*return*/];
        });
    });
}
function setSampleOrderData(localShowtimeId) {
    // const showtimeId = localShowtimeId;
    // const orderId = 'order-1';
    // const areaCategoryCode0 = '0000000000';
    // const areaCategoryCode1 = '0000000001';
    // const order = {
    //     orderId: orderId,
    //     cinemaChainId: '1',
    //     bookingFee: 0,
    //     hasUnsavedChanges: true,
    //     showtimes: [
    //         {
    //             showtimeId: showtimeId,
    //             filmId: '1',
    //             screenName: 'Screen 1',
    //             startTime: new Date(2017, 10, 24),
    //             tickets: [
    //                 {
    //                     ticketType: {
    //                         id: '0001',
    //                         areaCategoryCode: areaCategoryCode0,
    //                         description: 'Adult',
    //                         price: 15.0,
    //                         category: OrderTicketTypeCategory.Standard
    //                     },
    //                     quantity: 0
    //                 },
    //                 {
    //                     ticketType: {
    //                         id: '0002',
    //                         areaCategoryCode: areaCategoryCode0,
    //                         description: 'Child',
    //                         price: 11.0,
    //                         category: OrderTicketTypeCategory.Standard
    //                     },
    //                     quantity: 0
    //                 },
    //                 {
    //                     ticketType: {
    //                         id: '0003',
    //                         areaCategoryCode: areaCategoryCode0,
    //                         description: 'Senior Citizen',
    //                         price: 12.5,
    //                         category: OrderTicketTypeCategory.Standard
    //                     },
    //                     quantity: 0
    //                 },
    //                 {
    //                     ticketType: {
    //                         id: '0004',
    //                         areaCategoryCode: areaCategoryCode1,
    //                         description: 'Premium Sofa Seats',
    //                         price: 20.0,
    //                         category: OrderTicketTypeCategory.Standard
    //                     },
    //                     quantity: 0
    //                 },
    //                 {
    //                     ticketType: {
    //                         id: '0005',
    //                         areaCategoryCode: areaCategoryCode0,
    //                         description: 'Family Pass',
    //                         price: 50,
    //                         category: OrderTicketTypeCategory.Package,
    //                         packageContents: { 
    //                             tickets: [{ description: 'Child', quantity: 3 }, { description: 'Adult', quantity: 2 }], 
    //                             // items: [{ description: 'Pop Corn', quantity: 2 }, { description: 'Coca Cola', quantity: 1 }]
    //                         }
    //                     },
    //                     quantity: 0
    //                 }
    //                 // {
    //                 //     ticketTypeId: '0005',
    //                 //     areaCategoryCode: areaCategoryCode1,
    //                 //     description: 'Deluxe seats',
    //                 //     price: 20.0,
    //                 //     quantity: 0,
    //                 //     category: OrderTicketTypeCategory.Standard
    //                 // }
    //             ]
    //         }
    //     ]
    // } as Order;
    // orderStoreInstance.actions.setOrderData(order);
    // todo: update order instance to match model
}
function setSeatLayoutData(mxSeatLayoutData) {
    var seatLayoutData = mapMxSeatLayoutToWidgetSeatLayout(mxSeatLayoutData);
    seatingStoreInstance.setSeatLayout(seatLayoutData);
    // TODO: fix this, setSeatLayout needs to be called before calling setOptions, we dont want this dependency
    seatingStoreInstance.setOptions({ selectSeatHandler: seatSelectionHandler });
}
function setDebuggingHelper() {
    window.vista = window.vista || {};
    var vista = window.vista;
    vista.stores = { order: orderStoreInstance, seating: seatingStoreInstance };
}
//# sourceMappingURL=set-data-helper.js.map