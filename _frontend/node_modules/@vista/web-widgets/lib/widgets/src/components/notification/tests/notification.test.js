var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { Notification, NotificationStyle } from '../notification';
test('Notification should render null when no content is provided', function () {
    var props = {
        style: NotificationStyle.Info
    };
    compareToSnapshot(React.createElement(Notification, __assign({}, props)));
});
test('Notification should render child content', function () {
    var props = {
        style: NotificationStyle.Info
    };
    compareToSnapshot(React.createElement(Notification, __assign({}, props),
        React.createElement("span", null, "child span")));
});
test('Notification should render info style', function () {
    var props = {
        style: NotificationStyle.Info
    };
    compareToSnapshot(React.createElement(Notification, __assign({}, props),
        React.createElement("span", null, "child span")));
});
test('Notification should render warning style', function () {
    var props = {
        style: NotificationStyle.Warning
    };
    compareToSnapshot(React.createElement(Notification, __assign({}, props),
        React.createElement("span", null, "child span")));
});
test('Notification should render error style', function () {
    var props = {
        style: NotificationStyle.Error
    };
    compareToSnapshot(React.createElement(Notification, __assign({}, props),
        React.createElement("span", null, "child span")));
});
test('Notification should render success style', function () {
    var props = {
        style: NotificationStyle.Success
    };
    compareToSnapshot(React.createElement(Notification, __assign({}, props),
        React.createElement("span", null, "child span")));
});
describe('Notification', function () {
    it('should update visibility when props are received', function () {
        var notification = new Notification({
            style: NotificationStyle.Warning
        });
        notification.setState = jest.fn();
        notification.componentWillReceiveProps({
            style: NotificationStyle.Success
        });
        expect(notification.setState).toBeCalledWith({
            isVisible: false,
        });
    });
    it('should update the state when the close button is clicked', function () {
        var notification = new Notification({
            style: NotificationStyle.Warning,
            onCloseButtonClick: jest.fn()
        });
        notification.setState = jest.fn();
        notification.handleCloseButtonClick();
        expect(notification.setState).toBeCalled();
        expect(notification.props.onCloseButtonClick).toBeCalled();
    });
});
//# sourceMappingURL=notification.test.js.map