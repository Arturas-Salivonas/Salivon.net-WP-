var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
// import { orderService } from './../../../../../api/src/services/order/order-service';
// import { services } from '../../../../../api/src/services/services';
import { orderStoreInstance } from '../../../../../api/src/stores/order/order-store';
import { exampleOrder } from '../../../../../example-data/order/order';
import { exampleOrderShowtime } from '../../../../../example-data/order/order-showtime';
// import * as createComponent from '../../../bootstrap/create-component';
import { ticketPicker } from '../bootstrap';
// import { defaultTicketPickerConfig } from '../types/config';
// import { defaultTicketPickerDisplayText } from '../types/display-text';
import { configurationStoreInstance } from '../../../../../api/src/stores/configuration/configuration-store';
describe('ticketPicker bootstrap', function () {
    // const component = { _component: {} };
    // const createComponentSpy = jest.spyOn(createComponent, 'createComponent').mockReturnValue(component);
    var bootstrap = { selector: 'test', showtimeId: exampleOrderShowtime.showtimeId };
    beforeEach(function () {
        orderStoreInstance.actions.setOrderData(exampleOrder);
    });
    afterEach(function () {
        jest.clearAllMocks();
        configurationStoreInstance.flush();
    });
    // it('calls the create component function and returns the correct response', () => {
    //     const response = ticketPicker(bootstrap);
    //     expect(createComponentSpy).toBeCalledWith(
    //         'test',
    //         expect.anything(),
    //         {
    //             orderStore: orderStoreInstance,
    //             orderService: orderService,
    //             showtimeId: bootstrap.showtimeId,
    //             config: defaultTicketPickerConfig,
    //             assets: defaultTicketPickerAssets,
    //             displayText: defaultTicketPickerDisplayText,
    //             events: bootstrap.events,
    //             isSeatFirstOrdering: false
    //         }
    //     );
    //     expect(response).toEqual({
    //         ...component,
    //         validateTicketSelection: expect.any(Function),
    //         saveTicketSelection: expect.any(Function)
    //     });
    // });
    // it('saveTicketSelection calls the service to create the order', () => {
    //     orderStoreInstance.actions.setOrderData({ orderId: undefined });
    //     services.order.createOrder = jest.fn();
    //     jest.spyOn(services.order, 'createOrder');
    //     const widget = ticketPicker(bootstrap);
    //     widget.saveTicketSelection();
    //     expect(services.order.createOrder).toHaveBeenCalledTimes(1);
    // });
    // it('saveTicketSelection will update an existing order', () => {
    //     services.order.updateShowtimeTicketingDetails = jest.fn();
    //     jest.spyOn(services.order, 'updateShowtimeTicketingDetails');
    //     const widget = ticketPicker(bootstrap);
    //     widget.saveTicketSelection();
    //     expect(services.order.updateShowtimeTicketingDetails).toBeCalledWith(bootstrap.showtimeId);
    // });
    it('throws an error if no showtimeId is passed in the bootstrap', function () {
        expect(function () { return ticketPicker(__assign({}, bootstrap, { showtimeId: undefined })); }).toThrow(/showtimeId/);
    });
    // it('throws an error when there is no showtime and is seat first ordering mode', () => {
    //     configurationStoreInstance.setData({
    //         ticketing: {
    //             isSeatFirstOrdering: true,
    //             maximumAllowedTicketsInAnOrder: 20,
    //             admittingDuration: 15
    //         }
    //     });
    //     expect(() => ticketPicker({ ...bootstrap, showtimeId: '~'})).toThrow('Cannot render Ticket Picker widget when seats have not been selected yet in seat first ordering mode');
    // });
    // TO DO: REWRITE THOSE TESTS
});
//# sourceMappingURL=bootstrap.test.js.map