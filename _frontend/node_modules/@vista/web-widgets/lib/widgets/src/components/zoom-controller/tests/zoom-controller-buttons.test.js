import * as React from 'react';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { ButtonAction, ZoomControllerButtons } from '../zoom-controller-buttons';
describe('ZoomControllerButtons', function () {
    describe('render', function () {
        it('renders the default buttons correctly', function () {
            compareToSnapshot(React.createElement(ZoomControllerButtons, { handler: {} }));
        });
        it('renders just the pan buttons correctly', function () {
            compareToSnapshot(React.createElement(ZoomControllerButtons, { handler: {}, showPanButtons: true, showZoomButtons: false }));
        });
        it('renders just the zoom buttons correctly', function () {
            compareToSnapshot(React.createElement(ZoomControllerButtons, { handler: {}, showPanButtons: false, showZoomButtons: true }));
        });
        it('renders both zoom and pan buttons correctly', function () {
            compareToSnapshot(React.createElement(ZoomControllerButtons, { handler: {}, showPanButtons: true, showZoomButtons: true }));
        });
    });
    describe('onPanAvailabilityChanged', function () {
        it('updates the pan button availability state', function () {
            var zoomControllerButtons = new ZoomControllerButtons({});
            zoomControllerButtons.setState = jest.fn();
            var availability = { test: test };
            zoomControllerButtons.onPanAvailabilityChanged(availability);
            expect(zoomControllerButtons.setState).toBeCalledWith({ panAvailability: availability });
        });
    });
    describe('onZoomAvailabilityChanged ', function () {
        it('updates the zoom button availability state', function () {
            var zoomControllerButtons = new ZoomControllerButtons({});
            zoomControllerButtons.setState = jest.fn();
            var availability = { test: test };
            zoomControllerButtons.onZoomAvailabilityChanged(availability);
            expect(zoomControllerButtons.setState).toBeCalledWith({ zoomAvailability: availability });
        });
    });
    describe('getButtonAvailability', function () {
        describe('ButtonAction.ZoomIn', function () {
            it('returns false if zoomAvailability is not set on state', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { zoomAvailability: undefined };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.ZoomIn);
                expect(result).toEqual(false);
            });
            it('returns true if zoom in is available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { zoomAvailability: { in: true } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.ZoomIn);
                expect(result).toEqual(true);
            });
            it('returns false if zoom in is not available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { zoomAvailability: { in: false } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.ZoomIn);
                expect(result).toEqual(false);
            });
        });
        describe('ButtonAction.ZoomOut', function () {
            it('returns false if zoomAvailability is not set on state', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { zoomAvailability: undefined };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.ZoomOut);
                expect(result).toEqual(false);
            });
            it('returns true if zoom out is available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { zoomAvailability: { out: true } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.ZoomOut);
                expect(result).toEqual(true);
            });
            it('returns false if zoom out is not available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { zoomAvailability: { out: false } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.ZoomOut);
                expect(result).toEqual(false);
            });
        });
        describe('ButtonAction.PanLeft', function () {
            it('returns false if panAvailability is not set on state', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: undefined };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanLeft);
                expect(result).toEqual(false);
            });
            it('returns true if pan left is available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: { left: true } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanLeft);
                expect(result).toEqual(true);
            });
            it('returns false if pan left is not available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: { left: false } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanLeft);
                expect(result).toEqual(false);
            });
        });
        describe('ButtonAction.PanRight', function () {
            it('returns false if panAvailability is not set on state', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: undefined };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanRight);
                expect(result).toEqual(false);
            });
            it('returns true if pan right is available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: { right: true } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanRight);
                expect(result).toEqual(true);
            });
            it('returns false if pan right is not available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: { right: false } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanRight);
                expect(result).toEqual(false);
            });
        });
        describe('ButtonAction.PanUp', function () {
            it('returns false if panAvailability is not set on state', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: undefined };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanUp);
                expect(result).toEqual(false);
            });
            it('returns true if pan up is available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: { up: true } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanUp);
                expect(result).toEqual(true);
            });
            it('returns false if pan up is not available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: { up: false } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanUp);
                expect(result).toEqual(false);
            });
        });
        describe('ButtonAction.PanDown', function () {
            it('returns false if panAvailability is not set on state', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: undefined };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanDown);
                expect(result).toEqual(false);
            });
            it('returns true if pan down is available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: { down: true } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanDown);
                expect(result).toEqual(true);
            });
            it('returns false if pan up down not available', function () {
                var zoomControllerButtons = new ZoomControllerButtons({});
                zoomControllerButtons.state = { panAvailability: { down: false } };
                var result = zoomControllerButtons.getButtonAvailability(ButtonAction.PanDown);
                expect(result).toEqual(false);
            });
        });
    });
});
//# sourceMappingURL=zoom-controller-buttons.test.js.map