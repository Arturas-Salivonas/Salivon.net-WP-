var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { PaymentErrorResultCode } from '@vista/embedded-payments';
import { observer } from 'mobx-react';
import * as React from 'react';
import { Logger } from '../../../../api/src/utils/logger';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { OrderPaymentFormMessage, OrderPaymentFormMessageType } from './components/order-payment-form-message';
import { OrderPaymentFormMethods } from './components/order-payment-form-methods';
import { OrderPaymentFormSummary } from './components/order-payment-form-summary';
import { defaultOrderPaymentFormAssets } from './types/assets';
import { defaultOrderPaymentFormDisplayText } from './types/display-text';
/**
 * Renders a form that allows a user to pay for an in-progress order.
 */
var OrderPaymentForm = /** @class */ (function (_super) {
    __extends(OrderPaymentForm, _super);
    function OrderPaymentForm(props) {
        var _this = _super.call(this, props) || this;
        _this.handlePaymentSuccessful = function (orderCompletionStatus) {
            var _a = _this.props, orderStore = _a.orderStore, events = _a.events;
            orderStore.actions.clearOrder();
            if (events && events.onPaymentSuccessful) {
                events.onPaymentSuccessful(orderCompletionStatus);
            }
        };
        _this.handlePaymentFailed = function (error) {
            var events = _this.props.events;
            if (error.resultCode === PaymentErrorResultCode.OrderNotCompletedAfterPaymentAccepted) {
                Logger.error("Payment failed. Order " + _this.props.orderStore.selectors.getOrderId() + " not completed in Connect.");
                _this.setState({ failedToCompletePayment: true });
            }
            if (events && events.onPaymentFailed) {
                events.onPaymentFailed(error);
            }
        };
        _this.state = {
            failedToCompletePayment: false
        };
        return _this;
    }
    OrderPaymentForm.prototype.render = function () {
        var _a = this.props, orderStore = _a.orderStore, displayText = _a.displayText;
        var failedToCompletePayment = this.state.failedToCompletePayment;
        var order = orderStore.data.order;
        if (!order.orderId)
            return null; // todo cannot render without order ID
        var b = bemClassBuilderFactory('v-order-payment-form');
        return (React.createElement("div", { className: b.block() }, failedToCompletePayment ?
            React.createElement(OrderPaymentFormMessage, { messageType: OrderPaymentFormMessageType.PaymentFailed, assets: defaultOrderPaymentFormAssets, displayText: defaultOrderPaymentFormDisplayText })
            :
                React.createElement(React.Fragment, null,
                    React.createElement(OrderPaymentFormSummary, { bookingFee: order.bookingFee, subtotalPrice: orderStore.selectors.getOrderSubtotalCost(), totalPrice: orderStore.selectors.getOrderTotalCost(), displayText: displayText }),
                    React.createElement(OrderPaymentFormMethods, { orderId: order.orderId, paymentMethods: ['Braintree'], displayText: displayText, onPaymentSuccessful: this.handlePaymentSuccessful, onPaymentFailed: this.handlePaymentFailed }))));
    };
    OrderPaymentForm = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], OrderPaymentForm);
    return OrderPaymentForm;
}(React.Component));
export { OrderPaymentForm };
//# sourceMappingURL=order-payment-form.js.map