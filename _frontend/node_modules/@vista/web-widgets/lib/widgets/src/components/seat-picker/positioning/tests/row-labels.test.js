import { SeatPickerWidgetScreenPosition } from '../../types/config';
import { getRowLabelProps } from '../row-labels';
describe('getRowLabelProps', function () {
    var area = {
        top: 10,
        left: 15,
        width: 25,
        height: 50,
        rowCount: 2,
        columnCount: 1,
        rows: [
            { rowLabel: 'A', seats: [{ position: { rowIndex: 0 } }] },
            { rowLabel: 'B', seats: [{ position: { rowIndex: 1 } }] }
        ]
    };
    var seatLayout = {
        areas: [area]
    };
    var scaleFactor = 10;
    var boundary = {
        top: 0,
        left: 0,
        width: 40,
        height: 60
    };
    it('returns the row labels props for a non-inverted seat layout', function () {
        var config = {
            screen: {
                height: 25,
                margin: 5,
                position: SeatPickerWidgetScreenPosition.Bottom
            },
            seats: { margin: 5 },
            rowLabels: {
                size: 20,
                margin: 6
            }
        };
        var positions = getRowLabelProps(seatLayout, scaleFactor, config, boundary);
        expect(positions).toEqual([
            {
                // top = (areaTop[10] + halfRowHeight[12.5]) * scaleFactor[10] - halfRowLabelHeight[10] = 215
                top: 215,
                left: 6,
                width: 20,
                height: 20,
                label: 'A'
            },
            {
                // = firstRowTop + rowHeight[25] * scaleFactor[10] = 465
                top: 465,
                left: 6,
                width: 20,
                height: 20,
                label: 'B'
            }
        ]);
    });
    it('returns the row labels props for an inverted seat layout', function () {
        var config = {
            screen: {
                height: 25,
                margin: 5,
                position: SeatPickerWidgetScreenPosition.Top
            },
            seats: { margin: 5 },
            rowLabels: {
                size: 20,
                margin: 6
            }
        };
        var positions = getRowLabelProps(seatLayout, scaleFactor, config, boundary);
        expect(positions).toEqual([
            {
                // top = (100 - areaTop[10] - areaHeight[50] + halfRowHeight[12.5]) * scaleFactor[10] - halfRowLabelHeight[10] + screenHeight[25] + screenMargin[5] = 545
                top: 545,
                left: 6,
                width: 20,
                height: 20,
                label: 'B'
            },
            {
                // = firstRowTop + rowHeight[25] * scaleFactor[10] = 795
                top: 795,
                left: 6,
                width: 20,
                height: 20,
                label: 'A'
            }
        ]);
    });
    describe('overlapping row labels for non-inverted seat layout', function () {
        var scaleFactor = 1;
        var config = {
            screen: { height: 0, margin: 0, position: SeatPickerWidgetScreenPosition.Bottom },
            seats: { margin: 0 },
            rowLabels: { size: 20, margin: 20 }
        };
        var boundary = { top: 0, left: 0, width: 80, height: 60 };
        var area1 = {
            top: 40,
            left: 0,
            width: 40,
            height: 40,
            rowCount: 2,
            columnCount: 1,
            rows: [
                { rowLabel: 'C', seats: [{ position: { rowIndex: 1 } }] },
                { rowLabel: 'D', seats: [{ position: { rowIndex: 2 } }] }
            ]
        };
        it('does not remove non overlapping row labels', function () {
            var area2 = {
                top: 0,
                left: 0,
                width: 40,
                height: 40,
                rowCount: 2,
                columnCount: 1,
                rows: [
                    { rowLabel: 'A', seats: [{ position: { rowIndex: 1 } }] },
                    { rowLabel: 'B', seats: [{ position: { rowIndex: 2 } }] }
                ]
            };
            var seatLayout = {
                areas: [area1, area2]
            };
            var positions = getRowLabelProps(seatLayout, scaleFactor, config, boundary);
            expect(positions.map(function (p) { return ({ label: p.label }); })).toEqual([
                { label: 'A' },
                { label: 'B' },
                { label: 'C' },
                { label: 'D' }
            ]);
        });
        it('removes exactly overlapping row labels', function () {
            var area2 = {
                top: 20,
                left: 0,
                width: 40,
                height: 40,
                rowCount: 2,
                columnCount: 1,
                rows: [
                    { rowLabel: 'A', seats: [{ position: { rowIndex: 1 } }] },
                    { rowLabel: 'B', seats: [{ position: { rowIndex: 2 } }] }
                ]
            };
            var seatLayout = {
                areas: [area1, area2]
            };
            var positions = getRowLabelProps(seatLayout, scaleFactor, config, boundary);
            expect(positions.map(function (p) { return ({ label: p.label }); })).toEqual([
                { label: 'A' },
                { label: 'C' },
                { label: 'D' }
            ]);
        });
        it('removes partially overlapping row labels', function () {
            var area2 = {
                top: 39,
                left: 0,
                width: 40,
                height: 40,
                rowCount: 2,
                columnCount: 1,
                rows: [
                    { rowLabel: 'A', seats: [{ position: { rowIndex: 1 } }] },
                    { rowLabel: 'B', seats: [{ position: { rowIndex: 2 } }] }
                ]
            };
            var seatLayout = {
                areas: [area1, area2]
            };
            var positions = getRowLabelProps(seatLayout, scaleFactor, config, boundary);
            expect(positions.map(function (p) { return ({ label: p.label }); })).toEqual([
                // For partially overlapping labels, the higher row label is prioritised
                { label: 'A' },
                { label: 'B' }
            ]);
        });
    });
    describe('overlapping row labels for inverted seat layout', function () {
        var scaleFactor = 1;
        var config = {
            screen: { height: 0, margin: 0, position: SeatPickerWidgetScreenPosition.Top },
            seats: { margin: 0 },
            rowLabels: { size: 20, margin: 20 }
        };
        var boundary = { top: 0, left: 0, width: 80, height: 60 };
        var area1 = {
            top: 40,
            left: 0,
            width: 40,
            height: 40,
            rowCount: 2,
            columnCount: 1,
            rows: [
                { rowLabel: 'C', seats: [{ position: { rowIndex: 1 } }] },
                { rowLabel: 'D', seats: [{ position: { rowIndex: 2 } }] }
            ]
        };
        it('does not remove non overlapping row labels', function () {
            var area2 = {
                top: 0,
                left: 0,
                width: 40,
                height: 40,
                rowCount: 2,
                columnCount: 1,
                rows: [
                    { rowLabel: 'A', seats: [{ position: { rowIndex: 1 } }] },
                    { rowLabel: 'B', seats: [{ position: { rowIndex: 2 } }] }
                ]
            };
            var seatLayout = {
                areas: [area1, area2]
            };
            var positions = getRowLabelProps(seatLayout, scaleFactor, config, boundary);
            expect(positions.map(function (p) { return ({ label: p.label }); })).toEqual([
                { label: 'D' },
                { label: 'C' },
                { label: 'B' },
                { label: 'A' }
            ]);
        });
        it('removes exactly overlapping row labels', function () {
            var area2 = {
                top: 20,
                left: 0,
                width: 40,
                height: 40,
                rowCount: 2,
                columnCount: 1,
                rows: [
                    { rowLabel: 'A', seats: [{ position: { rowIndex: 1 } }] },
                    { rowLabel: 'B', seats: [{ position: { rowIndex: 2 } }] }
                ]
            };
            var seatLayout = {
                areas: [area1, area2]
            };
            var positions = getRowLabelProps(seatLayout, scaleFactor, config, boundary);
            expect(positions.map(function (p) { return ({ label: p.label }); })).toEqual([
                { label: 'D' },
                { label: 'C' },
                { label: 'A' }
            ]);
        });
        it('removes partially overlapping row labels', function () {
            var area2 = {
                top: 39,
                left: 0,
                width: 40,
                height: 40,
                rowCount: 2,
                columnCount: 1,
                rows: [
                    { rowLabel: 'A', seats: [{ position: { rowIndex: 1 } }] },
                    { rowLabel: 'B', seats: [{ position: { rowIndex: 2 } }] }
                ]
            };
            var seatLayout = {
                areas: [area1, area2]
            };
            var positions = getRowLabelProps(seatLayout, scaleFactor, config, boundary);
            expect(positions.map(function (p) { return ({ label: p.label }); })).toEqual([
                // For partially overlapping labels, the higher row label is prioritised
                { label: 'D' },
                { label: 'C' }
            ]);
        });
    });
});
//# sourceMappingURL=row-labels.test.js.map