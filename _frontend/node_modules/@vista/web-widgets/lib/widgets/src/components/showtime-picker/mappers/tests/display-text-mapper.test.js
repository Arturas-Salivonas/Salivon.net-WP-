import { defaultShowtimePickerDisplayText } from '../../types/display-text';
import { mapShowtimePickerDisplayText } from '../display-text-mapper';
describe('mapShowtimePickerDisplayText', function () {
    it('returns the default display text when the provided display text is undefined', function () {
        var result = mapShowtimePickerDisplayText(undefined);
        expect(result).toEqual(defaultShowtimePickerDisplayText);
    });
    it('returns the default display text when the provided display text is invalid', function () {
        var result = mapShowtimePickerDisplayText(true);
        expect(result).toEqual(defaultShowtimePickerDisplayText);
    });
    var propertyTestCases = function (defaultValue, allowNull, allowEmpty) {
        if (allowNull === void 0) { allowNull = false; }
        if (allowEmpty === void 0) { allowEmpty = false; }
        return [
            { value: undefined, expected: allowNull ? undefined : defaultValue },
            { value: null, expected: allowNull ? null : defaultValue },
            { value: 0, expected: defaultValue },
            { value: '', expected: allowEmpty ? '' : defaultValue },
            { value: {}, expected: defaultValue },
            { value: [], expected: defaultValue },
            { value: 'valid', expected: 'valid' },
        ];
    };
    describe('showtimeTimeFormat', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.showtimeTimeFormat);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    showtimeTimeFormat: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.showtimeTimeFormat).toEqual(testCase.expected);
            });
        });
    });
    describe('showtimeAmPmFormat', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.showtimeAmPmFormat, false, true);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    showtimeAmPmFormat: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.showtimeAmPmFormat).toEqual(testCase.expected);
            });
        });
    });
    describe('commonAttributesListLabel', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.commonAttributesListLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    commonAttributesListLabel: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.commonAttributesListLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('noShowtimesForSiteOnDateMessage', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.noShowtimesForSiteOnDateMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    noShowtimesForSiteOnDateMessage: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.noShowtimesForSiteOnDateMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('runtimeFormat', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.runtimeFormat);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    runtimeFormat: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.runtimeFormat).toEqual(testCase.expected);
            });
        });
    });
    describe('noSitesSelectedTitle', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.noSitesSelectedTitle);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    noSitesSelectedTitle: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.noSitesSelectedTitle).toEqual(testCase.expected);
            });
        });
    });
    describe('noSitesSelectedMessage', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.noSitesSelectedMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    noSitesSelectedMessage: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.noSitesSelectedMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('noShowtimesForFilmMessage', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.noShowtimesForFilmMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    noShowtimesForFilmMessage: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.noShowtimesForFilmMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('noShowtimesGenericMessage', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.noShowtimesGenericMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    noShowtimesGenericMessage: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.noShowtimesGenericMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('actionButtonLabel', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.actionButtonLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    actionButtonLabel: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.actionButtonLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('noShowtimesForAnyDateTitle', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.noShowtimesForAnyDateTitle);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    noShowtimesForAnyDateTitle: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.noShowtimesForAnyDateTitle).toEqual(testCase.expected);
            });
        });
    });
    describe('noShowtimesForAnyDateMessage', function () {
        var testCases = propertyTestCases(defaultShowtimePickerDisplayText.noShowtimesForAnyDateMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    noShowtimesForAnyDateMessage: testCase.value
                };
                var result = mapShowtimePickerDisplayText(displayText);
                expect(result.noShowtimesForAnyDateMessage).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=display-text-mapper.test.js.map