var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { HelpText } from '../help-text/help-text';
import { Label } from '../label/label';
/**
 * Renders a field that wraps an input element, optional label and optional help text.
 * Passes the ID, name and style down to children elements and associates the label and help text to the input element.
 */
var Field = /** @class */ (function (_super) {
    __extends(Field, _super);
    function Field() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Field.prototype.render = function () {
        var _a = this.props, id = _a.id, name = _a.name, label = _a.label, helpText = _a.helpText, style = _a.style, children = _a.children;
        var helpTextId = id + "_help-text";
        var showLabel = this.props.showLabel;
        if (showLabel === undefined)
            showLabel = true;
        var inputProps = {
            id: id,
            name: name,
            style: style,
            helpTextId: helpText && helpText.length > 0 ? helpTextId : undefined,
            label: !showLabel ? label : undefined
        };
        var inputChildrenWithExtraProps = children
            ? React.Children.map(children, (function (child) { return React.cloneElement(child, inputProps); }))
            : [];
        var b = bemClassBuilderFactory('v-field');
        return (React.createElement("div", { className: b.block() },
            showLabel && label &&
                React.createElement(Label, { elementId: id }, label),
            inputChildrenWithExtraProps,
            (helpText && helpText.length > 0) &&
                React.createElement(HelpText, { id: helpTextId, style: style }, helpText)));
    };
    return Field;
}(React.Component));
export { Field };
//# sourceMappingURL=field.js.map