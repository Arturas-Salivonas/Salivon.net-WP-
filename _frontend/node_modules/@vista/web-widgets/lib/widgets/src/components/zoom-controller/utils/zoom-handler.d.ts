import { ZoomControllerPanAvailability, ZoomControllerZoomAvailability } from '../zoom-controller';
import { Dimensions, Point } from './measurement-utils';
import { ContentTransformation } from './transformation-utils';
export declare class ZoomHandler {
    /**
     * Threshold of the minimum initial scale required for tap to zoom to be enabled.
     */
    tapToZoomScaleThreshold: number;
    /**
     * Zoom scale increment used for the zoomIn and zoomOut functions.
     */
    zoomIncrement: number;
    /**
     * Pan increment used for panUp, panRight, panDown and panLeft functions.
     */
    panIncrement: number;
    /**
     * Duration of animation of zoom and pan changes. Does not apply to click/tap and drag events.
     */
    animationDuration: number;
    /**
     * Extra padding to allow the user to pan past the zoom buttons.
     */
    zoomButtonPadding: number;
    /**
     * Callback function for pan availability changes.
     */
    onPanAvailabilityChanged: (availability: ZoomControllerPanAvailability) => void;
    /**
     * Callback function for zoom availability changes.
     */
    onZoomAvailabilityChanged: (availability: ZoomControllerZoomAvailability) => void;
    /**
     * Callback function for content transformation changes.
     */
    onContentTransformationChanged: (transformation: ContentTransformation) => void;
    /**
     * Viewport element of the ZoomController. Must be set via the setElements function.
     */
    private viewport;
    /**
     * Dimensions of the viewport element of the ZoomController. Automatically calculated during setElements and window resize.
     */
    private viewportDimensions;
    /**
     * Content element of the ZoomController. Must be set via the setElements function.
     */
    private content;
    /**
     * Dimensions of the content element of the ZoomController. Must be set via the setElements function.
     */
    private contentDimensions;
    /**
     * Maximum scale of the content element.
     */
    private maxScale;
    /**
     * Minimum scale of the content element. Automatically calculated during setElements and window resize.
     */
    private minScale;
    /**
     * The current content transformation.
     */
    private currentContentTransformation;
    /**
     * The current animator instance.
     */
    private animator?;
    /**
     * Last known pan availability status.
     */
    private lastPanAvailability;
    /**
     * Last known zoom availability status.
     */
    private lastZoomAvailability;
    /**
     * Recognizer for touch events.
     */
    private touchRecognizer;
    /**
     * Recognizer for mouse events.
     */
    private mouseRecognizer;
    /**
     * Creates a zoom handler and registers required input recognizer callbacks.
     */
    constructor();
    /**
     * Returns whether or not the content is in the middle of a zoom or pan animation.
     */
    readonly isAnimating: boolean;
    /**
     * Returns whether or not the content of the viewport is zoomed in.
     */
    readonly isZoomedIn: boolean;
    /**
     * Sets the viewport and content elements, registers event listeners and updates the viewport size.
     */
    setElements(viewport: HTMLElement, content: HTMLElement, contentDimensions: Dimensions): void;
    /**
     * Updates the min scale and centers the content within the viewport.
     */
    resetZoom(): void;
    /**
     * Removes all event listeners.
     */
    unmount(): void;
    /**
     * Zooms in to the center of the viewport by the zoomIncrement.
     */
    zoomIn: () => void;
    /**
     * Zooms out from the center of the viewport by the zoomIncrement.
     */
    zoomOut: () => void;
    /**
     * Pans the content to a given x and y position.
     * @returns A boolean indicating whether any pan occurred.
     */
    panTo: (point: Point, animate?: boolean) => boolean;
    /**
     * Pans the content by a given translation amount.
     * @returns A boolean indicating whether any pan occurred.
     */
    panBy: (translation: Point, animate?: boolean) => boolean;
    /**
     * Pans the content upwards by the panIncrement.
     */
    panUp: () => boolean;
    /**
     * Pans the content downwards by the panIncrement.
     */
    panDown: () => boolean;
    /**
     * Pans the content left by the panIncrement.
     */
    panLeft: () => boolean;
    /**
     * Pans the content right by the panIncrement.
     */
    panRight: () => boolean;
    /**
     * Zooms by a given scale around a given center point.
     */
    private handlePinch;
    /**
     * Gets the transformation result of a zoom action.
     */
    private getZoomTransform;
    /**
     * Returns the current total content scale.
     */
    private getCurrentTotalScale;
    /**
     * Restricts a given translation by the translation limits.
     */
    private restrictTranslation;
    /**
     * Restricts a given scale by the minScale and maxScale values.
     */
    private restrictScale;
    /**
     * Returns the minimum and maximum x and y translation values.
     */
    private getTranslationLimits;
    /**
     * Applies a given transformation to the content element.
     */
    private applyContentTransformation;
    /**
     * Animates a content transformation.
     */
    private animateContentTransformation;
    /**
     * Applies the content transformation at a given animation frame.
     */
    private applyAnimationFrameContentTransformation;
    /**
     * Sets the content styles based on a given transformation.
     */
    private setContentStyles;
    /**
     * Updates the pan availability based on the current transformations.
     */
    private updatePanAvailability;
    /**
     * Updates the zoom availability based on the current transformations.
     */
    private updateZoomAvailability;
    /**
     * Adds the required event listeners to the viewport and document.
     */
    private setEventListeners;
    /**
     * Removes the event listeners added by setEventListeners
     */
    private removeEventListeners;
    /**
     * Common handler for end events.
     */
    private handleEndEvent;
    /**
     * Handler for touchend events.
     */
    private handleTouchEnd;
    /**
     * Handler for mouseup events.
     */
    private handleMouseUp;
    /**
     * Handler for tap events.
     */
    private handleTap;
    /**
     * Handler for double-tap events.
     */
    private handleDoubleTap;
    /**
     * Handler for window resize events.
     */
    private handleResize;
    /**
     * Updates the viewport size to given dimensions
     */
    private updateViewportSize;
    /**
     * Get the x and y translation of the content when centered within the viewport.
     */
    private getCenteredContentTranslation;
    /**
     * Gets the current dimensions of the viewport.
     */
    private getViewportDimensions;
    /**
     * Gets the content dimensions relative to a given zoom scale.
     */
    private calculateContentDimensionsAtScale;
    /**
     * Gets the centre point of the viewport.
     */
    private getViewportCenterPoint;
}
