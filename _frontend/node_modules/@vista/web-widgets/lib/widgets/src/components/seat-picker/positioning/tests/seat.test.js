import { SeatType } from '../../../../../../types/seating/seat-type';
import { SeatPickerWidgetScreenPosition } from '../../types/config';
import { getSeatBoundary } from '../seat';
describe('seat', function () {
    describe('getSeatBoundary', function () {
        var area = {
            width: 50,
            columnCount: 10,
            height: 10,
            rowCount: 2
        };
        var scaleFactor = 10;
        describe('non-inverted seat map', function () {
            var config = {
                seats: { margin: 5 },
                screen: { position: SeatPickerWidgetScreenPosition.Bottom }
            };
            it('returns the boundary of a normal seat', function () {
                var seat = {
                    type: SeatType.Normal,
                    position: {
                        columnIndex: 6,
                        rowIndex: 1
                    }
                };
                var boundary = getSeatBoundary(seat, area, scaleFactor, config);
                expect(boundary).toEqual({
                    // 1 * 10 / 2 = 5 * 10 (scaleFactor) = 50 + 5 (seat margin x1) = 55
                    top: 55,
                    // 6 * 50 / 10 = 30 * 10 (scaleFactor) = 300 + 5 (seat margin x1) = 305
                    left: 305,
                    // 50% (area width) / 10 (columns) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    width: 40,
                    // 10% (area height) / 2 (rows) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    height: 40
                });
            });
            it('returns the boundary of a left sofa seat', function () {
                var seat = {
                    type: SeatType.SofaLeft,
                    position: {
                        columnIndex: 6,
                        rowIndex: 1
                    }
                };
                var boundary = getSeatBoundary(seat, area, scaleFactor, config);
                expect(boundary).toEqual({
                    // 1 * 10 / 2 = 5 * 10 (scaleFactor) = 50 + 5 (seat margin x1) = 55
                    top: 55,
                    // 6 * 50 / 10 = 30 * 10 (scaleFactor) = 300 + 5 (seat margin x1) = 305
                    left: 305,
                    // 50% (area width) / 10 (columns) = 5% * 10 (scaleFactor) = 50 - 5 (seat margin x1) = 45
                    width: 45,
                    // 10% (area height) / 2 (rows) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    height: 40
                });
            });
            it('returns the boundary of a middle sofa seat', function () {
                var seat = {
                    type: SeatType.SofaMiddle,
                    position: {
                        columnIndex: 6,
                        rowIndex: 1
                    }
                };
                var boundary = getSeatBoundary(seat, area, scaleFactor, config);
                expect(boundary).toEqual({
                    // 1 * 10 / 2 = 5 * 10 (scaleFactor) = 50 + 5 (seat margin x1) = 55
                    top: 55,
                    // 6 * 50 / 10 = 30 * 10 (scaleFactor) = 300
                    left: 300,
                    // 50% (area width) / 10 (columns) = 5% * 10 (scaleFactor) = 50
                    width: 50,
                    // 10% (area height) / 2 (rows) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    height: 40
                });
            });
            it('returns the boundary of a right sofa seat', function () {
                var seat = {
                    type: SeatType.SofaRight,
                    position: {
                        columnIndex: 6,
                        rowIndex: 1
                    }
                };
                var boundary = getSeatBoundary(seat, area, scaleFactor, config);
                expect(boundary).toEqual({
                    // 1 * 10 / 2 = 5 * 10 (scaleFactor) = 50 + 5 (seat margin x1) = 55
                    top: 55,
                    // 6 * 50 / 10 = 30 * 10 (scaleFactor) = 300
                    left: 300,
                    // 50% (area width) / 10 (columns) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x1) = 45
                    width: 45,
                    // 10% (area height) / 2 (rows) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    height: 40
                });
            });
        });
        describe('inverted seat map', function () {
            var config = {
                seats: { margin: 5 },
                screen: { position: SeatPickerWidgetScreenPosition.Top }
            };
            it('returns the boundary of a normal seat', function () {
                var seat = {
                    type: SeatType.Normal,
                    position: {
                        columnIndex: 6,
                        rowIndex: 1
                    }
                };
                var boundary = getSeatBoundary(seat, area, scaleFactor, config);
                expect(boundary).toEqual({
                    // (2 - 1 - 1) * 10 / 2 = 0 * 10 (scaleFactor) = 0 + 5 (seat margin x1) = 5
                    top: 5,
                    // (10 - 6 - 1) * 50 / 10 = 15 * 10 (scaleFactor) = 150 + 5 (seat margin x1) = 155
                    left: 155,
                    // 50% (area width) / 10 (columns) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    width: 40,
                    // 10% (area height) / 2 (rows) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    height: 40
                });
            });
            it('returns the boundary of a left sofa seat', function () {
                var seat = {
                    type: SeatType.SofaLeft,
                    position: {
                        columnIndex: 6,
                        rowIndex: 1
                    }
                };
                var boundary = getSeatBoundary(seat, area, scaleFactor, config);
                expect(boundary).toEqual({
                    // (2 - 1 - 1) * 10 / 2 = 0 * 10 (scaleFactor) = 0 + 5 (seat margin x1) = 5
                    top: 5,
                    // (10 - 6 - 1) * 50 / 10 = 15 * 10 (scaleFactor) = 150 + 5 (seat margin x1) = 155
                    left: 155,
                    // 50% (area width) / 10 (columns) = 5% * 10 (scaleFactor) = 50 - 5 (seat margin x1) = 45
                    width: 45,
                    // 10% (area height) / 2 (rows) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    height: 40
                });
            });
            it('returns the boundary of a middle sofa seat', function () {
                var seat = {
                    type: SeatType.SofaMiddle,
                    position: {
                        columnIndex: 6,
                        rowIndex: 1
                    }
                };
                var boundary = getSeatBoundary(seat, area, scaleFactor, config);
                expect(boundary).toEqual({
                    // (2 - 1 - 1) * 10 / 2 = 0 * 10 (scaleFactor) = 0 + 5 (seat margin x1) = 5
                    top: 5,
                    // (10 - 6 - 1) * 50 / 10 = 15 * 10 (scaleFactor) = 150
                    left: 150,
                    // 50% (area width) / 10 (columns) = 5% * 10 (scaleFactor) = 50
                    width: 50,
                    // 10% (area height) / 2 (rows) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    height: 40
                });
            });
            it('returns the boundary of a right sofa seat', function () {
                var seat = {
                    type: SeatType.SofaRight,
                    position: {
                        columnIndex: 6,
                        rowIndex: 1
                    }
                };
                var boundary = getSeatBoundary(seat, area, scaleFactor, config);
                expect(boundary).toEqual({
                    // (2 - 1 - 1) * 10 / 2 = 0 * 10 (scaleFactor) = 0 + 5 (seat margin x1) = 5
                    top: 5,
                    // (10 - 6 - 1) * 50 / 10 = 15 * 10 (scaleFactor) = 150
                    left: 150,
                    // 50% (area width) / 10 (columns) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x1) = 45
                    width: 45,
                    // 10% (area height) / 2 (rows) = 5% * 10 (scaleFactor) = 50 - 10 (seat margin x2) = 40
                    height: 40
                });
            });
        });
    });
});
//# sourceMappingURL=seat.test.js.map