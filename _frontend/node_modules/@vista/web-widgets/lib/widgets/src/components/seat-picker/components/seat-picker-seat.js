var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { invertSeat, isFriendSeat, seatIsUnavailable } from '../../../../../api/src/stores/seating/helpers/utils/seat-utils';
import { SeatAvailability } from '../../../../../types/seating/seat-availability';
import { SeatType } from '../../../../../types/seating/seat-type';
import { getKeyCodeForEvent, KeyCode } from '../../../dom/key-code';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { Icon } from '../../icon/icon';
import { getSeatBoundary } from '../positioning/seat';
import { SeatPickerWidgetScreenPosition } from '../types/config';
import { SeatPickerSeatBackground } from './seat-picker-seat-background';
import { SeatPickerSeatSofaSeparators } from './seat-picker-seat-sofa-separators';
var SeatPickerSeat = /** @class */ (function (_super) {
    __extends(SeatPickerSeat, _super);
    function SeatPickerSeat() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.selectSeat = function (resetFocus) {
            _this.props.onSeatClicked(_this.props.seat);
            // Remove focus after the seat has been clicked.
            if (resetFocus && _this.seatElement)
                _this.seatElement.blur();
        };
        _this.handleKeyPress = function (event) {
            var keyCode = getKeyCodeForEvent(event);
            if (keyCode === KeyCode.Enter || keyCode === KeyCode.Space) {
                _this.selectSeat(false);
            }
        };
        _this.handleClick = function () {
            _this.selectSeat(true);
        };
        _this.handleMouseDown = function (event) {
            // Prevent default so the seat doesn't become focused.
            event.preventDefault();
        };
        return _this;
    }
    SeatPickerSeat.prototype.render = function () {
        var _this = this;
        var _a = this.props, seat = _a.seat, area = _a.area, rowLabel = _a.rowLabel, scaleFactor = _a.scaleFactor, config = _a.config, isSelectable = _a.isSelectable;
        var invertSeatMap = config.screen.position === SeatPickerWidgetScreenPosition.Top;
        var resolvedSeat = invertSeatMap ? invertSeat(seat) : seat;
        var seatLabel = resolvedSeat.seatLabel;
        var _b = getSeatBoundary(resolvedSeat, area, scaleFactor, config), top = _b.top, left = _b.left, width = _b.width, height = _b.height;
        var _c = config.seats, iconSize = _c.iconSize, showLabels = _c.showLabels;
        var svgIconSize = Math.min(width, height) * iconSize / 100;
        var accessibilityProps = {
            role: 'button',
            tabIndex: !seatIsUnavailable(resolvedSeat) && isSelectable ? 0 : -1,
            'aria-label': this.getAriaLabel(rowLabel, seatLabel, resolvedSeat, isSelectable),
            'aria-pressed': (resolvedSeat.availability === SeatAvailability.Selected)
        };
        var icon = this.getSeatIcon(resolvedSeat, config);
        var b = bemClassBuilderFactory('v-seat-picker-seat');
        return (React.createElement("a", __assign({ className: this.getSeatClass(b, resolvedSeat, isSelectable) }, accessibilityProps, { onClick: this.handleClick, onMouseDown: this.handleMouseDown, onKeyPress: this.handleKeyPress, ref: function (ele) { return (_this.seatElement = ele); } }),
            React.createElement("svg", { x: left, y: top, width: width, height: height },
                React.createElement(SeatPickerSeatBackground, { seat: resolvedSeat, seatDimensions: { width: width, height: height }, config: config }),
                React.createElement(SeatPickerSeatSofaSeparators, { seat: resolvedSeat, seatDimensions: { width: width, height: height }, config: config }),
                (!icon && showLabels && seatLabel && seatLabel.length > 0) &&
                    React.createElement("text", { className: b.element('label'), x: width / 2, y: height / 2, dominantBaseline: "central", alignmentBaseline: "central", textAnchor: "middle" }, seatLabel),
                icon &&
                    React.createElement(Icon, { name: icon, className: b.element('icon'), size: svgIconSize, x: (width - svgIconSize) / 2, y: (height - svgIconSize) / 2 }))));
    };
    SeatPickerSeat.prototype.getSeatIcon = function (seat, config) {
        var icons = config.seats.icons;
        if (isFriendSeat(seat))
            return icons.friend;
        switch (seat.type) {
            case SeatType.Normal: return icons.normal;
            case SeatType.Wheelchair: return icons.wheelchair;
            case SeatType.Companion: return icons.companion;
            case SeatType.SofaLeft: return icons.sofaLeft;
            case SeatType.SofaMiddle: return icons.sofaMiddle;
            case SeatType.SofaRight: return icons.sofaRight;
        }
    };
    SeatPickerSeat.prototype.getAriaLabel = function (rowLabel, seatLabel, seat, isSelectable) {
        var label = " seat " + rowLabel + seatLabel;
        if (seatIsUnavailable(seat) || !isSelectable) {
            return 'Unavailable' + label;
        }
        switch (seat.type) {
            case SeatType.SofaLeft: return 'Left sofa' + label;
            case SeatType.SofaMiddle: return 'Left sofa' + label;
            case SeatType.SofaRight: return 'Right sofa' + label;
            case SeatType.Wheelchair: return 'Wheelchair' + label;
            case SeatType.Companion: return 'Companion' + label;
            default: return 'Normal' + label;
        }
    };
    SeatPickerSeat.prototype.getSeatClass = function (b, seat, isSelectable) {
        var _a;
        var availability = this.getSeatAvailabilityClassModifier(seat.availability, isSelectable);
        return b.block((_a = {},
            _a[seat.type] = true,
            _a[availability] = true,
            _a.friend = isFriendSeat(seat),
            _a));
    };
    SeatPickerSeat.prototype.getSeatAvailabilityClassModifier = function (availability, isSelectable) {
        if (!isSelectable)
            return 'unavailable';
        switch (availability) {
            case SeatAvailability.Available: return 'available';
            case SeatAvailability.Selected: return 'selected';
            default: return 'unavailable';
        }
    };
    SeatPickerSeat = __decorate([
        observer
    ], SeatPickerSeat);
    return SeatPickerSeat;
}(React.Component));
export { SeatPickerSeat };
//# sourceMappingURL=seat-picker-seat.js.map