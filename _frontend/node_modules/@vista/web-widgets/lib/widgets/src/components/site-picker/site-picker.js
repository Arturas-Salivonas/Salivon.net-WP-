var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { browsingService } from '../../../../api/src/services/browsing/browsing-service';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../api/src/utils/logger';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { Formatter } from '../../utils/formatter';
import { SitePickerEmptyListMessage } from './components/site-picker-empty-list-message';
import { SitePickerSearchForm } from './components/site-picker-search-form';
import { SitePickerSelectedSiteList } from './components/site-picker-selected-site-list';
import { SitePickerSkeleton } from './components/site-picker-skeleton';
import { SitePickerUnselectedSiteList } from './components/site-picker-unselected-site-list';
import { siteCompareFn } from './utils/site-utils';
import { SitePickerMessage, SitePickerMessageType } from './components/site-picker-message';
/**
 * Renders a component that allows the user to choose the sites they wish to browse.
 */
var SitePicker = /** @class */ (function (_super) {
    __extends(SitePicker, _super);
    function SitePicker(props) {
        var _this = _super.call(this, props) || this;
        _this.handleSearchResultsChanged = function (filteredSites) { return _this.setState({ filteredSites: filteredSites }); };
        _this.handleSearchTermChanged = function (searchTerm) { return _this.setState({ searchTerm: searchTerm }); };
        _this.handleSelectedSiteClicked = function (siteId) { return _this.props.browsingStore.actions.removeSelectedSite(siteId); };
        _this.handleUnselectedSiteClicked = function (siteId) { return _this.props.browsingStore.actions.addSelectedSite(siteId); };
        _this.state = {
            filteredSites: undefined,
            searchTerm: '',
            failedToLoadSites: false
        };
        return _this;
    }
    SitePicker.prototype.render = function () {
        var _a = this.props, displayText = _a.displayText, browsingStore = _a.browsingStore, configurationStore = _a.configurationStore, assets = _a.assets;
        var _b = this.state, failedToLoadSites = _b.failedToLoadSites, filteredSites = _b.filteredSites, searchTerm = _b.searchTerm;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var allSitesLoaded = this.props.browsingStore.data.allSitesLoaded;
        if (!allSitesLoaded && failedToLoadSites) {
            return (React.createElement(SitePickerMessage, { messageType: SitePickerMessageType.FailedToLoadData, displayText: displayText, assets: assets }));
        }
        if (!allSitesLoaded) {
            return enableLoadingIndicator
                ? React.createElement(SitePickerSkeleton, null)
                : null;
        }
        var unselectedSites = browsingStore.selectors.getUnselectedSites().sort(siteCompareFn);
        var sitesToBeDisplayed = filteredSites || unselectedSites;
        var selectedSites = browsingStore.selectors.getSelectedSites();
        var maximumSelectedSites = configurationStore.data.browsing.maximumSelectedSites;
        var siteCountLabel = selectedSites.length < maximumSelectedSites
            ? getFormattedSiteCount(displayText.siteCountLabel, sitesToBeDisplayed.length, maximumSelectedSites)
            : getFormattedSiteCount(displayText.siteCountLabelMaximumSelected, sitesToBeDisplayed.length, maximumSelectedSites);
        var b = bemClassBuilderFactory('v-site-picker');
        return (React.createElement("div", { className: b.block() },
            React.createElement("div", { className: b.element('wrapper') },
                React.createElement(SitePickerSearchForm, { sites: unselectedSites, displayText: displayText, onResultsChanged: this.handleSearchResultsChanged, onSearchTermChanged: this.handleSearchTermChanged }),
                React.createElement(SitePickerSelectedSiteList, { sites: selectedSites, onSiteClicked: this.handleSelectedSiteClicked }),
                sitesToBeDisplayed.length > 0 &&
                    React.createElement("span", { className: b.element('site-count') }, siteCountLabel)),
            sitesToBeDisplayed.length > 0
                ?
                    React.createElement(SitePickerUnselectedSiteList, { sites: sitesToBeDisplayed, disabled: browsingStore.selectors.hasMaximumSelectedSites(), onSiteClicked: this.handleUnselectedSiteClicked })
                :
                    React.createElement(SitePickerEmptyListMessage, { searchTerm: searchTerm, displayText: displayText, assets: assets })));
    };
    SitePicker.prototype.componentDidMount = function () {
        var _this = this;
        var allSitesLoaded = this.props.browsingStore.data.allSitesLoaded;
        if (!allSitesLoaded) {
            browsingService.loadSites()
                .then(function (data) {
                _this.setState({ failedToLoadSites: false });
            })
                .catch(function (err) {
                _this.setState({ failedToLoadSites: true });
                Logger.error("Failed to fetch sites. " + err);
            });
        }
    };
    SitePicker = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], SitePicker);
    return SitePicker;
}(React.Component));
export { SitePicker };
var getFormattedSiteCount = function (template, siteCount, maximumSelectedSites) {
    return Formatter.Instance.template(template, { siteCount: siteCount, maximumSelectedSites: maximumSelectedSites });
};
//# sourceMappingURL=site-picker.js.map