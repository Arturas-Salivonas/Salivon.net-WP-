var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
import { vista } from '../../../../api/src/main';
import { orderStoreInstance } from '../../../../api/src/stores/order/order-store';
import { exampleFilm } from '../../../../example-data/browsing/film';
import { OrderTicketCategory } from '../../../../types/order/order-ticket';
import { TicketTypeCategory } from '../../../../types/sales-data/ticket-type';
import '../counter/styles/themes/light/counter-light';
import '../ticket-picker/bootstrap';
import '../ticket-picker/styles/themes/light/ticket-picker-light.scss';
var order = {
    cinemaChainId: '1',
    hasUnsavedChanges: false,
    bookingFee: 0,
    showtimes: [
        {
            showtimeId: '0000001',
            film: exampleFilm,
            screenName: 'Screen 1',
            startTime: new Date(2017, 10, 24),
            seats: [
                { rowLabel: 'A', seatLabel: '1', areaCategoryCode: 'AreaCategory1' },
                { rowLabel: 'A', seatLabel: '2', areaCategoryCode: 'AreaCategory1' },
                { rowLabel: 'A', seatLabel: '3', areaCategoryCode: 'AreaCategory1' }
            ],
            tickets: [
                { ticketTypeKey: '001', quantity: 0, category: OrderTicketCategory.Standard },
                { ticketTypeKey: '002', quantity: 1, category: OrderTicketCategory.Standard },
                { ticketTypeKey: '003', quantity: 0, category: OrderTicketCategory.Standard },
            ],
            ticketTypes: new Map([
                ['001', { id: '001', key: '001', areaCategoryCode: 'AreaCategory1', description: 'Adult', descriptionTranslations: [], price: 15.00, category: TicketTypeCategory.Standard }],
                ['002', { id: '002', key: '002', areaCategoryCode: 'AreaCategory1', description: 'Child', descriptionTranslations: [], price: 11.00, category: TicketTypeCategory.Standard }],
                ['003', { id: '003', key: '003', areaCategoryCode: 'AreaCategory2', description: 'Senior Citizen', descriptionTranslations: [], price: 12.50, category: TicketTypeCategory.Standard }],
            ])
        }
    ],
};
var userContextData = {
    cinemaChainId: '1',
    currentShowtimeId: '0000001',
    selectedFilms: {
        'HO00000193': {
            id: '001',
            title: '(2D) Marvel\'s Avengers Assemble'
        }
    },
    selectedShowtimes: [
        {
            id: '0000001',
            filmId: 'HO00000193',
            isAllocatedSeating: true,
            startTime: '!:Date:2018-12-01T04:40:00.000Z',
            businessDate: '',
            cinemaChainId: '1',
            siteId: '',
            startTimeString: ''
        }
    ],
    selectedSite: {
        siteId: '004',
        siteName: 'Hammersmith'
    }
};
var SeatFirstTestingHelper = /** @class */ (function (_super) {
    __extends(SeatFirstTestingHelper, _super);
    function SeatFirstTestingHelper(props) {
        var _this = _super.call(this, props) || this;
        orderStoreInstance.actions.setOrderData(order);
        return _this;
    }
    SeatFirstTestingHelper.prototype.componentDidMount = function () {
        vista.logger.setThreshold('all');
        vista.stores.order.setData(order);
        vista.stores.userContext.setData(userContextData);
        vista.widgets.configure({
            api: {
                url: 'http://localhost:3333',
                authToken: '1'
            }
        });
        this.ticketPickerWidget = vista.widgets.ticketPicker({
            selector: '#ticket-picker'
        });
    };
    SeatFirstTestingHelper.prototype.addTickets = function () {
        this.ticketPickerWidget.saveTicketSelection();
    };
    SeatFirstTestingHelper.prototype.render = function () {
        return (React.createElement("div", { style: { padding: '100px', backgroundColor: '#fff', border: '1px solid #DDDDDD', margin: '20px', borderRadius: '4px' } },
            React.createElement("div", { id: "counter", style: { display: 'flex', justifyContent: 'space-between', padding: '0 10px', alignItems: 'center' } },
                React.createElement("h1", { style: { fontSize: '17px', fontWeight: 600 } }, "Standard Tickets")),
            React.createElement("div", { id: "ticket-picker" })));
    };
    return SeatFirstTestingHelper;
}(React.Component));
export { SeatFirstTestingHelper };
//# sourceMappingURL=seat-first-testing-helper.js.map