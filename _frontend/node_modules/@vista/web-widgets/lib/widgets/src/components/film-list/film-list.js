var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { browsingService } from '../../../../api/src/services/browsing/browsing-service';
import { browsingStoreInstance } from '../../../../api/src/stores/browsing/browsing-store';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../api/src/utils/logger';
import { sortArrayByProperty } from '../../utils/array-utils';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { FilmListMessage, FilmListMessageType } from './components/film-list-message';
import { FilmListSkeleton } from './components/film-list-skeleton';
import { FilmListTabs } from './components/film-list-tabs';
var FilmList = /** @class */ (function (_super) {
    __extends(FilmList, _super);
    function FilmList(props) {
        var _this = _super.call(this, props) || this;
        _this.handleApiError = function (logMessage) {
            _this.setState({ failedToLoadFilms: true });
            Logger.error(logMessage);
        };
        _this.handleFilmClicked = function (film) {
            var onFilmClicked = _this.props.onFilmClicked;
            if (onFilmClicked)
                onFilmClicked(film);
        };
        _this.state = { failedToLoadFilms: false };
        return _this;
    }
    FilmList.prototype.render = function () {
        var _a = this.props, config = _a.config, displayText = _a.displayText, assets = _a.assets, siteId = _a.siteId;
        var failedToLoadFilms = this.state.failedToLoadFilms;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var films = siteId
            ? browsingStoreInstance.selectors.getFilmsForSite(siteId)
            : browsingStoreInstance.selectors.getAllFilms();
        if (failedToLoadFilms) {
            return (React.createElement(FilmListMessage, { messageType: FilmListMessageType.FailedToLoadData, displayText: displayText, assets: assets }));
        }
        if (films === undefined) {
            return enableLoadingIndicator
                ? React.createElement(FilmListSkeleton, { mode: config.mode })
                : null;
        }
        var sortedFilms = sortArrayByProperty(films, 'displayPriority');
        var b = bemClassBuilderFactory('v-film-list');
        return (React.createElement("div", { className: b.block() },
            React.createElement(FilmListTabs, { films: sortedFilms, config: config, displayText: displayText, assets: assets, onFilmClicked: this.handleFilmClicked })));
    };
    FilmList.prototype.componentDidMount = function () {
        var _this = this;
        var siteId = this.props.siteId;
        if (siteId === undefined) {
            browsingService.loadFilms().catch(function (err) {
                _this.handleApiError("Failed to fetch films. " + err);
            });
        }
        else {
            browsingService.loadFilmsForSite(siteId).catch(function (err) {
                _this.handleApiError("Failed to fetch films for site: " + siteId + ". " + err);
            });
        }
    };
    FilmList = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], FilmList);
    return FilmList;
}(React.Component));
export { FilmList };
//# sourceMappingURL=film-list.js.map