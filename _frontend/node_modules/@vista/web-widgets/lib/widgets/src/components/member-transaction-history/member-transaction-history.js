var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../api/src/utils/logger';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { Button, ButtonColor, ButtonSize } from '../button/button';
import { MemberTransactionHistoryMessage, MemberTransactionHistoryMessageType } from './components/member-transaction-history-message';
import { MemberTransactionHistorySkeleton } from './components/member-transaction-history-skeleton';
import { MemberTransactionHistoryTable } from './components/member-transaction-history-table';
import { memberTransactionUtils } from './utils/member-transaction-history-utils';
var MemberTransactionHistory = /** @class */ (function (_super) {
    __extends(MemberTransactionHistory, _super);
    function MemberTransactionHistory(props) {
        var _this = _super.call(this, props) || this;
        _this.loadNextPage = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, loyaltyMemberService, config, _b, _c, oldTransactions, oldRelatedData, _d, responseTransactions, responseRelatedData, isFullyLoaded, _e, transactionHistory, relatedData, error_1;
            return __generator(this, function (_f) {
                switch (_f.label) {
                    case 0:
                        _a = this.props, loyaltyMemberService = _a.loyaltyMemberService, config = _a.config;
                        _b = this.state, _c = _b.transactions, oldTransactions = _c === void 0 ? [] : _c, oldRelatedData = _b.relatedData;
                        this.setState({ isLoading: true });
                        _f.label = 1;
                    case 1:
                        _f.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, loyaltyMemberService.loadTransactionHistory(config.numberOfTransactionsToLoad, oldTransactions.length)];
                    case 2:
                        _d = _f.sent(), responseTransactions = _d.transactions, responseRelatedData = _d.relatedData, isFullyLoaded = _d.isFullyLoaded;
                        _e = memberTransactionUtils.mapMemberTransactionHistory(responseTransactions, responseRelatedData, oldTransactions, oldRelatedData), transactionHistory = _e.transactionHistory, relatedData = _e.relatedData;
                        transactionHistory.length === 0 && this.updateMemberTransactionHistoryErrorMessageType(MemberTransactionHistoryMessageType.NoMemberTransactionData);
                        this.setState({ isLoading: false, transactions: transactionHistory, relatedData: relatedData, isFullyLoaded: isFullyLoaded });
                        return [3 /*break*/, 4];
                    case 3:
                        error_1 = _f.sent();
                        this.handleApiError("Failed to fetch transaction history. " + error_1);
                        this.updateMemberTransactionHistoryErrorMessageType(MemberTransactionHistoryMessageType.FailedToLoadData);
                        this.setState({ isLoading: false });
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        _this.updateMemberTransactionHistoryErrorMessageType = function (newErrorMessage) {
            _this.setState({ errorMessageType: newErrorMessage });
        };
        _this.state = {
            isLoading: true,
            isFullyLoaded: false,
        };
        return _this;
    }
    MemberTransactionHistory.prototype.render = function () {
        var _a = this.props, displayText = _a.displayText, configurationStore = _a.configurationStore, assets = _a.assets;
        var _b = this.state, failedToLoadTransactions = _b.failedToLoadTransactions, isLoading = _b.isLoading, isFullyLoaded = _b.isFullyLoaded, transactions = _b.transactions, relatedData = _b.relatedData;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var invalidState = this.state.errorMessageType && { messageType: this.state.errorMessageType };
        if (!failedToLoadTransactions && !transactions)
            return enableLoadingIndicator ? React.createElement(MemberTransactionHistorySkeleton, null) : null;
        var b = bemClassBuilderFactory('v-member-transaction-history');
        return (React.createElement("div", { className: b.block() }, invalidState ?
            React.createElement(MemberTransactionHistoryMessage, { messageType: invalidState.messageType, displayText: displayText, assets: assets }) :
            React.createElement(React.Fragment, null,
                React.createElement(MemberTransactionHistoryTable, { transactions: transactions ? transactions : [], relatedData: relatedData, displayText: displayText, configurationStore: configurationStore }),
                !isFullyLoaded &&
                    React.createElement(Button, { className: b.element('load-more-button'), color: ButtonColor.Secondary, size: ButtonSize.Small, loading: isLoading, label: displayText.buttonLoadMoreLabel, onClick: this.loadNextPage }))));
    };
    MemberTransactionHistory.prototype.componentDidMount = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadNextPage()];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    MemberTransactionHistory.prototype.handleApiError = function (logMessage) {
        this.setState({ failedToLoadTransactions: true });
        this.updateMemberTransactionHistoryErrorMessageType(MemberTransactionHistoryMessageType.FailedToLoadData);
        Logger.error(logMessage);
    };
    MemberTransactionHistory = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], MemberTransactionHistory);
    return MemberTransactionHistory;
}(React.Component));
export { MemberTransactionHistory };
//# sourceMappingURL=member-transaction-history.js.map