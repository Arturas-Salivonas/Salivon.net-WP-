var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { Notification } from '../../notification/notification';
import { mapTicketPickerErrorMessage } from '../mappers/ticket-picker-error-message-mapper';
var TicketPickerNotification = /** @class */ (function (_super) {
    __extends(TicketPickerNotification, _super);
    function TicketPickerNotification() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    TicketPickerNotification.prototype.render = function () {
        var _a = this.props, errors = _a.errors, style = _a.style, displayText = _a.displayText, onNotificationClosed = _a.onNotificationClosed;
        return (React.createElement(Notification, { wrapperClassName: "v-ticket-picker-notification", style: style, onCloseButtonClick: onNotificationClosed },
            React.createElement("ul", null, errors.map(function (error) { return React.createElement("li", { key: "ticket-notification-" + error }, mapTicketPickerErrorMessage(error, displayText)); }))));
    };
    TicketPickerNotification = __decorate([
        observer
    ], TicketPickerNotification);
    return TicketPickerNotification;
}(React.Component));
export { TicketPickerNotification };
//# sourceMappingURL=ticket-picker-notification.js.map