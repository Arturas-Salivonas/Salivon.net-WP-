var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { configurationStoreInstance } from '../../../../api/src/stores/configuration/configuration-store';
import { Logger } from '../../../../api/src/utils/logger';
import { loadAllItemButtonGroupsForSiteApi } from '../../../../api/src/widgets-api/sales-data/load-all-item-button-groups-for-site-api';
import { bemClassBuilderFactory } from '../../utils/bem-class-builder';
import { ItemPickerMessage, ItemPickerMessageType } from './components/item-picker-message';
import { ItemPickerSkeleton } from './components/item-picker-skeleton';
import { ItemPickerTabs } from './components/item-picker-tabs';
var ItemPicker = /** @class */ (function (_super) {
    __extends(ItemPicker, _super);
    function ItemPicker(props) {
        var _this = _super.call(this, props) || this;
        _this.handleItemClicked = function (itemModel) {
            var _a = _this.props, onItemClicked = _a.onItemClicked, orderStore = _a.orderStore;
            orderStore.actions.addItem(itemModel);
            if (onItemClicked)
                onItemClicked(itemModel);
        };
        _this.state = { failedToLoadItems: false };
        return _this;
    }
    ItemPicker.prototype.render = function () {
        var _a = this.props, siteId = _a.siteId, orderStore = _a.orderStore, salesDataStore = _a.salesDataStore, displayText = _a.displayText, assets = _a.assets;
        var failedToLoadItems = this.state.failedToLoadItems;
        var getAllItemButtonGroupsForSite = salesDataStore.selectors.getAllItemButtonGroupsForSite;
        var enableLoadingIndicator = configurationStoreInstance.data.enableLoadingIndicator;
        var buttonGroups = getAllItemButtonGroupsForSite(siteId);
        if (!failedToLoadItems && buttonGroups === undefined) {
            return enableLoadingIndicator ? React.createElement(ItemPickerSkeleton, null) : null;
        }
        var b = bemClassBuilderFactory('v-item-picker');
        return (React.createElement("div", { className: b.block() }, failedToLoadItems ?
            React.createElement(ItemPickerMessage, { messageType: ItemPickerMessageType.FailedToLoadData, displayText: displayText, assets: assets })
            :
                React.createElement(ItemPickerTabs, { buttonGroups: buttonGroups || [], orderStore: orderStore, salesDataStore: salesDataStore, displayText: displayText, onItemClicked: this.handleItemClicked })));
    };
    ItemPicker.prototype.componentDidMount = function () {
        var _this = this;
        var _a = this.props, salesDataStore = _a.salesDataStore, siteId = _a.siteId;
        var loadAllItemButtonGroupsForSite = salesDataStore.actions.loadAllItemButtonGroupsForSite;
        var cinemaChainId = configurationStoreInstance.data.api.cinemaChainId;
        loadAllItemButtonGroupsForSite(loadAllItemButtonGroupsForSiteApi, cinemaChainId, siteId).catch(function (err) {
            _this.setState({ failedToLoadItems: true });
            Logger.error("Failed to load items for site " + siteId + ". " + err);
        });
    };
    ItemPicker = __decorate([
        observer,
        __metadata("design:paramtypes", [Object])
    ], ItemPicker);
    return ItemPicker;
}(React.Component));
export { ItemPicker };
//# sourceMappingURL=item-picker.js.map