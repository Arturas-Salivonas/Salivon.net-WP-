var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { cannotExceedAllocatedSeatsForAreaCategoryRule } from '../../../../../api/src/stores/seating/helpers/rules/cannot-exceed-allocated-seats-for-area-category-rule';
import { cannotLeaveGapsBetweenSelectedSeatsRule } from '../../../../../api/src/stores/seating/helpers/rules/cannot-leave-gaps-between-selected-seats-rule';
import { cannotLeaveSingleSeatGapFromAisleRule } from '../../../../../api/src/stores/seating/helpers/rules/cannot-leave-single-seat-gap-from-aisle-rule';
import { cannotLeaveSingleSeatGapFromUnavailableSeatRule } from '../../../../../api/src/stores/seating/helpers/rules/cannot-leave-single-seat-gap-from-unavailable-seat-rule';
import { cannotSelectUnavailableSeatsRule } from '../../../../../api/src/stores/seating/helpers/rules/cannot-select-unavailable-seats-rule';
import { mustFillSofaSeatsRule } from '../../../../../api/src/stores/seating/helpers/rules/must-fill-sofa-seats-rule';
import { mustSelectAllSeatsAllocatedForOrderRule } from '../../../../../api/src/stores/seating/helpers/rules/must-select-all-seats-allocated-for-order-rule';
import { mustSelectAssociatedWheelchairSeatRule } from '../../../../../api/src/stores/seating/helpers/rules/must-select-associated-wheelchair-seat-rule';
import { mustSelectAtLeastOneSeatRule } from '../../../../../api/src/stores/seating/helpers/rules/must-select-at-leat-one-seat-rule';
import { defaultSeatSelectionRules } from '../../../../../api/src/stores/seating/helpers/rules/rules';
import { fieldValidator } from '../../../../../api/src/utils/field-validator';
import { Validator } from '../../../../../api/src/utils/validator';
/**
 * Maps the rules config provided via the API to an array of rules required by the seat selection handler.
 * @param config
 */
export function mapSeatPickerSeatSelectionRules(config) {
    if (!config)
        return defaultSeatSelectionRules;
    var valid = new Validator().ofType('object').validate(config, 'Seat picker seat selection rules config');
    if (!valid)
        return defaultSeatSelectionRules;
    var validatedConfig = getValidatedSeatPickerSeatSelectionRules(config);
    var rules = [];
    if (isRuleEnabled(validatedConfig.cannotSelectUnavailableSeats)) {
        rules.push(cannotSelectUnavailableSeatsRule());
    }
    if (isRuleEnabled(validatedConfig.cannotExceedAllocatedSeatsForAreaCategory)) {
        rules.push(cannotExceedAllocatedSeatsForAreaCategoryRule());
    }
    if (isRuleEnabled(validatedConfig.mustSelectAllSeatsAllocatedForOrder)) {
        rules.push(mustSelectAllSeatsAllocatedForOrderRule());
    }
    if (isRuleEnabled(validatedConfig.mustSelectAtLeastOneSeat)) {
        rules.push(mustSelectAtLeastOneSeatRule());
    }
    if (isRuleEnabled(validatedConfig.mustFillSofaSeats)) {
        rules.push(mustFillSofaSeatsRule());
    }
    if (isRuleEnabled(validatedConfig.mustSelectAssociatedWheelchairSeat)) {
        rules.push(mustSelectAssociatedWheelchairSeatRule());
    }
    if (isRuleEnabled(validatedConfig.cannotLeaveGapsBetweenSelectedSeatsRule)) {
        var options = validatedConfig.cannotLeaveGapsBetweenSelectedSeatsRule
            ? __assign({}, validatedConfig.cannotLeaveGapsBetweenSelectedSeatsRule) : undefined;
        rules.push(cannotLeaveGapsBetweenSelectedSeatsRule(options));
    }
    if (isRuleEnabled(validatedConfig.cannotLeaveSingleSeatGapFromUnavailableSeat)) {
        var options = validatedConfig.cannotLeaveSingleSeatGapFromUnavailableSeat
            ? __assign({}, validatedConfig.cannotLeaveSingleSeatGapFromUnavailableSeat) : undefined;
        rules.push(cannotLeaveSingleSeatGapFromUnavailableSeatRule(options));
    }
    if (isRuleEnabled(validatedConfig.cannotLeaveSingleSeatGapFromAisle)) {
        var options = validatedConfig.cannotLeaveSingleSeatGapFromAisle
            ? __assign({}, validatedConfig.cannotLeaveSingleSeatGapFromAisle) : undefined;
        rules.push(cannotLeaveSingleSeatGapFromAisleRule(options));
    }
    return rules;
}
function getValidatedSeatPickerSeatSelectionRules(config) {
    var validateField = fieldValidator(config);
    var validator = new Validator().ofType('object');
    validateField(validator, 'cannotSelectUnavailableSeats', 'Seat picker seat selection rule cannotSelectUnavailableSeats');
    validateField(validator, 'cannotExceedAllocatedSeatsForAreaCategory', 'Seat picker seat selection rule cannotExceedAllocatedSeatsForAreaCategory');
    validateField(validator, 'mustSelectAllSeatsAllocatedForOrder', 'Seat picker seat selection rule mustSelectAllSeatsAllocatedForOrder');
    validateField(validator, 'mustSelectAtLeastOneSeat', 'Seat picker seat selection rule mustSelectAtLeastOneSeat');
    validateField(validator, 'mustFillSofaSeats', 'Seat picker seat selection rule mustFillSofaSeats');
    validateField(validator, 'mustSelectAssociatedWheelchairSeat', 'Seat picker seat selection rule mustSelectAssociatedWheelchairSeat');
    validateField(validator, 'cannotLeaveGapsBetweenSelectedSeatsRule', 'Seat picker seat selection rule cannotLeaveGapsBetweenSelectedSeatsRule');
    validateField(validator, 'cannotLeaveSingleSeatGapFromUnavailableSeat', 'Seat picker seat selection rule cannotLeaveSingleSeatGapFromUnavailableSeat');
    validateField(validator, 'cannotLeaveSingleSeatGapFromAisle', 'Seat picker seat selection rule cannotLeaveSingleSeatGapFromAisle');
    return config;
}
function isRuleEnabled(config) {
    return !config || config.enabled !== false;
}
//# sourceMappingURL=rules-mapper.js.map