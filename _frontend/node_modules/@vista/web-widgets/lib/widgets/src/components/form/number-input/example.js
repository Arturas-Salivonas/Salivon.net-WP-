var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import * as React from 'react';
// import '../../../scss/themes/dark/_all.scss';
import '../../../scss/themes/light/_all.scss';
import { FormElementStyle } from '../form-element-style';
import { NumberInput, NumberInputType } from './number-input';
var NumberInputExample = /** @class */ (function (_super) {
    __extends(NumberInputExample, _super);
    function NumberInputExample(props) {
        var _this = _super.call(this, props) || this;
        _this.handleChange = function (newValue) {
            _this.setState({
                value: newValue
            });
        };
        _this.state = {
            value: 0
        };
        return _this;
    }
    NumberInputExample.prototype.render = function () {
        return (React.createElement("div", { style: { padding: '20px', maxWidth: '500px', margin: '0 auto' } },
            React.createElement("h1", null, "Number Input"),
            React.createElement("h2", null, "Normal number input"),
            React.createElement(NumberInput, { type: NumberInputType.Spinner, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { type: NumberInputType.Basic, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { type: NumberInputType.Select, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("h2", null, "Warning number input"),
            React.createElement(NumberInput, { style: FormElementStyle.Warning, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { style: FormElementStyle.Warning, type: NumberInputType.Basic, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { style: FormElementStyle.Warning, type: NumberInputType.Select, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("h2", null, "Error number input"),
            React.createElement(NumberInput, { style: FormElementStyle.Error, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { style: FormElementStyle.Error, type: NumberInputType.Basic, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { style: FormElementStyle.Error, type: NumberInputType.Select, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("h2", null, "Success number input"),
            React.createElement(NumberInput, { style: FormElementStyle.Success, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { style: FormElementStyle.Success, type: NumberInputType.Basic, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { style: FormElementStyle.Success, type: NumberInputType.Select, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("h2", null, "Disabled number input"),
            React.createElement(NumberInput, { disabled: true, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { disabled: true, type: NumberInputType.Basic, value: this.state.value, onChangeValue: this.handleChange }),
            React.createElement("br", null),
            React.createElement(NumberInput, { disabled: true, type: NumberInputType.Select, value: this.state.value, onChangeValue: this.handleChange })));
    };
    return NumberInputExample;
}(React.Component));
export { NumberInputExample };
//# sourceMappingURL=example.js.map