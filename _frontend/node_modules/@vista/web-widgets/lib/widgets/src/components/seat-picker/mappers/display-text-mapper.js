var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { fieldValidator } from '../../../../../api/src/utils/field-validator';
import { Validator } from '../../../../../api/src/utils/validator';
import { defaultSeatPickerDisplayText } from '../types/display-text';
/**
 * Maps the display text provided via the API to the display text required by the Seat Picker widget.
 * Nulls out any invalid values and logs appropriate warnings.
 * Any undefined values will be replaced during mapping by the defaults.
 */
export function mapSeatPickerDisplayText(displayText) {
    if (!displayText)
        return defaultSeatPickerDisplayText;
    var valid = new Validator().ofType('object').validate(displayText, 'Seat picker display text');
    if (!valid)
        return defaultSeatPickerDisplayText;
    var validatedDisplayText = getValidatedSeatPickerDisplayText(displayText);
    return __assign({}, defaultSeatPickerDisplayText, validatedDisplayText);
}
/**
 * Validates the display text values provided for the Seat Picker.
 * Removes any invalid values and logs appropriate warnings.
 */
export function getValidatedSeatPickerDisplayText(displayText) {
    var validateField = fieldValidator(displayText);
    var validator = new Validator().ofType('string').minLength(1);
    var nullableValidator = new Validator().ofType('string').minLength(1).allowNull().allowUndefined();
    validateField(nullableValidator, 'screenLabel', 'Seat picker screenLabel');
    validateField(validator, 'legendItemAvailableLabel', 'Seat picker legendItemAvailableLabel');
    validateField(validator, 'legendItemUnavailableLabel', 'Seat picker legendItemUnavailableLabel');
    validateField(validator, 'legendItemSelectedLabel', 'Seat picker legendItemSelectedLabel');
    validateField(validator, 'legendItemWheelchairLabel', 'Seat picker legendItemWheelchairLabel');
    validateField(validator, 'legendItemCompanionLabel', 'Seat picker legendItemCompanionLabel');
    validateField(validator, 'legendItemFriendLabel', 'Seat picker legendItemFriendLabel');
    validateField(validator, 'errorExceededAllocatedSeatsMessage', 'Seat picker errorExceededAllocatedSeatsMessage');
    validateField(validator, 'errorGapBetweenSelectedSeatsMessage', 'Seat picker errorGapBetweenSelectedSeatsMessage');
    validateField(validator, 'errorSingleSeatGapFromAisleMessage', 'Seat picker errorSingleSeatGapFromAisleMessage');
    validateField(validator, 'errorSingleSeatGapFromUnavailableSeatMessage', 'Seat picker errorSingleSeatGapFromUnavailableSeatMessage');
    validateField(validator, 'errorSelectedUnavailableSeatMessage', 'Seat picker errorSelectedUnavailableSeatMessage');
    validateField(validator, 'errorEntireSofaNotSelectedMessage', 'Seat picker errorEntireSofaNotSelectedMessage');
    validateField(validator, 'errorNotAllSeatsSelectedMessage', 'Seat picker errorNotAllSeatsSelectedMessage');
    validateField(validator, 'errorCompanionSeatNotSelectedMessage', 'Seat picker errorCompanionSeatNotSelectedMessage');
    validateField(validator, 'errorNoSeatsSelectedMessage', 'Seat picker errorNoSeatsSelectedMessage');
    validateField(validator, 'errorApiSelectedUnavailableSeatsMessage', 'Seat picker errorApiSelectedUnavailableSeatsMessage');
    validateField(validator, 'errorApiFailedToReserveSeatsMessage', 'Seat picker errorApiFailedToReserveSeatsMessage');
    return displayText;
}
//# sourceMappingURL=display-text-mapper.js.map