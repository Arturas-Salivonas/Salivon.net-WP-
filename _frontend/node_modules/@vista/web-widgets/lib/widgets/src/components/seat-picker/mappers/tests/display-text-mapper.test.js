import { defaultSeatPickerDisplayText } from '../../types/display-text';
import { mapSeatPickerDisplayText } from '../display-text-mapper';
describe('mapSeatPickerDisplayText', function () {
    it('returns the default display text when the provided display text is undefined', function () {
        var result = mapSeatPickerDisplayText(undefined);
        expect(result).toEqual(defaultSeatPickerDisplayText);
    });
    it('returns the default display text when the provided display text is invalid', function () {
        var result = mapSeatPickerDisplayText(true);
        expect(result).toEqual(defaultSeatPickerDisplayText);
    });
    var propertyTestCases = function (defaultValue, allowNull) {
        if (allowNull === void 0) { allowNull = false; }
        return [
            { value: undefined, expected: allowNull ? undefined : defaultValue },
            { value: null, expected: allowNull ? null : defaultValue },
            { value: 0, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: {}, expected: defaultValue },
            { value: [], expected: defaultValue },
            { value: 'valid', expected: 'valid' },
        ];
    };
    describe('screenLabel', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.screenLabel, true);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    screenLabel: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.screenLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('legendItemAvailableLabel', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.legendItemAvailableLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    legendItemAvailableLabel: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.legendItemAvailableLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('legendItemUnavailableLabel', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.legendItemUnavailableLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    legendItemUnavailableLabel: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.legendItemUnavailableLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('legendItemSelectedLabel', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.legendItemSelectedLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    legendItemSelectedLabel: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.legendItemSelectedLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('legendItemWheelchairLabel', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.legendItemWheelchairLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    legendItemWheelchairLabel: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.legendItemWheelchairLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('legendItemCompanionLabel', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.legendItemCompanionLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    legendItemCompanionLabel: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.legendItemCompanionLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('legendItemFriendLabel', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.legendItemFriendLabel);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    legendItemFriendLabel: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.legendItemFriendLabel).toEqual(testCase.expected);
            });
        });
    });
    describe('errorExceededAllocatedSeatsMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorExceededAllocatedSeatsMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorExceededAllocatedSeatsMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorExceededAllocatedSeatsMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorGapBetweenSelectedSeatsMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorGapBetweenSelectedSeatsMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorGapBetweenSelectedSeatsMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorGapBetweenSelectedSeatsMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorSingleSeatGapFromAisleMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorSingleSeatGapFromAisleMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorSingleSeatGapFromAisleMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorSingleSeatGapFromAisleMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorSingleSeatGapFromUnavailableSeatMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorSingleSeatGapFromUnavailableSeatMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorSingleSeatGapFromUnavailableSeatMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorSingleSeatGapFromUnavailableSeatMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorSelectedUnavailableSeatMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorSelectedUnavailableSeatMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorSelectedUnavailableSeatMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorSelectedUnavailableSeatMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorEntireSofaNotSelectedMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorEntireSofaNotSelectedMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorEntireSofaNotSelectedMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorEntireSofaNotSelectedMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorNotAllSeatsSelectedMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorNotAllSeatsSelectedMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorNotAllSeatsSelectedMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorNotAllSeatsSelectedMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorCompanionSeatNotSelectedMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorCompanionSeatNotSelectedMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorCompanionSeatNotSelectedMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorCompanionSeatNotSelectedMessage).toEqual(testCase.expected);
            });
        });
    });
    describe('errorNoSeatsSelectedMessage', function () {
        var testCases = propertyTestCases(defaultSeatPickerDisplayText.errorNoSeatsSelectedMessage);
        testCases.forEach(function (testCase) {
            it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                var displayText = {
                    errorNoSeatsSelectedMessage: testCase.value
                };
                var result = mapSeatPickerDisplayText(displayText);
                expect(result.errorNoSeatsSelectedMessage).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=display-text-mapper.test.js.map