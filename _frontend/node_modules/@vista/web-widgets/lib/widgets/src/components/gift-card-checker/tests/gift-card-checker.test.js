var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { create } from 'react-test-renderer';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { GiftCardChecker, GiftCardCheckerDisplayMode } from '../gift-card-checker';
import { defaultGiftCardCheckerConfig } from '../types/config';
import { defaultGiftCardCheckerDisplayText } from '../types/display-text';
describe('GiftCardChecker', function () {
    var getGiftCardDetailsMock = jest.fn();
    var props = {
        config: defaultGiftCardCheckerConfig,
        displayText: defaultGiftCardCheckerDisplayText,
        getGiftCardDetails: getGiftCardDetailsMock
    };
    var getGiftCardChecker = function () {
        var renderer = create(React.createElement(GiftCardChecker, __assign({}, props)));
        var giftCardChecker = renderer.getInstance();
        return { renderer: renderer, giftCardChecker: giftCardChecker };
    };
    beforeEach(function () {
        jest.resetAllMocks();
    });
    it('renders correctly', function () {
        compareToSnapshot(React.createElement(GiftCardChecker, __assign({}, props)));
    });
    it('renders the form when the card details are undefined', function () {
        var _a = getGiftCardChecker(), giftCardChecker = _a.giftCardChecker, renderer = _a.renderer;
        giftCardChecker.setState({
            cardDetails: undefined,
            displayMode: GiftCardCheckerDisplayMode.Details
        });
        var tree = renderer.toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('sets card details correctly', function () {
        var _a = getGiftCardChecker(), giftCardChecker = _a.giftCardChecker, renderer = _a.renderer;
        var cardDetails = {
            cardNumber: '12345',
            balance: 11.50,
            expiryDate: new Date('11 Dec 2018')
        };
        giftCardChecker.setCardDetails(cardDetails);
        expect(giftCardChecker.state).toEqual({
            displayMode: GiftCardCheckerDisplayMode.Details,
            cardDetails: cardDetails
        });
        var tree = renderer.toJSON();
        expect(tree).toMatchSnapshot();
    });
    it('clears card details correctly', function () {
        var _a = getGiftCardChecker(), giftCardChecker = _a.giftCardChecker, renderer = _a.renderer;
        giftCardChecker.setCardDetails({
            cardNumber: '12345',
            balance: 11.50,
            expiryDate: new Date('11 Dec 2018')
        });
        giftCardChecker.clearCardDetails();
        expect(giftCardChecker.state).toEqual({
            displayMode: GiftCardCheckerDisplayMode.Form,
            cardDetails: undefined
        });
        var tree = renderer.toJSON();
        expect(tree).toMatchSnapshot();
    });
});
//# sourceMappingURL=gift-card-checker.test.js.map