var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import * as React from 'react';
import { browsingStoreInstance } from '../../../../../api/src/stores/browsing/browsing-store';
import { exampleCensorRatings } from '../../../../../example-data/browsing/censor-rating';
import { exampleFilms } from '../../../../../example-data/browsing/film';
import { exampleShowtimeAttributes } from '../../../../../example-data/browsing/showtime-attributes';
import { exampleShowtimes } from '../../../../../example-data/browsing/showtimes';
import { exampleSites } from '../../../../../example-data/browsing/site';
import { LoadingState } from '../../../../../types/loading-state';
import { compareToSnapshot } from '../../../tests/compare-to-snapshot';
import { ShowtimePickerFilm } from '../components/showtime-picker-film';
import { defaultShowtimePickerConfig } from '../types/config';
import { defaultShowtimePickerDisplayText } from '../types/display-text';
describe('ShowtimePickerFilm', function () {
    var onShowtimeClicked = function (showtime) { return function () { return undefined; }; };
    var browsingStore = browsingStoreInstance;
    var attributesMap = new Map();
    Object.values(exampleShowtimeAttributes).forEach(function (exampleAttr) { return attributesMap.set(exampleAttr.id, exampleAttr); });
    var sitesMap = new Map();
    Object.values(exampleSites).forEach(function (exampleSite) { return sitesMap.set(exampleSite.id, exampleSite); });
    var filmsMap = new Map();
    Object.values(exampleFilms).forEach(function (exampleFilm) { return filmsMap.set(exampleFilm.id, exampleFilm); });
    var showtimesMap = new Map();
    exampleShowtimes.slice(0, 5).forEach(function (showtime) { return showtimesMap.set(showtime.id, showtime); });
    var censorRatingsMap = new Map(exampleCensorRatings.map(function (rating) { return [rating.id, rating]; }));
    browsingStore.setData({
        filmsById: filmsMap,
        sitesById: sitesMap,
        showtimeAttributesById: attributesMap,
        showtimesById: showtimesMap,
        censorRatingsById: censorRatingsMap,
    });
    var query = {
        filmIds: [exampleFilms[0].id, exampleFilms[0].id],
        siteIds: exampleSites.map(function (s) { return s.id; }),
    };
    var showtimesForDate = {
        loadingState: LoadingState.Success,
        payload: exampleShowtimes.map(function (showtime) { return showtime.id; }),
        timestamp: new Date()
    };
    browsingStoreInstance.actions.setShowtimesForQueryOnBusinessDate(showtimesForDate, query, '2018-12-30');
    var testProps = {
        filmId: exampleFilms[0].id,
        siteIds: exampleSites.map(function (site) { return site.id; }).slice(0, 2),
        showtimes: exampleShowtimes.slice(0, 5),
        onShowtimeClicked: onShowtimeClicked,
        browsingStore: browsingStore,
        config: defaultShowtimePickerConfig,
        displayText: defaultShowtimePickerDisplayText,
    };
    describe('No showtimes', function () {
        it('should render correctly', function () {
            compareToSnapshot(React.createElement(ShowtimePickerFilm, __assign({}, __assign({}, testProps, { showtimes: [] }))));
        });
    });
    describe('With showtimes', function () {
        it('should render correctly', function () {
            compareToSnapshot(React.createElement(ShowtimePickerFilm, __assign({}, testProps)));
        });
    });
});
//# sourceMappingURL=showtime-picker-film.test.js.map