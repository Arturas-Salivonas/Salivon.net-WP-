var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
import { observer } from 'mobx-react';
import * as React from 'react';
import { JourneyOrderShowtimeStatus } from '../../../../../api/src/widgets-api/journey/utils/get-journey-order-showtime-status';
import { JourneyStatus } from '../../../../../api/src/widgets-api/journey/utils/get-journey-state';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
var OrderSummaryStatusIndicator = /** @class */ (function (_super) {
    __extends(OrderSummaryStatusIndicator, _super);
    function OrderSummaryStatusIndicator() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    OrderSummaryStatusIndicator.prototype.render = function () {
        var _a = this.props, journeyStatus = _a.journeyStatus, nextShowtimeStatus = _a.nextShowtimeStatus, countdownForNextShowtime = _a.countdownForNextShowtime, displayText = _a.displayText;
        var label = this.getLabelForStatus(displayText, journeyStatus, nextShowtimeStatus);
        var message = this.getMessageForStatus(nextShowtimeStatus, countdownForNextShowtime);
        var b = bemClassBuilderFactory('v-order-summary-status-indicator');
        return (React.createElement("div", { className: b.block() },
            (label && label.length > 0) &&
                React.createElement("span", { className: b.element('label') }, label),
            (message && message.length > 0) &&
                React.createElement("span", { className: b.element('message') }, message)));
    };
    OrderSummaryStatusIndicator.prototype.getLabelForStatus = function (displayText, journeyStatus, showtimeStatus) {
        switch (journeyStatus) {
            case JourneyStatus.Active: return this.getLabelForShowtimeStatus(displayText, showtimeStatus);
            case JourneyStatus.Refunded: return displayText.refundedStatusLabel;
            default: return displayText.expiredStatusLabel;
        }
    };
    OrderSummaryStatusIndicator.prototype.getLabelForShowtimeStatus = function (displayText, status) {
        switch (status) {
            case JourneyOrderShowtimeStatus.Pending: return displayText.pendingStatusLabel;
            case JourneyOrderShowtimeStatus.Admitting: return displayText.admittingStatusLabel;
            case JourneyOrderShowtimeStatus.Admitted: return displayText.admittedStatusLabel;
            case JourneyOrderShowtimeStatus.NowPlaying: return displayText.nowPlayingStatusLabel;
            default: return displayText.expiredStatusLabel;
        }
    };
    OrderSummaryStatusIndicator.prototype.getMessageForStatus = function (status, countdown) {
        return status === JourneyOrderShowtimeStatus.Pending
            ? this.getCountdownText(countdown)
            : undefined;
    };
    OrderSummaryStatusIndicator.prototype.getCountdownText = function (countdown) {
        if (!countdown)
            return undefined;
        var days = countdown.days, hours = countdown.hours, minutes = countdown.minutes, seconds = countdown.seconds;
        var timeUntilArray = new Array();
        if (days > 0)
            timeUntilArray.push(days + "D");
        if (hours > 0 || days > 0)
            timeUntilArray.push(hours + "H");
        if (minutes > 0 || hours > 0 || days > 0)
            timeUntilArray.push(minutes + "M");
        timeUntilArray.push(seconds + "S");
        return timeUntilArray.join(' ');
    };
    OrderSummaryStatusIndicator = __decorate([
        observer
    ], OrderSummaryStatusIndicator);
    return OrderSummaryStatusIndicator;
}(React.Component));
export { OrderSummaryStatusIndicator };
//# sourceMappingURL=order-summary-status-indicator.js.map