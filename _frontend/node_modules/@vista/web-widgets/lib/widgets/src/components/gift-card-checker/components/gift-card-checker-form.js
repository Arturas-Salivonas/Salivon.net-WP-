var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import * as React from 'react';
import { bemClassBuilderFactory } from '../../../utils/bem-class-builder';
import { Button, ButtonColor, ButtonSize } from '../../button/button';
import { Captcha } from '../../captcha/captcha';
import { Field } from '../../form/field/field';
import { FormElementStyle } from '../../form/form-element-style';
import { HelpText } from '../../form/help-text/help-text';
import { Input } from '../../form/input/input';
export var GiftCardNumberValidationResult;
(function (GiftCardNumberValidationResult) {
    GiftCardNumberValidationResult[GiftCardNumberValidationResult["Valid"] = 0] = "Valid";
    GiftCardNumberValidationResult[GiftCardNumberValidationResult["CardNumberMissing"] = 1] = "CardNumberMissing";
})(GiftCardNumberValidationResult || (GiftCardNumberValidationResult = {}));
export var CaptchaValidationResult;
(function (CaptchaValidationResult) {
    CaptchaValidationResult[CaptchaValidationResult["Valid"] = 0] = "Valid";
    CaptchaValidationResult[CaptchaValidationResult["Invalid"] = 1] = "Invalid";
})(CaptchaValidationResult || (CaptchaValidationResult = {}));
/**
 * Renders a form that allows a user to input a gift card number.
 */
var GiftCardCheckerForm = /** @class */ (function (_super) {
    __extends(GiftCardCheckerForm, _super);
    function GiftCardCheckerForm(props) {
        var _this = _super.call(this, props) || this;
        _this.captchaRef = React.createRef();
        _this.handleCardNumberChanged = function (newCardNumber) {
            _this.setState({
                cardNumber: newCardNumber.trim()
            });
        };
        _this.handleCaptchaChanged = function (captchaResponse) {
            _this.setState({ captchaResponse: captchaResponse });
        };
        _this.handleSubmit = function (event) { return __awaiter(_this, void 0, void 0, function () {
            var _a, cardNumber, captchaResponse, _b, displayText, captchaConfig, cardNumberValidationResult, captchaValidationResult;
            var _this = this;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        event.preventDefault();
                        _a = this.state, cardNumber = _a.cardNumber, captchaResponse = _a.captchaResponse;
                        _b = this.props, displayText = _b.displayText, captchaConfig = _b.captchaConfig;
                        cardNumberValidationResult = this.validateGiftCardNumber(cardNumber);
                        if (cardNumberValidationResult !== GiftCardNumberValidationResult.Valid) {
                            return [2 /*return*/, this.setState({
                                    error: displayText.errorCardNumberRequiredMessage
                                })];
                        }
                        captchaValidationResult = this.validateCaptcha(captchaConfig, captchaResponse);
                        if (captchaValidationResult !== CaptchaValidationResult.Valid) {
                            return [2 /*return*/, this.setState({
                                    error: displayText.errorMissingCaptchaVerificationMessage
                                })];
                        }
                        this.setState({
                            isLoading: true
                        });
                        return [4 /*yield*/, this.props.getGiftCardDetails(cardNumber, captchaResponse)
                                .then(function (cardDetails) {
                                _this.setState({
                                    isLoading: false,
                                    error: undefined
                                });
                                _this.props.onCardDetailsRetrieved(cardDetails);
                            })
                                .catch(function (error) {
                                _this.setState({
                                    isLoading: false,
                                    error: displayText.errorCouldNotGetGiftCardDetailsMessage
                                });
                                _this.resetCaptcha();
                            })];
                    case 1:
                        _c.sent();
                        return [2 /*return*/];
                }
            });
        }); };
        _this.resetCaptcha = function () {
            var captchaInstance = _this.captchaRef.current;
            if (captchaInstance)
                captchaInstance.reset();
            _this.setState({ captchaResponse: undefined });
        };
        _this.state = {
            isLoading: false,
            cardNumber: '',
            error: undefined
        };
        return _this;
    }
    GiftCardCheckerForm.prototype.render = function () {
        var _a = this.props, displayText = _a.displayText, config = _a.config, captchaConfig = _a.captchaConfig;
        var error = this.state.error;
        var b = bemClassBuilderFactory('v-gift-card-checker-form');
        return (React.createElement("form", { className: b.block(), onSubmit: this.handleSubmit, autoComplete: "off" },
            React.createElement(Field, { id: "v-gift-card-checker-form__card-number", label: displayText.fieldCardNumberInputLabel, showLabel: config.showFormFieldLabels, style: error ? FormElementStyle.Warning : FormElementStyle.Normal },
                React.createElement(Input, { type: "text", placeholder: displayText.fieldCardNumberPlaceholder, disabled: this.state.isLoading, value: this.state.cardNumber, onChangeValue: this.handleCardNumberChanged })),
            (captchaConfig && captchaConfig.siteKey) &&
                React.createElement("div", { className: b.element('captcha') },
                    React.createElement(Captcha, { ref: this.captchaRef, config: captchaConfig, onValueChanged: this.handleCaptchaChanged })),
            (error && error.length > 0) &&
                React.createElement(HelpText, { style: FormElementStyle.Warning }, error),
            React.createElement(Button, { color: ButtonColor.Primary, size: ButtonSize.Medium, label: displayText.buttonSubmitLabel, type: "submit", loading: this.state.isLoading })));
    };
    GiftCardCheckerForm.prototype.validateGiftCardNumber = function (cardNumber) {
        if (cardNumber.length < 1)
            return GiftCardNumberValidationResult.CardNumberMissing;
        return GiftCardNumberValidationResult.Valid;
    };
    GiftCardCheckerForm.prototype.validateCaptcha = function (config, captchaResponse) {
        if (!config || !config.siteKey)
            return CaptchaValidationResult.Valid;
        if (!captchaResponse)
            return CaptchaValidationResult.Invalid;
        return CaptchaValidationResult.Valid;
    };
    return GiftCardCheckerForm;
}(React.Component));
export { GiftCardCheckerForm };
//# sourceMappingURL=gift-card-checker-form.js.map