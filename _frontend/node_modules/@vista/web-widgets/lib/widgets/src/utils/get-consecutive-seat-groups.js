/**
 * Groups an array of seats by their area number and row index
 */
function groupSeatsByAreaNumberAndRowIndex(seats) {
    var groupMap = seats.reduce(function (acc, seat) {
        var areaGroup = (acc[seat.position.areaNumber] = acc[seat.position.areaNumber] || {});
        var rowGroup = (areaGroup[seat.position.rowIndex] = areaGroup[seat.position.rowIndex] || []);
        rowGroup.push(seat);
        return acc;
    }, {});
    var groupArray = [];
    Object.entries(groupMap).map(function (_a) {
        var _ = _a[0], rowGroups = _a[1];
        Object.entries(rowGroups).map(function (_a) {
            var _ = _a[0], seats = _a[1];
            groupArray.push(seats);
        });
    });
    return groupArray;
}
/**
 * Sorts an array of seats by their column index in ascending order
 */
function sortSeatsByColumnIndex(seats) {
    return seats.sort(function (a, b) { return a.position.columnIndex - b.position.columnIndex; });
}
/**
 * Groups an array of seats into consecutive sub-arrays.
 * Assumes that all seats belong to the same row and area.
 */
function groupConsecutiveSeatsByColumnIndex(seats) {
    // Sort the seats by column index
    var sortedSeats = sortSeatsByColumnIndex(seats);
    return sortedSeats.reduce(function (acc, seat) {
        var previousGroup = acc[acc.length - 1];
        // If there is no previous group, or if the last seat in the previous group doesn't have a consecutive
        // column index, add a new array to the accumulator
        if (!previousGroup || previousGroup[previousGroup.length - 1].position.columnIndex !== seat.position.columnIndex - 1) {
            acc.push([]);
        }
        // Push the seat to the last array
        acc[acc.length - 1].push(seat);
        return acc;
    }, []);
}
/**
 * Groups consecutive seats in a given array of journey order seats or order seats.
 * Returns an array of seat groups.
 */
export function getConsecutiveSeatGroups(seats) {
    if (seats.length === 0)
        return [];
    var seatGroups = groupSeatsByAreaNumberAndRowIndex(seats);
    var consecutiveSeatGroups = seatGroups.map(groupConsecutiveSeatsByColumnIndex);
    return consecutiveSeatGroups.reduce(function (acc, group) {
        group.forEach(function (seats) { acc.push(seats); });
        return acc;
    }, []);
}
//# sourceMappingURL=get-consecutive-seat-groups.js.map