import { bemClassBuilderFactory } from '../bem-class-builder';
describe('bemClassBuilderFactory', function () {
    var b = bemClassBuilderFactory('block');
    describe('block', function () {
        it('returns a block class', function () {
            var result = b.block();
            expect(result).toEqual('block');
        });
        it('returns a block class with modifiers', function () {
            var modifiers = { enabled: true };
            var result = b.block(modifiers);
            expect(result).toEqual('block block--enabled');
        });
    });
    describe('element', function () {
        it('returns an element class', function () {
            var result = b.element('element');
            expect(result).toEqual('block__element');
        });
        it('returns an element class with modifiers', function () {
            var modifiers = { enabled: true };
            var result = b.element('element', modifiers);
            expect(result).toEqual('block__element block__element--enabled');
        });
    });
    describe('modifier', function () {
        it('does not include modifiers when an empty object is passed in', function () {
            var modifiers = {};
            var result = b.block(modifiers);
            expect(result).toEqual('block');
        });
        it('includes boolean modifiers that are true', function () {
            var modifiers = {
                enabled: true,
                disabled: false
            };
            var result = b.block(modifiers);
            expect(result).toEqual('block block--enabled');
        });
        it('does not include modifiers when they are all false', function () {
            var modifiers = { enabled: false };
            var result = b.block(modifiers);
            expect(result).toEqual('block');
        });
        it('can handle properties in title case', function () {
            var modifiers = { TitleModifier: true };
            var result = b.block(modifiers);
            expect(result).toEqual('block block--title-modifier');
        });
        it('converts the modifier name to kebab-case', function () {
            var modifiers = { kebabModifier: true };
            var result = b.block(modifiers);
            expect(result).toEqual('block block--kebab-modifier');
        });
        it('includes and joins string modifiers with a dash', function () {
            var modifiers = {
                size: 'large',
                iconColor: 'blue'
            };
            var result = b.block(modifiers);
            expect(result).toEqual('block block--size-large block--icon-color-blue');
        });
        it('converts string modifier values to kebab-case', function () {
            var modifiers = {
                size: 'extraLarge',
                iconColor: 'SapphireBlue'
            };
            var result = b.block(modifiers);
            expect(result).toEqual('block block--size-extra-large block--icon-color-sapphire-blue');
        });
        it('does not include string modifiers with no value', function () {
            var modifiers = {
                size: ''
            };
            var result = b.block(modifiers);
            expect(result).toEqual('block');
        });
    });
});
//# sourceMappingURL=bem-class-builder.test.js.map