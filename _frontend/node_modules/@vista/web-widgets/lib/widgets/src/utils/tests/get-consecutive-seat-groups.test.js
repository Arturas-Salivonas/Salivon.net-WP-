import { getConsecutiveSeatGroups } from '../get-consecutive-seat-groups';
var seatArea1A1 = { position: { areaNumber: 1, rowIndex: 1, columnIndex: 1 }, rowLabel: 'A', seatLabel: '1' };
var seatArea1A2 = { position: { areaNumber: 1, rowIndex: 1, columnIndex: 2 }, rowLabel: 'A', seatLabel: '2' };
var seatArea1A3 = { position: { areaNumber: 1, rowIndex: 1, columnIndex: 3 }, rowLabel: 'A', seatLabel: '3' };
var seatArea1A4 = { position: { areaNumber: 1, rowIndex: 1, columnIndex: 4 }, rowLabel: 'A', seatLabel: '4' };
var seatArea1B1 = { position: { areaNumber: 1, rowIndex: 2, columnIndex: 1 }, rowLabel: 'B', seatLabel: '1' };
var seatArea1B2 = { position: { areaNumber: 1, rowIndex: 2, columnIndex: 2 }, rowLabel: 'B', seatLabel: '2' };
var seatArea2A1 = { position: { areaNumber: 2, rowIndex: 1, columnIndex: 1 }, rowLabel: 'A', seatLabel: '1' };
var seatArea2B1 = { position: { areaNumber: 2, rowIndex: 2, columnIndex: 1 }, rowLabel: 'B', seatLabel: '1' };
var seatArea2B2 = { position: { areaNumber: 2, rowIndex: 2, columnIndex: 2 }, rowLabel: 'B', seatLabel: '2' };
describe('getConsecutiveSeatGroups', function () {
    it('returns an empty array when an empty array is passed in', function () {
        var result = getConsecutiveSeatGroups([]);
        expect(result).toEqual([]);
    });
    it('returns a consecutive seat group', function () {
        var result = getConsecutiveSeatGroups([seatArea1A1, seatArea1A2]);
        expect(result).toEqual([[seatArea1A1, seatArea1A2]]);
    });
    it('returns a non-consecutive seat groups', function () {
        var result = getConsecutiveSeatGroups([seatArea1A1, seatArea1A3]);
        expect(result).toEqual([[seatArea1A1], [seatArea1A3]]);
    });
    it('returns a mixture of consecutive and non-consecutive seat groups', function () {
        var result = getConsecutiveSeatGroups([seatArea1A1, seatArea1A2, seatArea1A4]);
        expect(result).toEqual([[seatArea1A1, seatArea1A2], [seatArea1A4]]);
    });
    it('returns seat groups for multiple areas', function () {
        var result = getConsecutiveSeatGroups([
            seatArea1A1, seatArea1A2,
            seatArea1A4,
            seatArea1B1, seatArea1B2,
            seatArea2A1,
            seatArea2B1, seatArea2B2
        ]);
        expect(result).toEqual([
            [seatArea1A1, seatArea1A2],
            [seatArea1A4],
            [seatArea1B1, seatArea1B2],
            [seatArea2A1],
            [seatArea2B1, seatArea2B2]
        ]);
    });
});
//# sourceMappingURL=get-consecutive-seat-groups.test.js.map