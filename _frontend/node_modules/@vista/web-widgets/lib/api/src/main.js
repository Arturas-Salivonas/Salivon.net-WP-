import { configure } from 'mobx';
// @ts-ignore Ignore error from unused Services type used only by comment
import { services } from './services/services';
import { configurationStoreInstance } from './stores/configuration/configuration-store';
import { hydrateStores, stores } from './stores/stores';
import { browserSessionServiceInstance } from './user/browser-session-service';
import { Logger } from './utils/logger';
// import cacheServiceInstance from './user/cache-service';
// Enforcing strict use of mobx, [store].data can only be mutated via @action
configure({
    enforceActions: 'observed'
});
// session auto start
browserSessionServiceInstance.start();
// hydrate stores
hydrateStores();
/**
 * Widgets JS API entry point
 */
export var vista = {
    /**
     * Entry point to create widgets.
     */
    widgets: {
        /**
         * Sets the configuration of the widgets
         */
        configure: function (config) {
            configurationStoreInstance.setConfig(config);
        },
    },
    /**
     * Singleton instance of Logger
     * @type {Logger}
     */
    logger: Logger,
    /**
     * Services namespace, provides access to data handling helpers
     * @type {Services}
     */
    services: services,
    /**
     * Contains the data that the widgets use, e.g. tickets types, order, etc.
     * Allows data changes to be subscribed to and the widgets will update when
     * actions in the store are invoked.
     * These are implemented as MobX stores: see https://mobx.js.org/best/store.html for more details.
     * @type {Stores}
     */
    stores: stores,
    /**
     * User session service. Allows the widget store data in LocalStorage,
     * and allows the user to keep their selections over page loads.
     * See https://developer.mozilla.org/en-US/docs/Web/API/Storage/LocalStorage for more details on browser local storage.
     */
    user: {
        browserSession: browserSessionServiceInstance
    },
};
/**
 * Exposing the JS API at window level
 */
window.vista = Object.assign(window.vista || {}, vista);
//# sourceMappingURL=main.js.map