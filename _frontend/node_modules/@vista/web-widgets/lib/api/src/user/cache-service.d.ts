/**
 * Cache service class
 *
 * Persists data using session or local storage.
 * Based on Pamela Fox's LSCache library (https://github.com/pamelafox/LSCache)
 */
export declare class CacheService {
    private cachePrefix;
    private storageEngine;
    private cachedStorage;
    private cacheBucket;
    private warnings;
    private hasRun;
    constructor(cachePrefix?: string, storageEngine?: any);
    /**
     * Allows usage of a different storage engine, if no data has already been stored
     * localStorage and sessionStorage supported
     * Note: no tests available as no Storage primitive can be used with jest so far
     * @param {Storage} engine
     */
    setStorageEngine(engine: Storage): void;
    /**
     * Stores the value in selected storage engine.
     * Expires after specified number of milliseconds.
     * @param {string} key
     * @param {Object|string} value
     * @param {number} time
     */
    set(key: string, value: any, time?: number): void;
    /**
     * Retrieves specified value from selected storage engine, if not expired.
     * @param {string} key
     * @return {string|Object}
     */
    get(key: string): any;
    /**
     * Removes a value from selected storage engine.
     * Equivalent to 'delete' in memcache, but that's a keyword in JS.
     * @param {string} key
     */
    remove(key: string): void;
    /**
     * Flushes all LSCacheService items and expiry markers without affecting rest of selected storage engine
     */
    flush(): void;
    /**
     * Flushes expired LSCacheService items and expiry markers without affecting rest of selected storage engine
     */
    flushExpired(): void;
    /**
     * Appends CACHE_PREFIX so LSCacheService will partition data in to different buckets.
     * @param {string} bucket
     */
    setBucket(bucket: any): void;
    /**
     * Resets the string being appended to CACHE_PREFIX so LSCacheService will use the default storage behavior.
     */
    resetBucket(): void;
    /**
     * Sets whether to display warnings when an item is removed from the cache or not.
     */
    enableWarnings(enabled: boolean): void;
    /**
     * Determines if selected storage engine is supported in the browser.
     * Result is cached for better performance instead of being run each time.
     * Feature detection is based on how Modernizr does it;
     * todo: even if the returned result lives in memory once run for the first time, this is quite a slow method!
     * todo: we might want to suppress or exclude by configuration at some point.
     * @returns {boolean}
     */
    private supportsStorage;
    /**
     * Check to set if the error is us dealing with being out of space
     * @param e
     * @returns {boolean}
     */
    private isOutOfSpace;
    /**
     * Returns a string where all RegExp special characters are escaped with a \.
     * @param {String} text
     * @return {string}
     */
    private escapeRegExpSpecialCharacters;
    /**
     * Returns the full string for the selected storage engine expiration item.
     * @param {String} key
     * @return {string}
     */
    private expirationKey;
    /**
     * Returns the number of expiry units (ms) since the epoch.
     * @return {number}
     */
    private currentTime;
    /**
     * Wrapper functions for selected storage engine methods
     */
    private getItem;
    private setItem;
    private removeItem;
    private eachKey;
    private flushItem;
    private flushExpiredItem;
}
export declare const cacheServiceInstance: CacheService;
