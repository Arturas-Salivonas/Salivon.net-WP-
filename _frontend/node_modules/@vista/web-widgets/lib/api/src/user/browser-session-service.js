import { createUUID } from '../../../common/utils/uuid-utils';
import { cacheServiceInstance } from './cache-service';
var BROWSER_SESSION_KEY = 'VistaWebWidgetsUserSessionId';
/**
 * Browser Session Service
 *
 * Basic handling of a user's browser session.
 * Auto starts by default
 */
var BrowserSessionService = /** @class */ (function () {
    function BrowserSessionService(cacheService) {
        this.cacheService = cacheService;
        //
    }
    Object.defineProperty(BrowserSessionService.prototype, "sessionId", {
        /**
         * Retrieves active browser session id
         */
        get: function () {
            return sessionStorage.getItem(BROWSER_SESSION_KEY);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Starts tracking a browser session and enable persistence of data stores
     *
     * Example:
     * ```js
     * var mySessionId = vista.user.browserSession.start()
     * ```
     */
    BrowserSessionService.prototype.start = function () {
        // do we have a session?
        if (this.sessionId === null) {
            sessionStorage.setItem(BROWSER_SESSION_KEY, createUUID());
        }
        // set the bucket name with the first portion of UUID
        this.cacheService.setBucket(this.sessionId);
    };
    /**
     * Stops tracking a browser session,
     * disable persistence of data stores
     *
     * Example:
     * ```js
     * vista.user.browserSession.stop()
     * ```
     */
    BrowserSessionService.prototype.stop = function () {
        sessionStorage.removeItem(BROWSER_SESSION_KEY);
        this.cacheService.resetBucket();
        this.reset();
    };
    /**
     * Resets local storage and flush cached data
     *
     * Example:
     * ```js
     * vista.user.browserSession.reset()
     * ```
     */
    BrowserSessionService.prototype.reset = function () {
        this.cacheService.flush();
    };
    /**
     * Wrapper for cache service setStorageEngine
     * @param engine
     */
    BrowserSessionService.prototype.setStorageEngine = function (engine) {
        this.cacheService.setStorageEngine(engine);
    };
    return BrowserSessionService;
}());
export { BrowserSessionService };
export var browserSessionServiceInstance = new BrowserSessionService(cacheServiceInstance);
//# sourceMappingURL=browser-session-service.js.map