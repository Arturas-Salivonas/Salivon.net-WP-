import { BrowserSessionService } from '../browser-session-service';
import { cacheServiceInstance } from '../cache-service';
/**
 * Browser Session Service class test
 */
describe('Browser Session Service', function () {
    var service = new BrowserSessionService(cacheServiceInstance);
    var setBucketSpy = jest.spyOn(cacheServiceInstance, 'setBucket');
    var resetBucketSpy = jest.spyOn(cacheServiceInstance, 'resetBucket');
    var flushSpy = jest.spyOn(cacheServiceInstance, 'flush');
    beforeEach(function () {
        service.stop();
    });
    it('returns null if no session has been started', function () {
        expect(service.sessionId).toBe(null);
    });
    it('returns id after session has been started', function () {
        service.start();
        expect(typeof service.sessionId).toBe('string');
        expect(setBucketSpy).toHaveBeenCalledWith(service.sessionId);
    });
    it('clears the session after session has been closed', function () {
        var id = service.start();
        expect(id).not.toBe(null);
        service.stop();
        expect(service.sessionId).toBe(null);
        expect(resetBucketSpy).toHaveBeenCalled();
        expect(flushSpy).toHaveBeenCalled();
    });
    it('creates new session id for every new session', function () {
        service.start();
        var one = service.sessionId.toString();
        service.stop();
        service.start();
        var two = service.sessionId.toString();
        expect(one).not.toEqual(two);
    });
});
//# sourceMappingURL=browser-session-service.test.js.map