import { MxSeatStatus } from '../../../../../mx-api-client/src/mxt/types/seating/seat-status';
import { SeatAvailability as WidgetSeatAvailability } from '../../../../../types/seating/seat-availability';
import { SeatType as WidgetSeatType } from '../../../../../types/seating/seat-type';
import { mapMxSeatLayoutToWidgetSeatLayout } from '../seat-layout-mapper';
describe('mapMxSeatLayoutToWidgetSeatLayout', function () {
    it('maps top level seat layout properties', function () {
        var mxSeatLayout = {
            boundaryRight: 1,
            boundaryLeft: 2,
            boundaryTop: 3,
            screenStart: 4,
            screenWidth: 5,
            areas: []
        };
        var widgetSeatLayout = mapMxSeatLayoutToWidgetSeatLayout(mxSeatLayout);
        expect(widgetSeatLayout).toMatchObject({
            boundaryRight: 1,
            boundaryLeft: 2,
            boundaryTop: 3,
            screenStart: 4,
            screenWidth: 5
        });
    });
    it('maps area categories', function () {
        var mxAreaCategories = [{
                areaCategoryCode: '0',
                seatsToAllocate: 3,
                seatsAllocatedCount: 2,
                seatsNotAllocatedCount: 1,
                selectedSeats: [{
                        areaNumber: 4,
                        rowIndex: 5,
                        columnIndex: 6
                    }]
            }];
        var mxSeatLayout = {
            areaCategories: mxAreaCategories,
            areas: []
        };
        var widgetSeatLayout = mapMxSeatLayoutToWidgetSeatLayout(mxSeatLayout);
        expect(widgetSeatLayout.areaCategories).toMatchObject([{
                areaCategoryCode: '0',
                seatsToAllocate: 3,
                seatsAllocatedCount: 2,
                seatsNotAllocatedCount: 1,
                selectedSeats: [{
                        areaNumber: 4,
                        rowIndex: 5,
                        columnIndex: 6
                    }]
            }]);
    });
    it('maps areas', function () {
        var mxAreas = [{
                number: 1,
                areaCategoryCode: '3',
                columnCount: 2,
                description: 'test',
                descriptionTranslations: [{ languageTag: 'en', text: 'test' }],
                isAllocatedSeating: 'true',
                hasSofaSeatingEnabled: 'false',
                rowCount: 5,
                rows: [],
                left: 6,
                top: 7,
                width: 8,
                height: 9
            }];
        var mxSeatLayout = {
            areas: mxAreas
        };
        var widgetSeatLayout = mapMxSeatLayoutToWidgetSeatLayout(mxSeatLayout);
        expect(widgetSeatLayout.areas).toMatchObject([{
                number: 1,
                areaCategoryCode: '3',
                columnCount: 2,
                description: 'test',
                descriptionTranslations: [{ languageTag: 'en', text: 'test' }],
                isAllocatedSeating: 'true',
                hasSofaSeatingEnabled: 'false',
                rowCount: 5,
                left: 6,
                top: 7,
                width: 8,
                height: 9
            }]);
    });
    it('maps rows', function () {
        var mxRows = [{
                rowLabel: '1',
                seats: []
            }];
        var mxSeatLayout = {
            areas: [{
                    number: 2,
                    rows: mxRows
                }]
        };
        var widgetSeatLayout = mapMxSeatLayoutToWidgetSeatLayout(mxSeatLayout);
        expect(widgetSeatLayout.areas[0].rows).toMatchObject([{
                rowLabel: '1',
                areaNumber: 2
            }]);
    });
    it('maps seats', function () {
        var mxSeats = [{
                seatLabel: '1',
                status: MxSeatStatus.Selected,
                originalStatus: MxSeatStatus.Empty,
                position: {
                    areaNumber: 4,
                    rowIndex: 5,
                    columnIndex: 6
                },
                seatsInGroup: [
                    {
                        areaNumber: 4,
                        rowIndex: 5,
                        columnIndex: 6
                    },
                    {
                        areaNumber: 5,
                        rowIndex: 6,
                        columnIndex: 7
                    }
                ]
            }];
        var mxSeatLayout = {
            areas: [{
                    areaCategoryCode: '2',
                    rows: [{
                            seats: mxSeats
                        }]
                }]
        };
        var widgetSeatLayout = mapMxSeatLayoutToWidgetSeatLayout(mxSeatLayout);
        expect(widgetSeatLayout.areas[0].rows[0].seats).toMatchObject([{
                seatLabel: '1',
                type: WidgetSeatType.SofaLeft,
                availability: WidgetSeatAvailability.Selected,
                areaCategoryCode: '2',
                position: {
                    areaNumber: 4,
                    rowIndex: 5,
                    columnIndex: 6
                },
                seatsInGroup: [
                    {
                        areaNumber: 4,
                        rowIndex: 5,
                        columnIndex: 6
                    },
                    {
                        areaNumber: 5,
                        rowIndex: 6,
                        columnIndex: 7
                    }
                ]
            }]);
    });
    it('maps seats status to type and availability', function () {
        var testCases = [
            {
                mxSeat: { status: MxSeatStatus.Empty, originalStatus: MxSeatStatus.Empty },
                expectedSeat: { type: WidgetSeatType.Normal, availability: WidgetSeatAvailability.Available }
            },
            {
                mxSeat: { status: MxSeatStatus.Sold, originalStatus: MxSeatStatus.Empty },
                expectedSeat: { type: WidgetSeatType.Normal, availability: WidgetSeatAvailability.Sold }
            },
            {
                mxSeat: { status: MxSeatStatus.Wheelchair, originalStatus: MxSeatStatus.Wheelchair },
                expectedSeat: { type: WidgetSeatType.Wheelchair, availability: WidgetSeatAvailability.Available }
            },
            {
                mxSeat: { status: MxSeatStatus.Sold, originalStatus: MxSeatStatus.Wheelchair },
                expectedSeat: { type: WidgetSeatType.Wheelchair, availability: WidgetSeatAvailability.Sold }
            },
            {
                mxSeat: { status: MxSeatStatus.Selected, originalStatus: MxSeatStatus.Wheelchair },
                expectedSeat: { type: WidgetSeatType.Wheelchair, availability: WidgetSeatAvailability.Selected }
            },
            {
                mxSeat: { status: MxSeatStatus.Companion, originalStatus: MxSeatStatus.Companion },
                expectedSeat: { type: WidgetSeatType.Companion, availability: WidgetSeatAvailability.Available }
            },
            {
                mxSeat: { status: MxSeatStatus.Sold, originalStatus: MxSeatStatus.Companion },
                expectedSeat: { type: WidgetSeatType.Companion, availability: WidgetSeatAvailability.Sold }
            },
            {
                mxSeat: { status: MxSeatStatus.Selected, originalStatus: MxSeatStatus.Companion },
                expectedSeat: { type: WidgetSeatType.Companion, availability: WidgetSeatAvailability.Selected }
            },
            {
                mxSeat: { status: MxSeatStatus.Selected, originalStatus: MxSeatStatus.Empty },
                expectedSeat: { type: WidgetSeatType.Normal, availability: WidgetSeatAvailability.Selected }
            },
            {
                mxSeat: { status: MxSeatStatus.Broken, originalStatus: MxSeatStatus.Broken },
                expectedSeat: { type: WidgetSeatType.Normal, availability: WidgetSeatAvailability.Broken }
            }
        ];
        testCases.forEach(function (_a) {
            var mxSeat = _a.mxSeat, expectedSeat = _a.expectedSeat;
            var mxSeatLayout = {
                areas: [{
                        rows: [{
                                seats: [mxSeat]
                            }]
                    }]
            };
            var widgetSeatLayout = mapMxSeatLayoutToWidgetSeatLayout(mxSeatLayout);
            expect(widgetSeatLayout.areas[0].rows[0].seats).toMatchObject([expectedSeat]);
        });
    });
    it('maps sofa seats to the correct type', function () {
        var sofaGroup1 = [
            { columnIndex: 1 },
            { columnIndex: 2 },
            { columnIndex: 3 }
        ];
        var sofaGroup2 = [
            { columnIndex: 12 },
            { columnIndex: 11 }
        ];
        var testCases = [
            {
                mxSeat: { seatsInGroup: sofaGroup1, position: { columnIndex: 3 } },
                expectedType: WidgetSeatType.SofaRight
            },
            {
                mxSeat: { seatsInGroup: sofaGroup1, position: { columnIndex: 2 } },
                expectedType: WidgetSeatType.SofaMiddle
            },
            {
                mxSeat: { seatsInGroup: sofaGroup1, position: { columnIndex: 1 } },
                expectedType: WidgetSeatType.SofaLeft
            },
            {
                mxSeat: { seatsInGroup: sofaGroup2, position: { columnIndex: 11 } },
                expectedType: WidgetSeatType.SofaLeft
            },
            {
                mxSeat: { seatsInGroup: sofaGroup2, position: { columnIndex: 12 } },
                expectedType: WidgetSeatType.SofaRight
            },
            {
                mxSeat: { seatsInGroup: null },
                expectedType: WidgetSeatType.Normal
            },
            {
                mxSeat: { seatsInGroup: undefined },
                expectedType: WidgetSeatType.Normal
            },
            {
                mxSeat: { seatsInGroup: [] },
                expectedType: WidgetSeatType.Normal
            }
        ];
        testCases.forEach(function (_a) {
            var mxSeat = _a.mxSeat, expectedType = _a.expectedType;
            var mxSeatLayout = {
                areas: [{
                        rows: [{
                                seats: [mxSeat]
                            }]
                    }]
            };
            var widgetSeatLayout = mapMxSeatLayoutToWidgetSeatLayout(mxSeatLayout);
            expect(widgetSeatLayout.areas[0].rows[0].seats[0].type).toEqual(expectedType);
        });
    });
});
//# sourceMappingURL=seat-layout-mapper.test.js.map