import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { createSingleRowSeatLayout } from '../../test/test-utils';
import { SeatLayoutStateManager } from '../../utils/seat-layout-state-manager';
import { cannotLeaveSingleSeatGapFromAisleRule } from '../cannot-leave-single-seat-gap-from-aisle-rule';
var defaultRule = cannotLeaveSingleSeatGapFromAisleRule();
var directions = ['left', 'right'];
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
describe('cannotLeaveSingleSeatGapFromAisleRule', function () {
    directions.forEach(function (direction) {
        describe("aisle on the " + direction, function () {
            it("cannot leave a single available seat gap from an aisle at the " + direction + " end of a row", function () {
                var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                ]);
                var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(false);
            });
            it("cannot leave a single available seat gap from an aisle on the " + direction + " within a row", function () {
                var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addAisle(); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                ]);
                var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(false);
            });
            it("can leave a single available seat gap from an aisle on the " + direction + " if all seats on the other side are not available", function () {
                var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Sold }); }
                ]);
                var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it("can leave a single available seat gap from an aisle on the " + direction + " if all seats on the other side in same contiguous block are not available", function () {
                var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Sold }); },
                    function (row) { return row.addAisle(); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                ]);
                var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it("can leave a double seat gap from an aisle on the " + direction, function () {
                var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                ]);
                var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it("can leave a single sold seat between selected seat and an aisle on the " + direction, function () {
                var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                    function (row) { return row.addSeat({ availability: SeatAvailability.Sold }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                ]);
                var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it("can select a single seat next to an aisle on the " + direction, function () {
                var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                    function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                    function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                ]);
                var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            describe('default config', function () {
                it("can leave a single available seat gap from a selected wheelchair seat to an aisle on the " + direction, function () {
                    var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addWheelchair({
                            wheelchairSeat: { availability: SeatAvailability.Selected }
                        }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                    ]);
                    var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                    expect(result.valid).toEqual(true);
                });
                it("can leave a single available seat gap from a selected sofa seat to an aisle on the " + direction, function () {
                    var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addSofa([
                            { availability: SeatAvailability.Selected },
                            { availability: SeatAvailability.Selected },
                        ]); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                    ]);
                    var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                    expect(result.valid).toEqual(true);
                });
            });
            describe('custom config', function () {
                describe('ignoreSelectedWheelchairSeats', function () {
                    var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addWheelchair({
                            wheelchairSeat: { availability: SeatAvailability.Selected }
                        }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                    ]);
                    it('ignores selected wheelchair seats when true', function () {
                        var rule = cannotLeaveSingleSeatGapFromAisleRule({ ignoreSelectedWheelchairSeats: true });
                        var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                        expect(result.valid).toEqual(true);
                    });
                    it('processes selected wheelchair seats when false', function () {
                        var rule = cannotLeaveSingleSeatGapFromAisleRule({ ignoreSelectedWheelchairSeats: false });
                        var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                        expect(result.valid).toEqual(false);
                    });
                });
                describe('ignoreSelectedSofaSeats', function () {
                    var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addSofa([
                            { availability: SeatAvailability.Selected },
                            { availability: SeatAvailability.Selected },
                        ]); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                    ]);
                    it('ignores selected sofa seats when true', function () {
                        var rule = cannotLeaveSingleSeatGapFromAisleRule({ ignoreSelectedSofaSeats: true });
                        var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                        expect(result.valid).toEqual(true);
                    });
                    it('processes selected sofa seats when false', function () {
                        var rule = cannotLeaveSingleSeatGapFromAisleRule({ ignoreSelectedSofaSeats: false });
                        var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                        expect(result.valid).toEqual(false);
                    });
                });
                describe('allowWhenAllSeatsBetweenTheSeatGapAndAnUnavailableSeatAreSelected', function () {
                    var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Sold }); },
                        function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                    ]);
                    it('does not allow seat gap when false and all seats between seat gap and sold seat are selected', function () {
                        var rule = cannotLeaveSingleSeatGapFromAisleRule({ allowWhenAllSeatsBetweenTheSeatGapAndAnUnavailableSeatAreSelected: false });
                        var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                        expect(result.valid).toEqual(false);
                    });
                    it('allows seat gap when true and all seats between gap and sold seat are selected', function () {
                        var rule = cannotLeaveSingleSeatGapFromAisleRule({ allowWhenAllSeatsBetweenTheSeatGapAndAnUnavailableSeatAreSelected: true });
                        var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                        expect(result.valid).toEqual(true);
                    });
                    it('does not allow seat gap when true and some seats between seat gap and sold seat are not selected', function () {
                        var seatLayout = createDirectionalSingleRowSeatLayout(direction, [
                            function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                            function (row) { return row.addSeat({ availability: SeatAvailability.Selected }); },
                            function (row) { return row.addSeat({ availability: SeatAvailability.Available }); },
                            function (row) { return row.addSeat({ availability: SeatAvailability.Sold }); },
                            function (row) { return row.addSeat({ availability: SeatAvailability.Available }); }
                        ]);
                        var rule = cannotLeaveSingleSeatGapFromAisleRule({ allowWhenAllSeatsBetweenTheSeatGapAndAnUnavailableSeatAreSelected: false });
                        var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                        expect(result.valid).toEqual(false);
                    });
                });
            });
        });
    });
});
/**
 * Executes a list of RowBuilder method calls based on the given direction
 * NB: Seats for RowBuilder methods that create multiple seats are not reversed
 * @param direction
 * @param seatFunctions
 */
function createDirectionalSingleRowSeatLayout(direction, seatFunctions) {
    var directionalSeats = direction === 'left' ? seatFunctions.reverse() : seatFunctions;
    return createSingleRowSeatLayout(function (row) { return directionalSeats.forEach(function (fn) { return fn(row); }); });
}
//# sourceMappingURL=cannot-leave-single-seat-gap-from-aisle-rule.test.js.map