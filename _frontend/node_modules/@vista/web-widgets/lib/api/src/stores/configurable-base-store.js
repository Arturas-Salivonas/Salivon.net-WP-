var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { action } from 'mobx';
import { BaseStore } from './base-store';
/**
 * Provides other classes the ability to set options that are available in a given interface.
 * @extends BaseStore
 */
var ConfigurableBaseStore = /** @class */ (function (_super) {
    __extends(ConfigurableBaseStore, _super);
    function ConfigurableBaseStore(key, browserSessionService, cacheService, defaults, optionsDefaults) {
        var _this = _super.call(this, key, browserSessionService, cacheService, defaults) || this;
        _this.options = optionsDefaults || {};
        return _this;
    }
    /**
     * Assigns the provided value to `this.options`.
     *
     * @param {T} data Options to set.
     */
    ConfigurableBaseStore.prototype.setOptions = function (options) {
        this.options = options;
    };
    /**
     * Sets both data and options
     * @param data
     * @param options
     */
    ConfigurableBaseStore.prototype.set = function (data, options) {
        this.options = options;
        this.setData(data);
    };
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], ConfigurableBaseStore.prototype, "setOptions", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object, Object]),
        __metadata("design:returntype", void 0)
    ], ConfigurableBaseStore.prototype, "set", null);
    return ConfigurableBaseStore;
}(BaseStore));
export { ConfigurableBaseStore };
//# sourceMappingURL=configurable-base-store.js.map