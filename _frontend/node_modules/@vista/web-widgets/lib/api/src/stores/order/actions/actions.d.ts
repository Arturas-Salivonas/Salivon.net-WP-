import { Order } from '../../../../../types/order/order';
import { OrderCustomerDetails } from '../../../../../types/order/order-customer-details';
import { OrderSeat } from '../../../../../types/order/order-seat';
import { OrderShowtime } from '../../../../../types/order/order-showtime';
import { OrderTicket } from '../../../../../types/order/order-ticket';
import { ItemModel } from '../../../../../types/sales-data/item-models/item-model';
import { TicketType, TicketTypeKey } from '../../../../../types/sales-data/ticket-type';
import { Voucher } from '../../../../../types/vouchers/voucher';
import { TicketSelectionValidationError } from './../../../../../types/stores/order-store-data';
/**
 * Actions for the Order Store.
 */
export interface OrderStoreActions {
    addVoucher: (voucher: Voucher) => void;
    updateCustomerDetails: (customerDetails: Partial<OrderCustomerDetails>) => void;
    validateSelectedTicketsForShowtime: (showtimeId: string) => boolean;
    addShowtime: (showtime: OrderShowtime) => void;
    setTicketTypesForShowtime: (showtimeId: string, ticketTypes: TicketType[]) => void;
    setTicketQuantity: (showtimeId: string, ticketTypeKey: TicketTypeKey, quantity: number, voucherBarcode?: string) => void;
    clearLoyaltyTicketTypes: () => void;
    setSeatsForShowtime: (showtimeId: string, seats: OrderSeat[]) => void;
    initializeOrder: (cinemaChainId: string) => void;
    setOrderData: (orderData: Partial<Order>) => void;
    setTicketsForShowtime: (showtimeId: string, tickets: OrderTicket[]) => void;
    setTicketSelectionErrors: (errors: TicketSelectionValidationError[]) => void;
    clearTicketSelectionErrors: () => void;
    updateCustomerDetailsErrors: (errors: Array<[keyof OrderCustomerDetails, string]>) => void;
    clearCustomerDetailsErrors: (fieldNames?: Array<keyof OrderCustomerDetails>) => void;
    addItem: (itemModel: ItemModel) => void;
    removeItem: (orderItemId: string) => void;
    clearOrder: () => void;
}
export declare const orderStoreActions: OrderStoreActions;
