import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { SeatLayoutStateManager } from '../../utils/seat-layout-state-manager';
import { cannotLeaveGapsBetweenSelectedSeatsRule } from '../cannot-leave-gaps-between-selected-seats-rule';
import { createSingleRowSeatLayout } from '../../test/test-utils';
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
var defaultRule = cannotLeaveGapsBetweenSelectedSeatsRule();
describe('cannotLeaveGapsBetweenSelectedSeatsRule', function () {
    it('cannot leave a single available seat gap between selected seats', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
    it('can leave a single sold seat gap between selected seats', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Sold })
                    .addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('can leave a multiple sold seats gap between selected seats', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Sold })
                    .addSeat({ availability: SeatAvailability.Sold })
                    .addSeat({ availability: SeatAvailability.Sold })
                    .addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('can leave a single broken seat gap between selected seats', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Broken })
                    .addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('can leave a combination of sold and broken seats gap between selected seats', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Broken })
                    .addSeat({ availability: SeatAvailability.Sold })
                    .addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('cannot leave a gap of sold and unsold seats between selected seats', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Sold })
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
    /**
     * This is a legitmate scenario cinemas want to stop - but is not a part of this rule
     */
    it('can leave a single seat gap between selected seats and aisle', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Selected });
            })
                .addRow('B', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Available });
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    describe('default config', function () {
        it('cannot leave a gap 2 seats wide between selected seats', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSeat({ availability: SeatAvailability.Selected })
                .addSeat({ availability: SeatAvailability.Available })
                .addSeat({ availability: SeatAvailability.Available })
                .addSeat({ availability: SeatAvailability.Selected }); });
            var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
            expect(result.valid).toEqual(false);
        });
    });
    describe('custom config', function () {
        describe('allowGapsWithMultipleSeatsBetweenSelectedSeats', function () {
            var rule = cannotLeaveGapsBetweenSelectedSeatsRule({ allowGapsWithMultipleSeatsBetweenSelectedSeats: true });
            it('can leave a gap 2 seats wide between selected seats', function () {
                var seatLayout = createSingleRowSeatLayout(function (row) { return row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Selected }); });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it('can leave a gap with a sold seat and more than 1 available seat between selected seats', function () {
                var seatLayout = createSingleRowSeatLayout(function (row) { return row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Sold })
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Selected }); });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it('cannot leave a single seat gap between selected seats', function () {
                var seatLayout = createSingleRowSeatLayout(function (row) { return row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Selected }); });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(false);
            });
        });
    });
});
//# sourceMappingURL=cannot-leave-gaps-between-selected-seats-rule.test.js.map