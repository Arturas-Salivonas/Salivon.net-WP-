import { FriendSeat, Seat } from '../../../../../../types/seating/seat';
import { SeatPosition } from '../../../../../../types/seating/seat-position';
import { Area } from './../../../../../../types/seating/area';
import { Row } from './../../../../../../types/seating/row';
import { SeatLayout } from './../../../../../../types/seating/seat-layout';
import { SeatObjects } from './seat-utils';
/**
 * Finds and returns the area, row and seat objects for a given seat position.
 */
export declare const getSeatObjectsByPosition: (seatLayout: SeatLayout, position: SeatPosition) => SeatObjects | undefined;
/**
 * Gets the seat labels for a given seat position.
 */
export declare const getSeatLabelsByPosition: (seatLayout: SeatLayout, position: SeatPosition) => {
    rowLabel: string;
    seatLabel: string;
} | undefined;
/**
 * Finds and returns a seat within a seat layout by its position information.
 */
export declare const getSeatByPosition: (seatLayout: SeatLayout, position: SeatPosition) => Seat | undefined;
/**
 * The area, row and seat objects associated with a seat.
 */
export interface SeatObjects {
    area: Area;
    row: Row;
    seat: Seat;
}
export declare const seatIsUnavailable: (seat: Seat) => boolean;
/**
 * Determines whether or not a given seat is a sofa based on its SeatType.
 */
export declare const isSofaSeat: (seat: Seat) => boolean;
/**
 * Determines whether or not a given seat is a friend seat
 */
export declare const isFriendSeat: (seat: Seat | FriendSeat) => seat is FriendSeat;
/**
 * Determines whether or not two given seat positions are the same.
 */
export declare const areSeatPositionsEqual: (positionA: SeatPosition, positionB: SeatPosition) => boolean;
/**
 * Makes a deep copy of a given seat.
 */
export declare const cloneSeat: (seat: Seat) => Seat;
/**
 * Inverts a seat.
 * Left sofa seats are changed to right and vice versa. Other seat types remain the same.
 */
export declare const invertSeat: (seat: Seat) => Seat;
