var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { toJS } from 'mobx';
import { exampleOrderShowtime } from '../../../../../../example-data/order/order-showtime';
import { exampleLoyaltyTicket1, examplePackageTicket, exampleStandardTicket1 } from './../../../../../../example-data/order/order-ticket';
import { orderStoreInstance } from './../../order-store';
import { setTicketsForShowtime } from './../set-tickets-for-showtime';
describe('setTicketsForShowtime', function () {
    afterEach(function () {
        orderStoreInstance.flush();
        jest.resetAllMocks();
    });
    it('throws an error if the showtime does not exist in the order', function () {
        expect(function () { return setTicketsForShowtime('123', []); }).toThrow();
    });
    it('sets the showtime tickets correctly', function () {
        orderStoreInstance.syncToCache = jest.fn();
        var showtime = __assign({}, exampleOrderShowtime, { tickets: [] });
        orderStoreInstance.data.order.showtimes = [showtime];
        var tickets = [exampleStandardTicket1, examplePackageTicket, exampleLoyaltyTicket1];
        setTicketsForShowtime(showtime.showtimeId, tickets);
        expect(toJS(orderStoreInstance.data.order.showtimes[0].tickets)).toEqual(tickets);
        expect(orderStoreInstance.syncToCache).toBeCalled();
    });
});
//# sourceMappingURL=set-tickets-for-showtime.test.js.map