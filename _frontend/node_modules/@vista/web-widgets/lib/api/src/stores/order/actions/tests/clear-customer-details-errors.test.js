import * as orderStore from '../../order-store';
import { clearCustomerDetailsErrors } from '../clear-customer-details-errors';
jest.mock('../../order-store', function () { return ({
    orderStoreInstance: {
        data: {
            customerDetailsErrors: {
                validationErrors: undefined,
            },
        },
        syncToCache: function () { return undefined; },
    },
}); });
describe('clearCustomerDetailsErrors', function () {
    var testError = 'testError';
    var errorFieldOne = 'givenName';
    var errorFieldTwo = 'email';
    var errorFieldThree = 'familyName';
    beforeEach(function () {
        orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors = new Map([
            [errorFieldOne, testError],
            [errorFieldTwo, testError],
            [errorFieldThree, testError],
        ]);
    });
    it('can clear all errors', function () {
        clearCustomerDetailsErrors();
        expect(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.size).toBe(0);
    });
    it('can clear a single error', function () {
        clearCustomerDetailsErrors([errorFieldTwo]);
        var actualKeys = Array.from(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.keys());
        var expectedKeys = [errorFieldOne, errorFieldThree];
        expect(actualKeys).toEqual(expectedKeys);
    });
    it('can clear multiple errors', function () {
        clearCustomerDetailsErrors([errorFieldOne, errorFieldThree]);
        var actualKeys = Array.from(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.keys());
        var expectedKeys = [errorFieldTwo];
        expect(actualKeys).toEqual(expectedKeys);
    });
    it('can clear no errors', function () {
        clearCustomerDetailsErrors([]);
        var actualKeys = Array.from(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.keys());
        var expectedKeys = [errorFieldOne, errorFieldTwo, errorFieldThree];
        expect(actualKeys).toEqual(expectedKeys);
    });
    it('can attempt to clear an error that does not currently exist', function () {
        clearCustomerDetailsErrors(['phone']);
        var actualKeys = Array.from(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.keys());
        var expectedKeys = [errorFieldOne, errorFieldTwo, errorFieldThree];
        expect(actualKeys).toEqual(expectedKeys);
    });
});
//# sourceMappingURL=clear-customer-details-errors.test.js.map