import { OrderShowtime } from '../../../../../types/order/order-showtime';
import { OrderTicket, OrderVoucherTicket } from '../../../../../types/order/order-ticket';
import { TicketType, TicketTypeKey } from '../../../../../types/sales-data/ticket-type';
import { Voucher } from '../../../../../types/vouchers/voucher';
import { AllowedTicketQuantity } from './get-allowed-ticket-quantity';
import { VoucherRedemptionDetails } from './get-voucher-redemption-details';
/**
 * Selectors for the Order Store.
 */
export interface OrderStoreSelectors {
    hasVoucher: (voucherBarcode: string) => boolean;
    getVoucherTicketsForBarcode: (voucherBarcode: string) => OrderVoucherTicket[];
    getVoucherByBarcode: (voucherBarcode: string) => Voucher;
    getVoucherRedemptionDetails: (voucherBarcode: string) => VoucherRedemptionDetails;
    getShowtimeById: (showtimeId: string) => OrderShowtime;
    hasShowtime: (showtimeId: string) => boolean;
    hasMaximumAllowedTickets: () => boolean;
    getSelectedTicketsCount: () => number;
    getSelectedSeatsCountForShowtime: (showtimeId: string) => number;
    getSelectedTicketsCountForShowtime: (showtimeId: string) => number;
    getTicketTypeByKey: (showtimeId: string, ticketTypeKey: TicketTypeKey) => TicketType;
    getTicketTypesForShowtime: (showtimeId: string) => Map<TicketTypeKey, TicketType>;
    hasTicketTypesForShowtime: (showtimeId: string) => boolean;
    hasTicketTypeForShowtime: (showtimeId: string, ticketTypeKey: TicketTypeKey) => boolean;
    getFlattenedTicketsForShowtime: (showtimeId: string) => OrderTicket[];
    getAllowedTicketQuantity: (showtimeId: string, ticket: OrderTicket, ticketType: TicketType) => AllowedTicketQuantity;
    getTicketsTotalCostForShowtime: (showtimeId: string) => number;
    getTicketsTotalCostForOrder: () => number;
    getOrderTotalCost: () => number;
    getOrderSubtotalCost: () => number;
    hasOrderId: () => boolean;
    getOrderId: () => string | undefined;
    isSeatFirstOrderingForShowtime: (showtimeId: string) => boolean;
    hasAnyLoyaltyTickets: () => boolean;
    getSelectedItemModelQuantity: (itemModelId: string) => number;
    getItemsTotalCostForOrder: () => number;
}
export declare const orderStoreSelectors: OrderStoreSelectors;
