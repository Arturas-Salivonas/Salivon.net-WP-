var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { exampleOrderSeatA1 } from '../../../../../../example-data/order/order-seat';
import { exampleOrderShowtime } from '../../../../../../example-data/order/order-showtime';
import { getAllowedTicketQuantity } from '../get-allowed-ticket-quantity';
import { exampleLoyaltyTicket1, examplePackageTicket, exampleStandardTicket1, exampleVoucherTicket1 } from './../../../../../../example-data/order/order-ticket';
import { exampleLoyaltyTicketType1, examplePackageTicketType, exampleStandardTicketType1, exampleVoucherTicketType1 } from './../../../../../../example-data/order/order-ticket-type';
import { configurationStoreInstance } from './../../../configuration/configuration-store';
import { orderStoreInstance } from './../../order-store';
import { AllowedTicketQuantityStatus } from './../get-allowed-ticket-quantity';
// Todo: this only covers basic test cases currently. Should be expanded to cover edge cases later on.
describe('getAllowedTicketQuantity', function () {
    var isSeatFirstOrderingSpy = jest.spyOn(orderStoreInstance.selectors, 'isSeatFirstOrderingForShowtime');
    var areaCategoryCode = '001';
    var showtime = __assign({}, exampleOrderShowtime, { seats: [
            __assign({}, exampleOrderSeatA1, { areaCategoryCode: areaCategoryCode }),
            __assign({}, exampleOrderSeatA1, { areaCategoryCode: areaCategoryCode }),
            __assign({}, exampleOrderSeatA1, { areaCategoryCode: areaCategoryCode }),
            __assign({}, exampleOrderSeatA1, { areaCategoryCode: areaCategoryCode }),
            __assign({}, exampleOrderSeatA1, { areaCategoryCode: areaCategoryCode })
        ] });
    beforeEach(function () {
        orderStoreInstance.data.order.showtimes = [showtime];
        configurationStoreInstance.data.ticketing.maximumAllowedTicketsInAnOrder = 10;
    });
    afterEach(function () {
        configurationStoreInstance.flush();
        orderStoreInstance.flush();
        jest.clearAllMocks();
    });
    describe('standard ticket', function () {
        var ticket = __assign({}, exampleStandardTicket1, { quantity: 2 });
        var ticketType = __assign({}, exampleStandardTicketType1, { areaCategoryCode: areaCategoryCode });
        beforeEach(function () {
            orderStoreInstance.selectors.getTicketTypeByKey = jest.fn().mockReturnValue(ticketType);
        });
        it('can get the allowed quantity in ticket-first ordering mode', function () {
            isSeatFirstOrderingSpy.mockReturnValueOnce(false);
            orderStoreInstance.selectors.getSelectedTicketsCount = jest.fn().mockReturnValue(3);
            var result = getAllowedTicketQuantity(showtime.showtimeId, ticket, ticketType);
            expect(result).toEqual({
                quantity: 9,
                status: AllowedTicketQuantityStatus.Allowed
            });
        });
        it('can get the allowed quantity in seat-first ordering mode', function () {
            isSeatFirstOrderingSpy.mockReturnValueOnce(true);
            orderStoreInstance.data.order.showtimes[0].tickets = [ticket];
            var result = getAllowedTicketQuantity(showtime.showtimeId, ticket, ticketType);
            expect(result).toEqual({
                quantity: 5,
                status: AllowedTicketQuantityStatus.Allowed
            });
        });
    });
    describe('package ticket', function () {
        var ticket = __assign({}, examplePackageTicket, { quantity: 1 });
        var packageTicketType = __assign({}, examplePackageTicketType, { areaCategoryCode: areaCategoryCode, packageContents: {
                items: [],
                tickets: [
                    { description: '', descriptionTranslations: [], quantity: 2 },
                    { description: '', descriptionTranslations: [], quantity: 3 },
                ]
            } });
        beforeEach(function () {
            orderStoreInstance.selectors.getTicketTypeByKey = jest.fn().mockReturnValue(packageTicketType);
        });
        it('can get the allowed quantity in ticket-first ordering mode', function () {
            isSeatFirstOrderingSpy.mockReturnValueOnce(false);
            orderStoreInstance.selectors.getSelectedTicketsCount = jest.fn().mockReturnValue(5);
            var result = getAllowedTicketQuantity(showtime.showtimeId, ticket, packageTicketType);
            expect(result).toEqual({
                quantity: 2,
                status: AllowedTicketQuantityStatus.Allowed
            });
        });
        it('can get the allowed quantity in seat-first ordering mode', function () {
            isSeatFirstOrderingSpy.mockReturnValueOnce(true);
            orderStoreInstance.data.order.showtimes[0].tickets = [ticket];
            var result = getAllowedTicketQuantity(showtime.showtimeId, ticket, packageTicketType);
            expect(result).toEqual({
                quantity: 1,
                status: AllowedTicketQuantityStatus.Allowed
            });
        });
    });
    describe('loyalty ticket', function () {
        var ticket = __assign({}, exampleLoyaltyTicket1, { quantity: 2 });
        var loyaltyTicketType = __assign({}, exampleLoyaltyTicketType1, { areaCategoryCode: areaCategoryCode, rewardDetails: {
                id: '123',
                quantityAvailable: 4
            } });
        beforeEach(function () {
            orderStoreInstance.selectors.getTicketTypeByKey = jest.fn().mockReturnValue(loyaltyTicketType);
        });
        it('can get the allowed quantity in ticket-first ordering mode', function () {
            isSeatFirstOrderingSpy.mockReturnValueOnce(false);
            orderStoreInstance.selectors.getSelectedTicketsCount = jest.fn().mockReturnValue(3);
            var result = getAllowedTicketQuantity(showtime.showtimeId, ticket, loyaltyTicketType);
            expect(result).toEqual({
                quantity: 4,
                status: AllowedTicketQuantityStatus.Allowed
            });
        });
        it('can get the allowed quantity in seat-first ordering mode', function () {
            isSeatFirstOrderingSpy.mockReturnValueOnce(true);
            orderStoreInstance.data.order.showtimes[0].tickets = [ticket];
            var result = getAllowedTicketQuantity(showtime.showtimeId, ticket, loyaltyTicketType);
            expect(result).toEqual({
                quantity: 4,
                status: AllowedTicketQuantityStatus.Allowed
            });
        });
    });
    describe('voucher ticket', function () {
        var ticket = __assign({}, exampleVoucherTicket1, { quantity: 2 });
        var voucherTicketType = __assign({}, exampleVoucherTicketType1, { areaCategoryCode: areaCategoryCode });
        beforeEach(function () {
            orderStoreInstance.selectors.getTicketTypeByKey = jest.fn().mockReturnValue(voucherTicketType);
            orderStoreInstance.selectors.getVoucherRedemptionDetails = jest.fn().mockReturnValue({
                max: 3,
                used: 2,
                remaining: 1
            });
        });
        it('can get the allowed quantity in ticket-first ordering mode', function () {
            isSeatFirstOrderingSpy.mockReturnValueOnce(false);
            orderStoreInstance.selectors.getSelectedTicketsCount = jest.fn().mockReturnValue(3);
            var result = getAllowedTicketQuantity(showtime.showtimeId, ticket, voucherTicketType);
            expect(result).toEqual({
                quantity: 3,
                status: AllowedTicketQuantityStatus.Allowed
            });
        });
        it('can get the allowed quantity in seat-first ordering mode', function () {
            isSeatFirstOrderingSpy.mockReturnValueOnce(true);
            orderStoreInstance.data.order.showtimes[0].tickets = [ticket];
            var result = getAllowedTicketQuantity(showtime.showtimeId, ticket, voucherTicketType);
            expect(result).toEqual({
                quantity: 3,
                status: AllowedTicketQuantityStatus.Allowed
            });
        });
    });
});
//# sourceMappingURL=get-allowed-ticket-quantity.test.js.map