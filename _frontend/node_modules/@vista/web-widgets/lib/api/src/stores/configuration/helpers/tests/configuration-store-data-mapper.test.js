import { CdnReferenceScheme } from '@vista/cdn-client';
import { defaultConfigurationStoreData } from '../../../../../../types/stores/configuration-store-data';
import { mapConfigurationStoreData } from '../configuration-store-data-mapper';
describe('mapConfigurationStoreData', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, undefined);
        expect(result).toEqual(defaultConfigurationStoreData);
    });
    it('returns the default config when the provided config is empty', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {});
        expect(result).toEqual(defaultConfigurationStoreData);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, 1);
        expect(result).toEqual(defaultConfigurationStoreData);
    });
});
describe('mapConfigurationStoreData.api', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            api: undefined
        });
        expect(result.api).toEqual(defaultConfigurationStoreData.api);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            api: 0
        });
        expect(result.api).toEqual(defaultConfigurationStoreData.api);
    });
    describe('url', function () {
        var defaultValue = defaultConfigurationStoreData.api.url;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: 'abc', expected: 'abc' }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    api: {
                        url: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.api.url).toEqual(testCase.expected);
            });
        });
    });
    describe('authToken', function () {
        var defaultValue = defaultConfigurationStoreData.api.authToken;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: 'abc', expected: 'abc' }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    api: {
                        authToken: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.api.authToken).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapConfigurationStoreData.cdn', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            cdn: undefined
        });
        expect(result.cdn).toEqual(defaultConfigurationStoreData.cdn);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            cdn: 0
        });
        expect(result.cdn).toEqual(defaultConfigurationStoreData.cdn);
    });
    describe('url', function () {
        var defaultValue = defaultConfigurationStoreData.cdn.url;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: 'abc', expected: 'abc' }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    cdn: {
                        url: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.cdn.url).toEqual(testCase.expected);
            });
        });
    });
    describe('mediaApiToken', function () {
        var defaultValue = defaultConfigurationStoreData.cdn.mediaApiToken;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: 'abc', expected: 'abc' }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    cdn: {
                        mediaApiToken: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.cdn.mediaApiToken).toEqual(testCase.expected);
            });
        });
    });
    describe('referenceScheme', function () {
        var defaultValue = defaultConfigurationStoreData.cdn.referenceScheme;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: 'Cinema', expected: CdnReferenceScheme.Cinema },
            { value: 'HeadOffice', expected: CdnReferenceScheme.HeadOffice },
            { value: 'Global', expected: CdnReferenceScheme.Global },
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    cdn: {
                        referenceScheme: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.cdn.referenceScheme).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapConfigurationStoreData.ticketing', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            ticketing: undefined
        });
        expect(result.ticketing).toEqual(defaultConfigurationStoreData.ticketing);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            ticketing: 0
        });
        expect(result.ticketing).toEqual(defaultConfigurationStoreData.ticketing);
    });
    describe('isSeatFirstOrdering', function () {
        var defaultValue = defaultConfigurationStoreData.ticketing.isSeatFirstOrdering;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: true, expected: true },
            { value: false, expected: false }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    ticketing: {
                        isSeatFirstOrdering: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.ticketing.isSeatFirstOrdering).toEqual(testCase.expected);
            });
        });
    });
    describe('maximumAllowedTicketsInAnOrder', function () {
        var defaultValue = defaultConfigurationStoreData.ticketing.maximumAllowedTicketsInAnOrder;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: '1', expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: 1, expected: 1 },
            { value: 100, expected: 100 }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    ticketing: {
                        maximumAllowedTicketsInAnOrder: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.ticketing.maximumAllowedTicketsInAnOrder).toEqual(testCase.expected);
            });
        });
    });
    describe('admittingDuration', function () {
        var defaultValue = defaultConfigurationStoreData.ticketing.admittingDuration;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: '1', expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: 0, expected: 0 },
            { value: 100, expected: 100 }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    ticketing: {
                        admittingDuration: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.ticketing.admittingDuration).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapConfigurationStoreData.localisation', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            localisation: undefined
        });
        expect(result.localisation).toEqual(defaultConfigurationStoreData.localisation);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            localisation: 0
        });
        expect(result.localisation).toEqual(defaultConfigurationStoreData.localisation);
    });
    describe('languageTag', function () {
        var defaultValue = defaultConfigurationStoreData.localisation.languageTag;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: 'abc', expected: 'abc' }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    localisation: {
                        languageTag: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.localisation.languageTag).toEqual(testCase.expected);
            });
        });
    });
    describe('currency', function () {
        var defaultValue = defaultConfigurationStoreData.localisation.currency;
        var validFormat = {
            symbol: '%',
            format: '%s%v',
            decimalSeparator: '<',
            decimalPrecision: 3,
            thousandsSeparator: '>'
        };
        var testCases = [
            // { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: validFormat, expected: validFormat }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    localisation: {
                        currency: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.localisation.currency).toEqual(testCase.expected);
            });
        });
    });
    describe('date', function () {
        var defaultValue = defaultConfigurationStoreData.localisation.date;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: { default: '123', short: '456' }, expected: { default: '123', short: '456' } }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    localisation: {
                        date: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.localisation.date).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapConfigurationStoreData.security', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            security: undefined
        });
        expect(result.security).toEqual(defaultConfigurationStoreData.security);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            security: 0
        });
        expect(result.security).toEqual(defaultConfigurationStoreData.security);
    });
    describe('captcha', function () {
        var defaultValue = defaultConfigurationStoreData.security.captcha;
        var validFormat = { siteKey: '123', size: 'compact' };
        var testCases = [
            // { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: '', expected: defaultValue },
            { value: validFormat, expected: validFormat }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    security: {
                        captcha: testCase.value
                    }
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.security.captcha).toEqual(testCase.expected);
            });
        });
    });
});
describe('mapConfigurationStoreData.customerDetails', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            customerDetails: undefined,
        });
        expect(result.customerDetails).toEqual(defaultConfigurationStoreData.customerDetails);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            customerDetails: 0,
        });
        expect(result.customerDetails).toEqual(defaultConfigurationStoreData.customerDetails);
    });
    describe('validation', function () {
        var targetField = 'givenName';
        describe('returns the default config', function () {
            var invalidValidationConfigs = [undefined, null, -1, '', true];
            var _loop_1 = function (invalidValidationConfig) {
                it("when passed '" + invalidValidationConfig + "' as the validation config", function () {
                    var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                        customerDetails: {
                            validation: invalidValidationConfig,
                        },
                    });
                    expect(result.customerDetails.validation).toEqual(defaultConfigurationStoreData.customerDetails.validation);
                });
            };
            for (var _i = 0, invalidValidationConfigs_1 = invalidValidationConfigs; _i < invalidValidationConfigs_1.length; _i++) {
                var invalidValidationConfig = invalidValidationConfigs_1[_i];
                _loop_1(invalidValidationConfig);
            }
        });
        describe('field validation config', function () {
            describe('returns the default config', function () {
                var invalidValidationConfigs = [undefined, null, -1, '', true];
                var _loop_2 = function (invalidValidationConfig) {
                    it("when passed '" + invalidValidationConfig + "' as the field validation config", function () {
                        var _a;
                        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                            customerDetails: {
                                validation: (_a = {},
                                    _a[targetField] = invalidValidationConfig,
                                    _a),
                            },
                        });
                        expect(result.customerDetails.validation[targetField]).toEqual(defaultConfigurationStoreData.customerDetails.validation[targetField]);
                    });
                };
                for (var _i = 0, invalidValidationConfigs_2 = invalidValidationConfigs; _i < invalidValidationConfigs_2.length; _i++) {
                    var invalidValidationConfig = invalidValidationConfigs_2[_i];
                    _loop_2(invalidValidationConfig);
                }
            });
            describe('required', function () {
                var defaultValue = defaultConfigurationStoreData.customerDetails.validation[targetField].required;
                var testCases = [
                    { value: undefined, expected: defaultValue },
                    { value: null, expected: defaultValue },
                    { value: -1, expected: defaultValue },
                    { value: '', expected: defaultValue },
                    { value: {}, expected: defaultValue },
                    { value: true, expected: true },
                    { value: false, expected: false },
                ];
                var _loop_3 = function (testCase) {
                    it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                        var _a;
                        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                            customerDetails: {
                                validation: (_a = {},
                                    _a[targetField] = {
                                        required: testCase.value,
                                    },
                                    _a),
                            },
                        });
                        expect(result.customerDetails.validation[targetField].required).toBe(testCase.expected);
                    });
                };
                for (var _i = 0, testCases_1 = testCases; _i < testCases_1.length; _i++) {
                    var testCase = testCases_1[_i];
                    _loop_3(testCase);
                }
            });
            describe('customValidation', function () {
                var defaultValue = defaultConfigurationStoreData.customerDetails.validation[targetField].customValidation;
                var validValue = function () { return false; };
                var testCases = [
                    { value: undefined, expected: defaultValue },
                    { value: null, expected: defaultValue },
                    { value: -1, expected: defaultValue },
                    { value: '', expected: defaultValue },
                    { value: {}, expected: defaultValue },
                    { value: true, expected: defaultValue },
                    { value: validValue, expected: validValue },
                ];
                var _loop_4 = function (testCase) {
                    it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                        var _a;
                        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                            customerDetails: {
                                validation: (_a = {},
                                    _a[targetField] = {
                                        customValidation: testCase.value,
                                    },
                                    _a),
                            },
                        });
                        expect(result.customerDetails.validation[targetField].customValidation).toBe(testCase.expected);
                    });
                };
                for (var _i = 0, testCases_2 = testCases; _i < testCases_2.length; _i++) {
                    var testCase = testCases_2[_i];
                    _loop_4(testCase);
                }
            });
        });
        describe('text field validation config', function () {
            describe('minLength', function () {
                var defaultValue = defaultConfigurationStoreData.customerDetails.validation[targetField].minLength;
                var validValue = 5;
                var validNegativeValue = -5;
                var testCases = [
                    { value: undefined, expected: defaultValue },
                    { value: null, expected: defaultValue },
                    { value: '', expected: defaultValue },
                    { value: {}, expected: defaultValue },
                    { value: true, expected: defaultValue },
                    { value: defaultValue, expected: defaultValue },
                    { value: validNegativeValue, expected: validNegativeValue },
                    { value: validValue, expected: validValue },
                ];
                var _loop_5 = function (testCase) {
                    it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                        var _a;
                        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                            customerDetails: {
                                validation: (_a = {},
                                    _a[targetField] = {
                                        minLength: testCase.value,
                                    },
                                    _a),
                            },
                        });
                        expect(result.customerDetails.validation[targetField].minLength).toBe(testCase.expected);
                    });
                };
                for (var _i = 0, testCases_3 = testCases; _i < testCases_3.length; _i++) {
                    var testCase = testCases_3[_i];
                    _loop_5(testCase);
                }
                it('returns the minimum of min and max length', function () {
                    var _a;
                    var minLength = 4;
                    var maxLength = 2;
                    var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                        customerDetails: {
                            validation: (_a = {},
                                _a[targetField] = {
                                    minLength: minLength,
                                    maxLength: maxLength,
                                },
                                _a),
                        },
                    });
                    expect(result.customerDetails.validation[targetField].minLength).toBe(maxLength);
                });
            });
            describe('maxLength', function () {
                var defaultValue = defaultConfigurationStoreData.customerDetails.validation[targetField].maxLength;
                var validValue = 5;
                var validNegativeValue = -1;
                var testCases = [
                    { value: undefined, expected: defaultValue },
                    { value: null, expected: defaultValue },
                    { value: '', expected: defaultValue },
                    { value: {}, expected: defaultValue },
                    { value: true, expected: defaultValue },
                    { value: validNegativeValue, expected: validNegativeValue },
                    { value: validValue, expected: validValue },
                ];
                var _loop_6 = function (testCase) {
                    it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                        var _a;
                        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                            customerDetails: {
                                validation: (_a = {},
                                    _a[targetField] = {
                                        maxLength: testCase.value,
                                    },
                                    _a),
                            },
                        });
                        expect(result.customerDetails.validation[targetField].maxLength).toBe(testCase.expected);
                    });
                };
                for (var _i = 0, testCases_4 = testCases; _i < testCases_4.length; _i++) {
                    var testCase = testCases_4[_i];
                    _loop_6(testCase);
                }
            });
            describe('format', function () {
                var defaultValue = defaultConfigurationStoreData.customerDetails.validation[targetField].format;
                var validFormatString = 'email';
                var validFormatRegex = /a/;
                var testCases = [
                    { value: undefined, expected: defaultValue },
                    { value: null, expected: defaultValue },
                    { value: -1, expected: defaultValue },
                    { value: {}, expected: defaultValue },
                    { value: true, expected: defaultValue },
                    { value: 'abc', expected: defaultValue },
                    { value: '', expected: defaultValue },
                    { value: validFormatString, expected: validFormatString },
                    { value: validFormatRegex, expected: validFormatRegex },
                ];
                var _loop_7 = function (testCase) {
                    it("returns '" + testCase.expected + "' when '" + testCase.value + "' is passed in", function () {
                        var _a;
                        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                            customerDetails: {
                                validation: (_a = {},
                                    _a[targetField] = {
                                        format: testCase.value,
                                    },
                                    _a),
                            },
                        });
                        expect(result.customerDetails.validation[targetField].format).toBe(testCase.expected);
                    });
                };
                for (var _i = 0, testCases_5 = testCases; _i < testCases_5.length; _i++) {
                    var testCase = testCases_5[_i];
                    _loop_7(testCase);
                }
            });
        });
    });
    describe('mapConfigurationStoreData.cache', function () {
        it('returns the default config when the provided config is undefined', function () {
            var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                cache: undefined
            });
            expect(result.cache).toEqual(defaultConfigurationStoreData.cache);
        });
        it('returns the default config when the provided config is invalid', function () {
            var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
                cache: 0
            });
            expect(result.cache).toEqual(defaultConfigurationStoreData.cache);
        });
        describe('durations', function () {
            describe('screeningDates', function () {
                var defaultValue = defaultConfigurationStoreData.cache.durations.screeningDates;
                var validValue = 60;
                var testCases = [
                    { value: undefined, expected: defaultValue },
                    { value: -1, expected: defaultValue },
                    { value: '', expected: defaultValue },
                    { value: validValue, expected: validValue }
                ];
                testCases.forEach(function (testCase) {
                    it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                        var config = {
                            cache: {
                                durations: { screeningDates: testCase.value }
                            }
                        };
                        var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                        expect(result.cache.durations.screeningDates).toEqual(testCase.expected);
                    });
                });
            });
            describe('showtimes', function () {
                var defaultValue = defaultConfigurationStoreData.cache.durations.showtimes;
                var validValue = 60;
                var testCases = [
                    { value: undefined, expected: defaultValue },
                    { value: -1, expected: defaultValue },
                    { value: '', expected: defaultValue },
                    { value: validValue, expected: validValue }
                ];
                testCases.forEach(function (testCase) {
                    it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                        var config = {
                            cache: {
                                durations: { showtimes: testCase.value }
                            }
                        };
                        var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                        expect(result.cache.durations.showtimes).toEqual(testCase.expected);
                    });
                });
            });
        });
    });
});
describe('mapConfigurationStoreData.enableLoadingIndicator', function () {
    it('returns the default config when the provided config is undefined', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            enableLoadingIndicator: undefined
        });
        expect(result.enableLoadingIndicator).toEqual(defaultConfigurationStoreData.enableLoadingIndicator);
    });
    it('returns the default config when the provided config is invalid', function () {
        var result = mapConfigurationStoreData(defaultConfigurationStoreData, {
            enableLoadingIndicator: 0
        });
        expect(result.enableLoadingIndicator).toEqual(defaultConfigurationStoreData.enableLoadingIndicator);
    });
    describe('enableLoadingIndicator', function () {
        var defaultValue = defaultConfigurationStoreData.enableLoadingIndicator;
        var testCases = [
            { value: null, expected: defaultValue },
            { value: undefined, expected: defaultValue },
            { value: -1, expected: defaultValue },
            { value: true, expected: true },
            { value: false, expected: false }
        ];
        testCases.forEach(function (testCase) {
            it("returns " + testCase.expected + " when " + testCase.value + " is passed in", function () {
                var config = {
                    enableLoadingIndicator: testCase.value
                };
                var result = mapConfigurationStoreData(defaultConfigurationStoreData, config);
                expect(result.enableLoadingIndicator).toEqual(testCase.expected);
            });
        });
    });
});
//# sourceMappingURL=configuration-store-data-mapper.test.js.map