import { browserSessionServiceInstance } from '../../user/browser-session-service';
import { cacheServiceInstance } from '../../user/cache-service';
import { BaseStore } from '../base-store';
/**
 * @hidden
 */
var exampleData = {
    one: 1,
    two: 2
};
/**
 * @hidden
 */
var defaults = {
    one: 0,
    two: 0,
    three: 0
};
/**
 * @hidden
 */
var mockCallback = jest.fn();
/**
 * Base Store class test
 */
describe('Base Store', function () {
    var store;
    it('can initialize empty', function () {
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance);
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(store.data)).toEqual(JSON.stringify({}));
    });
    it('can initialize with defaults', function () {
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance, defaults);
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(store.data)).toEqual(JSON.stringify(defaults));
    });
    it('can initialize and merge with defaults', function () {
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance, defaults);
        store.setData(exampleData);
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(store.data)).toEqual(JSON.stringify({ one: 1, two: 2, three: 0 }));
    });
    it('can initialize and merge with previous values', function () {
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance);
        store.setData(exampleData);
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(store.data)).toEqual(JSON.stringify({ one: 1, two: 2 }));
        store.setData({ three: 3 });
        expect(JSON.stringify(store.data)).toEqual(JSON.stringify({ one: 1, two: 2, three: 3 }));
    });
    it('can subscribe and unsubscribe to updates', function () {
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance, defaults);
        var unsubscribe = store.subscribe(mockCallback);
        expect(mockCallback).toHaveBeenCalledTimes(1);
        store.setData(exampleData);
        expect(mockCallback).toHaveBeenCalledTimes(2);
        unsubscribe();
        store.setData({ one: 'one' });
        expect(mockCallback).toHaveBeenCalledTimes(2);
    });
    it('can persist a store', function () {
        browserSessionServiceInstance.start();
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance, defaults);
        store.setData(exampleData);
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(cacheServiceInstance.get('test'))).toEqual(JSON.stringify({ one: 1, two: 2, three: 0 }));
    });
    it('can persist and retrieve a store', function () {
        browserSessionServiceInstance.start();
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance, defaults);
        store.setData(exampleData);
        // new empty store
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance);
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(store.data)).toEqual(JSON.stringify({}));
        // hydrate
        store.hydrate();
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(store.data)).toEqual(JSON.stringify({ one: 1, two: 2, three: 0 }));
    });
    it('can programmatically persist a store after data mutation', function () {
        browserSessionServiceInstance.start();
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance, defaults);
        store.setData(exampleData);
        var d = store.data;
        d.three = 3333;
        store.setData();
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(cacheServiceInstance.get('test'))).toEqual(JSON.stringify({ one: 1, two: 2, three: 3333 }));
    });
    it('flush resets data to defaults and updates store', function () {
        browserSessionServiceInstance.start();
        store = new BaseStore('test', browserSessionServiceInstance, cacheServiceInstance, defaults);
        store.setData(exampleData);
        // use JSON.stringify because store data is proxied by mobx
        expect(JSON.stringify(cacheServiceInstance.get('test'))).toEqual(JSON.stringify({ one: 1, two: 2, three: 0 }));
        store.flush();
        expect(store.data).toEqual(defaults);
        expect(JSON.stringify(cacheServiceInstance.get('test'))).toEqual(JSON.stringify(defaults));
    });
});
//# sourceMappingURL=base-store.test.js.map