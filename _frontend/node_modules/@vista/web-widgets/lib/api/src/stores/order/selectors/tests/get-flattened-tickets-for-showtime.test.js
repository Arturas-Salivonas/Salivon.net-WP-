var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { exampleOrderShowtime } from '../../../../../../example-data/order/order-showtime';
import { OrderTicketCategory } from '../../../../../../types/order/order-ticket';
import { getFlattenedTicketsForShowtime } from '../get-flattened-tickets-for-showtime';
import { exampleStandardTicketType1, exampleStandardTicketType2, exampleVoucherTicketType1 } from './../../../../../../example-data/order/order-ticket-type';
import { orderStoreInstance } from './../../order-store';
describe('getFlattenedTicketsForShowtime', function () {
    beforeEach(function () {
        orderStoreInstance.flush();
    });
    it('throws an error if the showtime does not exist in the order', function () {
        expect(function () {
            getFlattenedTicketsForShowtime('123');
        }).toThrow('Could not find showtime with id 123');
    });
    it('returns an empty array if the showtime has no ticket types', function () {
        var showtime = __assign({}, exampleOrderShowtime, { showtimeId: '123', ticketTypes: undefined });
        orderStoreInstance.data.order.showtimes = [showtime];
        var result = getFlattenedTicketsForShowtime('123');
        expect(result).toEqual([]);
    });
    it('returns a set of ticket with a quantity of 0 (excluding voucher ticket types) when no tickets have been selected', function () {
        var ticketTypes = new Map([
            ['key1', exampleStandardTicketType1],
            ['key2', exampleStandardTicketType2],
            ['key3', exampleVoucherTicketType1]
        ]);
        var showtime = __assign({}, exampleOrderShowtime, { showtimeId: '123', ticketTypes: ticketTypes, tickets: [] });
        orderStoreInstance.data.order.showtimes = [showtime];
        var result = getFlattenedTicketsForShowtime('123');
        expect(result).toEqual([
            {
                category: OrderTicketCategory.Standard,
                quantity: 0,
                ticketTypeKey: 'key1'
            },
            {
                category: OrderTicketCategory.Standard,
                quantity: 0,
                ticketTypeKey: 'key2'
            }
        ]);
    });
    it('returns a merged set of tickets and ticket types', function () {
        var ticketTypes = new Map([
            ['key1', exampleStandardTicketType1],
            ['key2', exampleStandardTicketType2],
            ['key3', exampleVoucherTicketType1]
        ]);
        var tickets = [
            {
                ticketTypeKey: 'key1',
                category: OrderTicketCategory.Standard,
                quantity: 1
            },
            {
                ticketTypeKey: 'key3',
                category: OrderTicketCategory.Voucher,
                quantity: 1,
                barcode: '123'
            }
        ];
        var showtime = __assign({}, exampleOrderShowtime, { showtimeId: '123', ticketTypes: ticketTypes, tickets: tickets });
        orderStoreInstance.data.order.showtimes = [showtime];
        var result = getFlattenedTicketsForShowtime('123');
        expect(result).toEqual([
            {
                ticketTypeKey: 'key1',
                category: OrderTicketCategory.Standard,
                quantity: 1
            },
            {
                ticketTypeKey: 'key2',
                category: OrderTicketCategory.Standard,
                quantity: 0
            },
            {
                ticketTypeKey: 'key3',
                category: OrderTicketCategory.Voucher,
                quantity: 1,
                barcode: '123'
            }
        ]);
    });
});
//# sourceMappingURL=get-flattened-tickets-for-showtime.test.js.map