import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatSelectionRuleName } from '../../rules/seat-selection-rule';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { getSeat } from '../../test/test-utils';
import { SeatLayoutStateManager } from '../../utils/seat-layout-state-manager';
import { PopFirstSelectedSeatHandler } from '../pop-first-selected-seat-handler';
import { defaultSeatSelectionRules } from './../../rules/rules';
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
/**
 * @hidden
 */
var TestFixture = /** @class */ (function () {
    function TestFixture() {
        var _this = this;
        this.defaultSeatHandler = new PopFirstSelectedSeatHandler(defaultSeatSelectionRules, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
        this.defaultSeatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSeat({ availability: SeatAvailability.Available, seatLabel: '1' });
                row.addSeat({ availability: SeatAvailability.Selected, seatLabel: '2' });
            }); });
            areaCat.setTotalSeatsToSelect(1);
        })
            .create();
        this.seatLayoutManager = new SeatLayoutStateManager(this.defaultSeatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
        this.availableSeat = getSeat('A', '1', this.defaultSeatLayout);
        this.selectedSeat = getSeat('A', '2', this.defaultSeatLayout);
        this.areaCategory = this.defaultSeatLayout.areaCategories[0];
        this.successRule = {
            name: SeatSelectionRuleName.MustSelectAtLeastOneSeat,
            preventSeatSelection: true,
            validate: function (seatLayoutStateManager) { return _this.successRuleResult; }
        };
        this.successRuleSpy = jest.spyOn(this.successRule, 'validate');
        this.successRuleResult = {
            valid: true,
            ruleName: SeatSelectionRuleName.MustSelectAtLeastOneSeat
        };
        this.failurePreventSeatSelectionRule = {
            name: SeatSelectionRuleName.MustSelectAtLeastOneSeat,
            preventSeatSelection: true,
            validate: function (seatLayoutStateManager) { return _this.failurePreventSeatSelectionRuleResult; }
        };
        this.failurePreventSeatSelectionRuleSpy = jest.spyOn(this.failurePreventSeatSelectionRule, 'validate');
        this.failurePreventSeatSelectionRuleResult = {
            valid: false,
            ruleName: this.failurePreventSeatSelectionRule.name
        };
        this.failureAllowSeatSelectionRule = {
            name: SeatSelectionRuleName.MustSelectAtLeastOneSeat,
            preventSeatSelection: false,
            validate: function (seatLayoutStateManager) { return _this.failureAllowSeatSelectionRuleResult; }
        };
        this.failureAllowSeatSelectionRuleSpy = jest.spyOn(this.failureAllowSeatSelectionRule, 'validate');
        this.failureAllowSeatSelectionRuleResult = {
            valid: false,
            ruleName: this.failureAllowSeatSelectionRule.name
        };
    }
    TestFixture.prototype.resetAllSpies = function () {
        this.successRuleSpy.mockClear();
        this.failurePreventSeatSelectionRuleSpy.mockClear();
    };
    return TestFixture;
}());
export { TestFixture };
//# sourceMappingURL=test-fixture.js.map