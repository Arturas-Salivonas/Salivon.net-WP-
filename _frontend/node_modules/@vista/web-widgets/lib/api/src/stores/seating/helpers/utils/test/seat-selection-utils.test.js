import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { deselectSeat, getSelectedSeats, seatSelectionsAreEqual, selectSeat } from '../seat-selection-utils';
var testLayout;
var testAreaCategory;
var testAvailableSeat;
var testSelectedSeat;
beforeEach(function () {
    testLayout = new SeatLayoutBuilder().addAreaCategory(function (areaCat) {
        return areaCat.addArea(function (area) {
            area.addRow('A', function (row) {
                row.addSeat({ availability: SeatAvailability.Available });
                row.addSeat({ availability: SeatAvailability.Sold });
                row.addSeat({ availability: SeatAvailability.Selected });
            });
        });
    }).create();
    testAreaCategory = testLayout.areaCategories[0];
    testAvailableSeat = testLayout.areas[0].rows[0].seats[0];
    testSelectedSeat = testLayout.areas[0].rows[0].seats[2];
});
var makeDeepCopyOf = function (object) {
    return JSON.parse(JSON.stringify(object));
};
describe('selectSeat', function () {
    it('throws an error when the seat is undefined', function () {
        expect(function () {
            selectSeat(undefined, testAreaCategory);
        }).toThrowErrorMatchingSnapshot();
    });
    it('throws an error when the areaCategory is undefined', function () {
        expect(function () {
            selectSeat(testAvailableSeat, undefined);
        }).toThrowErrorMatchingSnapshot();
    });
    it('makes no changes when the seat is already selected', function () {
        var testSelectedSeatCopy = makeDeepCopyOf(testSelectedSeat);
        var testAreaCategoryCopy = makeDeepCopyOf(testAreaCategory);
        selectSeat(testSelectedSeat, testAreaCategory);
        expect(testSelectedSeatCopy).toEqual(testSelectedSeatCopy);
        expect(testAreaCategory).toEqual(testAreaCategoryCopy);
    });
    it('correctly selects an available seat', function () {
        var testAreaCategoryCopy = makeDeepCopyOf(testAreaCategory);
        selectSeat(testAvailableSeat, testAreaCategory);
        expect(testAvailableSeat.availability).toEqual(SeatAvailability.Selected);
        expect(testAreaCategory.seatsNotAllocatedCount).toEqual(testAreaCategoryCopy.seatsNotAllocatedCount - 1);
        expect(testAreaCategory.seatsAllocatedCount).toEqual(testAreaCategoryCopy.seatsAllocatedCount + 1);
        expect(testAreaCategory.selectedSeats.length).toEqual(testAreaCategoryCopy.selectedSeats.length + 1);
    });
});
describe('deselectSeat', function () {
    it('throws an error when the seat is undefined', function () {
        expect(function () {
            deselectSeat(undefined, testAreaCategory);
        }).toThrowErrorMatchingSnapshot();
    });
    it('throws an error when the areaCategory is undefined', function () {
        expect(function () {
            deselectSeat(testAvailableSeat, undefined);
        }).toThrowErrorMatchingSnapshot();
    });
    it('makes no changes when the seat is already available', function () {
        var testAvailableSeatCopy = makeDeepCopyOf(testAvailableSeat);
        var testAreaCategoryCopy = makeDeepCopyOf(testAreaCategory);
        deselectSeat(testAvailableSeat, testAreaCategory);
        expect(testAvailableSeat).toEqual(testAvailableSeatCopy);
        expect(testAreaCategory).toEqual(testAreaCategoryCopy);
    });
    it('correctly deselects a selected seat', function () {
        var testAreaCategoryCopy = makeDeepCopyOf(testAreaCategory);
        deselectSeat(testSelectedSeat, testAreaCategory);
        expect(testSelectedSeat.availability).toEqual(SeatAvailability.Available);
        expect(testAreaCategory.seatsNotAllocatedCount).toEqual(testAreaCategoryCopy.seatsNotAllocatedCount + 1);
        expect(testAreaCategory.seatsAllocatedCount).toEqual(testAreaCategoryCopy.seatsAllocatedCount - 1);
        expect(testAreaCategory.selectedSeats.length).toEqual(testAreaCategoryCopy.selectedSeats.length - 1);
    });
});
describe('getSelectedSeats', function () {
    it('returns the selected seats', function () {
        var selectedSeats = getSelectedSeats(testLayout);
        expect(selectedSeats).toEqual([testSelectedSeat]);
    });
    it('throws an error when a seat position is invalid', function () {
        testAreaCategory.selectedSeats.push({
            areaNumber: -1,
            rowIndex: -1,
            columnIndex: -1
        });
        expect(function () {
            getSelectedSeats(testLayout);
        }).toThrowErrorMatchingSnapshot();
    });
});
describe('seatSelectionsAreEqual', function () {
    it('returns true if selections are equal', function () {
        var seatPositionsA = [{ areaNumber: 1, rowIndex: 2, columnIndex: 3 }, { areaNumber: 4, rowIndex: 5, columnIndex: 6 }];
        var seatPositionsB = [{ areaNumber: 1, rowIndex: 2, columnIndex: 3 }, { areaNumber: 4, rowIndex: 5, columnIndex: 6 }];
        expect(seatSelectionsAreEqual(seatPositionsA, seatPositionsB)).toBe(true);
    });
    it('returns true if selections are equal but in different order', function () {
        var seatPositionsA = [{ areaNumber: 1, rowIndex: 2, columnIndex: 3 }, { areaNumber: 4, rowIndex: 5, columnIndex: 6 }];
        var seatPositionsB = [{ areaNumber: 4, rowIndex: 5, columnIndex: 6 }, { areaNumber: 1, rowIndex: 2, columnIndex: 3 }];
        expect(seatSelectionsAreEqual(seatPositionsA, seatPositionsB)).toBe(true);
    });
    it('returns false if selections are different', function () {
        var seatPositionsA = [{ areaNumber: 1, rowIndex: 2, columnIndex: 3 }];
        var seatPositionsB = [{ areaNumber: 4, rowIndex: 5, columnIndex: 6 }];
        expect(seatSelectionsAreEqual(seatPositionsA, seatPositionsB)).toBe(false);
    });
    it('returns false if selections have different number of seats', function () {
        var seatPositionsA = [{ areaNumber: 1, rowIndex: 0, columnIndex: 0 }];
        var seatPositionsB = [{ areaNumber: 1, rowIndex: 0, columnIndex: 0 }, { areaNumber: 1, rowIndex: 0, columnIndex: 0 }];
        expect(seatSelectionsAreEqual(seatPositionsA, seatPositionsB)).toBe(false);
    });
});
//# sourceMappingURL=seat-selection-utils.test.js.map