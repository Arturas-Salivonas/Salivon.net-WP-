import { action } from 'mobx';
import { OrderTicketCategory } from '../../../../../types/order/order-ticket';
import { isVoucherTicket } from '../../../services/order/utils/order-ticket-utils';
import { orderStoreInstance } from '../order-store';
/**
 * Set the quantity of a given ticket
 */
export var setTicketQuantity = action(function (showtimeId, ticketTypeKey, quantity, voucherBarcode) {
    if (!showtimeId)
        throw new Error('Cannot set ticket quantity without a showtimeId.');
    if (!ticketTypeKey)
        throw new Error('Cannot set ticket quantity without a ticketTypeKey.');
    if (!Number.isInteger(quantity) || quantity < 0)
        throw new Error("Provided quantity " + quantity + " is invalid. Please provide a positive integer value.");
    if (!orderStoreInstance.selectors.hasTicketTypeForShowtime(showtimeId, ticketTypeKey))
        throw new Error("Showtime with id " + showtimeId + " has no ticket types.");
    var showtime = orderStoreInstance.selectors.getShowtimeById(showtimeId);
    var existingTicket = showtime.tickets.find(function (ticket) {
        if (ticket.ticketTypeKey !== ticketTypeKey)
            return false;
        if (voucherBarcode && (!isVoucherTicket(ticket) || ticket.barcode !== voucherBarcode))
            return false;
        return true;
    });
    if (existingTicket)
        existingTicket.quantity = quantity;
    else if (quantity > 0 || voucherBarcode) {
        // We let voucher tickets to be added even though the quantity is 0
        // This is for scenarios where the order contains the maximum allowed tickets,
        // but the user still went to add a voucher to the order.
        // We also need this when you have a voucher that can be redeemed against multiple ticket types.
        // Note: This will result in orders containing 0 quantity tickets. We check before the API call is made
        // and filter out these tickets accordingly.
        var newTicket = createTicketWithQuantity(ticketTypeKey, quantity, voucherBarcode);
        showtime.tickets.push(newTicket);
    }
    // Update cached data
    orderStoreInstance.syncToCache();
});
function createTicketWithQuantity(ticketTypeKey, quantity, voucherBarcode) {
    return voucherBarcode
        ? {
            ticketTypeKey: ticketTypeKey,
            quantity: quantity,
            category: OrderTicketCategory.Voucher,
            barcode: voucherBarcode
        }
        : {
            ticketTypeKey: ticketTypeKey,
            quantity: quantity,
            category: OrderTicketCategory.Standard
        };
}
//# sourceMappingURL=set-ticket-quantity.js.map