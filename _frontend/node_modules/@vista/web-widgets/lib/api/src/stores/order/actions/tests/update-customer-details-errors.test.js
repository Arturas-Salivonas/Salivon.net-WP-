import * as orderStore from '../../order-store';
import { clearCustomerDetailsErrors } from '../clear-customer-details-errors';
import { updateCustomerDetailsErrors } from '../update-customer-details-errors';
jest.mock('../../order-store', function () { return ({
    orderStoreInstance: {
        data: {
            customerDetailsErrors: {
                validationErrors: undefined,
            },
        },
        syncToCache: function () { return undefined; },
    },
}); });
describe('clearCustomerDetailsErrors', function () {
    var oldTestError = 'oldTestError';
    var testError = 'testError';
    var errorFieldOne = 'givenName';
    var errorFieldTwo = 'email';
    beforeEach(function () {
        orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors = new Map([
            [errorFieldOne, oldTestError],
        ]);
    });
    it('can set a single error', function () {
        updateCustomerDetailsErrors([[errorFieldTwo, testError]]);
        var expectedStoredErrors = [[errorFieldOne, oldTestError], [errorFieldTwo, testError]];
        var storedErrors = Array.from(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.entries());
        expect(storedErrors).toEqual(expectedStoredErrors);
    });
    it('can modify an existing error', function () {
        updateCustomerDetailsErrors([[errorFieldOne, testError]]);
        var expectedStoredErrors = [[errorFieldOne, testError]];
        var storedErrors = Array.from(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.entries());
        expect(storedErrors).toEqual(expectedStoredErrors);
    });
    it('can set multiple errors', function () {
        updateCustomerDetailsErrors([[errorFieldOne, testError], [errorFieldTwo, testError]]);
        var expectedStoredErrors = [[errorFieldOne, testError], [errorFieldTwo, testError]];
        var storedErrors = Array.from(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.entries());
        expect(storedErrors).toEqual(expectedStoredErrors);
    });
    it('can set no errors', function () {
        clearCustomerDetailsErrors([]);
        var expectedStoredErrors = [[errorFieldOne, oldTestError]];
        var storedErrors = Array.from(orderStore.orderStoreInstance.data.customerDetailsErrors.validationErrors.entries());
        expect(storedErrors).toEqual(expectedStoredErrors);
    });
});
//# sourceMappingURL=update-customer-details-errors.test.js.map