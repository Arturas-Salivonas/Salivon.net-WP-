var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { exampleStandardTicket1, exampleVoucherTicket1 } from '../../../../../../example-data/order/order-ticket';
import { getVoucherTicketsForBarcode } from '../get-voucher-tickets-for-barcode';
import { exampleOrderShowtime } from './../../../../../../example-data/order/order-showtime';
import { exampleStandardTicket2, exampleStandardTicket3 } from './../../../../../../example-data/order/order-ticket';
import { orderStoreInstance } from './../../order-store';
describe('getVoucherTicketsForBarcode', function () {
    beforeEach(function () {
        orderStoreInstance.flush();
    });
    it('returns an empty array when the order has no showtimes', function () {
        orderStoreInstance.data.order.showtimes = [];
        var result = getVoucherTicketsForBarcode('123');
        expect(result).toEqual([]);
    });
    it('returns an empty array when the orders showtimes have no tickets', function () {
        orderStoreInstance.data.order.showtimes = [
            __assign({}, exampleOrderShowtime, { tickets: [] }),
            __assign({}, exampleOrderShowtime, { tickets: [] })
        ];
        var result = getVoucherTicketsForBarcode('123');
        expect(result).toEqual([]);
    });
    it('returns the voucher tickets for the given barcode', function () {
        var barcode = '123';
        var voucherTicket1 = __assign({}, exampleVoucherTicket1, { ticketTypeKey: '1', barcode: barcode });
        var voucherTicket2 = __assign({}, exampleVoucherTicket1, { ticketTypeKey: '2', barcode: '456' });
        var voucherTicket3 = __assign({}, exampleVoucherTicket1, { ticketTypeKey: '3', barcode: barcode });
        var showtime1Tickets = [voucherTicket1, voucherTicket2, exampleStandardTicket1];
        var showtime2Tickets = [exampleStandardTicket2, exampleStandardTicket3, voucherTicket3];
        orderStoreInstance.data.order.showtimes = [
            __assign({}, exampleOrderShowtime, { tickets: showtime1Tickets }),
            __assign({}, exampleOrderShowtime, { tickets: showtime2Tickets })
        ];
        var result = getVoucherTicketsForBarcode(barcode);
        expect(result).toEqual([voucherTicket1, voucherTicket3]);
    });
});
//# sourceMappingURL=get-voucher-tickets-for-barcode.test.js.map