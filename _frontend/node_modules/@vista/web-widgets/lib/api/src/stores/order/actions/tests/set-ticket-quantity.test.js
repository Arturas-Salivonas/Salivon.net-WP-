var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { exampleOrderShowtime } from '../../../../../../example-data/order/order-showtime';
import { exampleStandardTicket1, exampleVoucherTicket1 } from '../../../../../../example-data/order/order-ticket';
import { orderStoreInstance } from '../../order-store';
import { OrderTicketCategory } from './../../../../../../types/order/order-ticket';
import { setTicketQuantity } from './../set-ticket-quantity';
describe('setTicketQuantity', function () {
    beforeEach(function () {
        orderStoreInstance.selectors.hasTicketTypeForShowtime = jest.fn().mockReturnValue(true);
    });
    afterEach(function () {
        orderStoreInstance.flush();
        jest.resetAllMocks();
    });
    it('throws an error when the showtimeId is undefined', function () {
        expect(function () { return setTicketQuantity(undefined, '', 1); }).toThrowError('Cannot set ticket quantity without a showtimeId.');
    });
    it('throws an error when the ticketTypeKey is undefined', function () {
        expect(function () { return setTicketQuantity('showtimeId', undefined, 1); }).toThrowError('Cannot set ticket quantity without a ticketTypeKey.');
    });
    it('throws an error when the quantity is NaN', function () {
        expect(function () { return setTicketQuantity('showtimeId', 'ticketTypeKey', NaN); }).toThrowError('Provided quantity NaN is invalid. Please provide a positive integer value.');
    });
    it('throws an error when the quantity is less than 0', function () {
        expect(function () { return setTicketQuantity('showtimeId', 'ticketTypeKey', -1); }).toThrowError('Provided quantity -1 is invalid. Please provide a positive integer value.');
    });
    it('throws an when the showtime does not contain the given ticket type', function () {
        orderStoreInstance.selectors.hasTicketTypeForShowtime = jest.fn().mockReturnValue(false);
        expect(function () { return setTicketQuantity('showtimeId', 'ticketTypeKey', 1); }).toThrowError('Showtime with id showtimeId has no ticket types.');
    });
    it('updates the quantity of an existing standard ticket', function () {
        var ticket = __assign({}, exampleStandardTicket1, { quantity: 3 });
        var showtime = __assign({}, exampleOrderShowtime, { tickets: [ticket] });
        orderStoreInstance.data.order.showtimes = [showtime];
        setTicketQuantity(showtime.showtimeId, ticket.ticketTypeKey, 1);
        expect(orderStoreInstance.data.order.showtimes[0].tickets.length).toEqual(1);
        expect(orderStoreInstance.data.order.showtimes[0].tickets[0].quantity).toEqual(1);
    });
    it('adds a standard ticket with a given quantity', function () {
        var showtime = __assign({}, exampleOrderShowtime, { tickets: [] });
        orderStoreInstance.data.order.showtimes = [showtime];
        setTicketQuantity(showtime.showtimeId, 'ticketTypeKey', 1);
        expect(orderStoreInstance.data.order.showtimes[0].tickets[0]).toEqual({
            category: OrderTicketCategory.Standard,
            quantity: 1,
            ticketTypeKey: 'ticketTypeKey'
        });
    });
    it('updates the quantity of an existing voucher ticket', function () {
        var ticket = __assign({}, exampleVoucherTicket1, { quantity: 3 });
        var showtime = __assign({}, exampleOrderShowtime, { tickets: [ticket] });
        orderStoreInstance.data.order.showtimes = [showtime];
        setTicketQuantity(showtime.showtimeId, ticket.ticketTypeKey, 1, ticket.barcode);
        expect(orderStoreInstance.data.order.showtimes[0].tickets.length).toEqual(1);
        expect(orderStoreInstance.data.order.showtimes[0].tickets[0].quantity).toEqual(1);
    });
    it('adds a voucher ticket with a given quantity', function () {
        var showtime = __assign({}, exampleOrderShowtime, { tickets: [] });
        orderStoreInstance.data.order.showtimes = [showtime];
        setTicketQuantity(showtime.showtimeId, 'ticketTypeKey', 1, 'barcode');
        expect(orderStoreInstance.data.order.showtimes[0].tickets[0]).toEqual({
            category: OrderTicketCategory.Voucher,
            quantity: 1,
            ticketTypeKey: 'ticketTypeKey',
            barcode: 'barcode'
        });
    });
});
//# sourceMappingURL=set-ticket-quantity.test.js.map