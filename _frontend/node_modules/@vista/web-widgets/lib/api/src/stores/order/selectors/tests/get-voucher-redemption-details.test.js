var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { exampleOrderShowtime } from '../../../../../../example-data/order/order-showtime';
import { exampleVoucherTicket1 } from '../../../../../../example-data/order/order-ticket';
import { getVoucherRedemptionDetails } from '../get-voucher-redemption-details';
import { exampleVoucherMultiUse, exampleVoucherSingleUse } from './../../../../../../example-data/vouchers';
import { orderStoreInstance } from './../../order-store';
describe('getVoucherRedemptionDetails', function () {
    beforeEach(function () {
        orderStoreInstance.flush();
    });
    it('throws an error when the voucher does not exist in the order', function () {
        orderStoreInstance.data.order.vouchers = {};
        expect(function () { return getVoucherRedemptionDetails('123'); }).toThrow();
    });
    it('returns the details of an unused single-use voucher', function () {
        var _a;
        orderStoreInstance.data.order.vouchers = (_a = {},
            _a[exampleVoucherSingleUse.barcode] = exampleVoucherSingleUse,
            _a);
        var result = getVoucherRedemptionDetails(exampleVoucherSingleUse.barcode);
        expect(result).toEqual({ max: 1, used: 0, remaining: 1 });
    });
    it('returns the details of a used single-use voucher', function () {
        var _a;
        orderStoreInstance.data.order.vouchers = (_a = {},
            _a[exampleVoucherSingleUse.barcode] = exampleVoucherSingleUse,
            _a);
        var showtime = __assign({}, exampleOrderShowtime, { tickets: [
                __assign({}, exampleVoucherTicket1, { quantity: 1, barcode: exampleVoucherSingleUse.barcode })
            ] });
        orderStoreInstance.data.order.showtimes = [showtime];
        var result = getVoucherRedemptionDetails(exampleVoucherSingleUse.barcode);
        expect(result).toEqual({ max: 1, used: 1, remaining: 0 });
    });
    it('returns the details of an unused multi-use voucher', function () {
        var _a;
        var maxRedemptions = exampleVoucherMultiUse.ticketRedemptions.remainingRedemptions;
        orderStoreInstance.data.order.vouchers = (_a = {},
            _a[exampleVoucherMultiUse.barcode] = exampleVoucherMultiUse,
            _a);
        var result = getVoucherRedemptionDetails(exampleVoucherMultiUse.barcode);
        expect(result).toEqual({ max: maxRedemptions, used: 0, remaining: maxRedemptions });
    });
    it('returns the details of a partially used multi-use voucher', function () {
        var _a;
        var voucher = __assign({}, exampleVoucherMultiUse, { ticketRedemptions: {
                remainingRedemptions: 2,
                ticketTypes: []
            } });
        orderStoreInstance.data.order.vouchers = (_a = {},
            _a[voucher.barcode] = voucher,
            _a);
        var showtime = __assign({}, exampleOrderShowtime, { tickets: [
                __assign({}, exampleVoucherTicket1, { quantity: 1, barcode: voucher.barcode })
            ] });
        orderStoreInstance.data.order.showtimes = [showtime];
        var result = getVoucherRedemptionDetails(voucher.barcode);
        expect(result).toEqual({ max: 2, used: 1, remaining: 1 });
    });
    it('returns the details of a fully used multi-use voucher', function () {
        var _a;
        var voucher = __assign({}, exampleVoucherMultiUse, { ticketRedemptions: {
                remainingRedemptions: 2,
                ticketTypes: []
            } });
        orderStoreInstance.data.order.vouchers = (_a = {},
            _a[voucher.barcode] = voucher,
            _a);
        var showtime = __assign({}, exampleOrderShowtime, { tickets: [
                __assign({}, exampleVoucherTicket1, { quantity: 1, barcode: voucher.barcode }),
                __assign({}, exampleVoucherTicket1, { quantity: 1, barcode: voucher.barcode }),
            ] });
        orderStoreInstance.data.order.showtimes = [showtime];
        var result = getVoucherRedemptionDetails(voucher.barcode);
        expect(result).toEqual({ max: 2, used: 2, remaining: 0 });
    });
});
//# sourceMappingURL=get-voucher-redemption-details.test.js.map