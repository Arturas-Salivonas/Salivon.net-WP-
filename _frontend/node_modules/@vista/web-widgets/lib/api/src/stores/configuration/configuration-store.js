var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { defaultConfigurationStoreData } from '../../../../types/stores/configuration-store-data';
import { browserSessionServiceInstance } from '../../user/browser-session-service';
import { cacheServiceInstance } from '../../user/cache-service';
import { BaseStore } from '../base-store';
import { mapConfigurationStoreData } from './helpers/configuration-store-data-mapper';
/**
 * Class for storing configuration settings.
 */
var ConfigurationStore = /** @class */ (function (_super) {
    __extends(ConfigurationStore, _super);
    function ConfigurationStore() {
        // enforce defaults via BaseStore constructor
        return _super.call(this, 'configuration-store', browserSessionServiceInstance, cacheServiceInstance, defaultConfigurationStoreData) || this;
    }
    ConfigurationStore.prototype.setConfig = function (data) {
        _super.prototype.setData.call(this, mapConfigurationStoreData(this.data, data));
    };
    /**
     * Sets the global languageTag configuration
     * @param languageTag
     */
    ConfigurationStore.prototype.setLanguageTag = function (languageTag) {
        this.setConfig({
            localisation: { languageTag: languageTag }
        });
    };
    return ConfigurationStore;
}(BaseStore));
export { ConfigurationStore };
export var configurationStoreInstance = new ConfigurationStore();
//# sourceMappingURL=configuration-store.js.map