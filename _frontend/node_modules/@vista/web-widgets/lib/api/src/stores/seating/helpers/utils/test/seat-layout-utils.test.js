import { getSeatLayoutAutoAllocationStatus } from '../seat-layout-utils';
describe('getSeatLayoutAutoAllocationStatus', function () {
    it('returns autoAllocated as true with the auto allocated seats when all area categories do not have any seats left to allocate', function () {
        var seatLayout = {
            areaCategories: [
                {
                    seatsToAllocate: 1,
                    seatsAllocatedCount: 1,
                    seatsNotAllocatedCount: 0,
                    selectedSeats: [{ areaNumber: 1, rowIndex: 0, columnIndex: 0 }]
                },
                {
                    seatsToAllocate: 1,
                    seatsAllocatedCount: 1,
                    seatsNotAllocatedCount: 0,
                    selectedSeats: [{ areaNumber: 2, rowIndex: 0, columnIndex: 0 }]
                },
                {
                    seatsToAllocate: 0,
                    seatsAllocatedCount: 0,
                    seatsNotAllocatedCount: 0,
                    selectedSeats: []
                }
            ],
            areas: [
                {
                    number: 1,
                    rows: [{
                            rowIndex: 0,
                            seats: [{ position: { areaNumber: 1, rowIndex: 0, columnIndex: 0 } }]
                        }]
                },
                {
                    number: 2,
                    rows: [{
                            rowIndex: 0,
                            seats: [{ position: { areaNumber: 2, rowIndex: 0, columnIndex: 0 } }]
                        }]
                }
            ]
        };
        var expected = {
            autoAllocated: true,
            seatPositions: [
                { areaNumber: 1, rowIndex: 0, columnIndex: 0 },
                { areaNumber: 2, rowIndex: 0, columnIndex: 0 }
            ]
        };
        expect(getSeatLayoutAutoAllocationStatus(seatLayout)).toEqual(expected);
    });
    it('returns autoAllocated as false when any area categories have seats left to allocate', function () {
        var seatLayout = {
            areaCategories: [
                {
                    seatsToAllocate: 1,
                    seatsAllocatedCount: 0,
                    seatsNotAllocatedCount: 1,
                    selectedSeats: []
                }
            ]
        };
        var expected = {
            autoAllocated: false
        };
        expect(getSeatLayoutAutoAllocationStatus(seatLayout)).toEqual(expected);
    });
    it('returns autoAllocated as false when no area categories require allocated seats', function () {
        var seatLayout = {
            areaCategories: [
                {
                    seatsToAllocate: 0,
                    seatsAllocatedCount: 0,
                    seatsNotAllocatedCount: 0,
                    selectedSeats: []
                }
            ]
        };
        var expected = {
            autoAllocated: false
        };
        expect(getSeatLayoutAutoAllocationStatus(seatLayout)).toEqual(expected);
    });
});
//# sourceMappingURL=seat-layout-utils.test.js.map