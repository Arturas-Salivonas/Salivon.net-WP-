import { AreaCategory } from '../../../../../../types/seating/area-category';
import { Seat } from '../../../../../../types/seating/seat';
import { SeatLayout } from '../../../../../../types/seating/seat-layout';
import { SeatSelectionRule } from '../rules/seat-selection-rule';
import { SeatSelectionHandler } from '../types';
import { SeatSelectionValidationResult } from './../seat-selection-validation';
/**
 * Allows the user to select new seats without having to manually deselect any currently selected seats.
 * If all seats have been selected, this handler will automatically deselect the first selected seat
 * before selecting the new seat.
 *
 * @export
 * @class PopFirstSelectedSeatHandler
 * @implements {SeatSelectionHandler}
 */
export declare class PopFirstSelectedSeatHandler implements SeatSelectionHandler {
    private rules;
    private isSeatFirstOrdering;
    private maximumTicketsAllowedInAnOrder;
    private seatLayoutStateManager;
    private selectedSeatsQueueManager;
    constructor(rules: SeatSelectionRule[], isSeatFirstOrdering: boolean, maximumTicketsAllowedInAnOrder: number);
    /**
     * Sets the seat layout to use.
     */
    setSeatLayout(seatLayout: SeatLayout): void;
    /**
     * Selects a seat within the seat layout.
     *
     * If the seat selection is valid, this function will update the seat layout directly and return true.
     * Otherwise, this function will return a list of seat selection rules that have been violated.
     * @param seat The seat to be selected.
     */
    selectSeat(seat: Seat): SeatSelectionValidationResult;
    /**
     * Deselects a seat within the seat layout.
     * @param seat The seat to be deselected.
     */
    deselectSeat(seat: Seat, areaCategory: AreaCategory): void;
    /**
     * Validates the current seat selections against all seating rules.
     * @returns {SeatSelectionValidationResult}
     */
    validateSelection(): SeatSelectionValidationResult;
    /**
     * Validates a seat selection against the rules that prevent a seat selection when violated.
     * @private
     * @returns {SeatSelectionValidationResult}
     */
    private getSeatSelectionValidationResult;
}
