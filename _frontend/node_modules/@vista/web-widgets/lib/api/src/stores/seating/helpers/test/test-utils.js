import { flattenArray } from '../../../../utils/array-utils';
import { SeatLayoutBuilder } from './seat-layout-builder';
export var getSeat = function (rowLabel, seatLabel, seatLayout) {
    /**
     * In some tests, this is used on a mobx observable seat layout.
     * Inner arrays are .sliced to shallow copy into a JS Array type while keeping the elements as observables
     */
    return seatLayout.areas
        .map(function (a) { return a.rows.slice(); })
        .reduce(flattenArray, [])
        .filter(function (r) { return r.rowLabel === rowLabel; })
        .map(function (a) { return a.seats.slice(); })
        .reduce(flattenArray, [])
        .find(function (s) { return s.seatLabel === seatLabel; });
};
export var selectSeat = function (rowLabel, seatLabel, seatLayoutStateManager) {
    var seat = getSeat(rowLabel, seatLabel, seatLayoutStateManager.seatLayout);
    if (!seat)
        throw new Error("Cant find seat " + rowLabel + "-" + seatLabel);
    seatLayoutStateManager.selectSeat(seat);
};
/**
 * Creates a single row seat layout with 'A' as the rows label
 * @param rowBuilderFn
 */
export var createSingleRowSeatLayout = function (rowBuilderFn) {
    return new SeatLayoutBuilder()
        .addAreaCategory(function (areaCat) { return areaCat
        .addArea(function (area) { return area
        .setDescription('Standard')
        .addRow('A', rowBuilderFn); }); })
        .create();
};
//# sourceMappingURL=test-utils.js.map