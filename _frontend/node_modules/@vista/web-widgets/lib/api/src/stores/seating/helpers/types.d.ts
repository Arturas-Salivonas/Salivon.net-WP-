import { AreaCategory } from '../../../../../types/seating/area-category';
import { Seat } from '../../../../../types/seating/seat';
import { SeatLayout } from '../../../../../types/seating/seat-layout';
import { SeatSelectionRuleName } from './rules/seat-selection-rule';
import { SeatSelectionValidationResult } from './seat-selection-validation';
export declare enum SeatingErrorCategory {
    ApiError = 0,
    RuleViolation = 1
}
export interface BaseSeatingError {
    category: SeatingErrorCategory;
}
export interface SeatSelectionRuleViolation extends BaseSeatingError {
    category: SeatingErrorCategory.RuleViolation;
    ruleName: SeatSelectionRuleName;
}
export interface SeatingApiError extends BaseSeatingError {
    category: SeatingErrorCategory.ApiError;
    errorCode: number;
}
export declare type SeatingError = SeatSelectionRuleViolation | SeatingApiError;
export declare const isSeatingApiError: (error: SeatSelectionRuleViolation | SeatingApiError) => error is SeatingApiError;
export interface SeatSelectionHandler {
    setSeatLayout(seatLayout: SeatLayout): void;
    selectSeat(seat: Seat, areaCategory: AreaCategory): SeatSelectionValidationResult;
    deselectSeat(seat: Seat, areaCategory: AreaCategory): void;
    validateSelection(): SeatSelectionValidationResult;
}
