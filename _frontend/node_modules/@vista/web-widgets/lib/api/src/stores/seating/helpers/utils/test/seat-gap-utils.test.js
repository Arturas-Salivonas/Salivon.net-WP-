import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { createSingleRowSeatLayout, getSeat } from '../../test/test-utils';
import { contiguousSeatBlockHasSingleAvailableSeat, Direction, getSeatsUntil, getSeatTwoSpacesAway, seatOneSpaceAwayIsAvailable } from '../seat-gap-utils';
import { seatIsUnavailable } from '../seat-utils';
/**
 * Note that due to inversion of the seating layout, .addSeat adds seats starting from the right
 */
describe('seatGapUtils', function () {
    describe('seatOneSpaceAwayIsAvailable', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row
            .addSeat({ seatLabel: '1', availability: SeatAvailability.Available })
            .addSeat({ seatLabel: '2', availability: SeatAvailability.Selected })
            .addSeat({ seatLabel: '3', availability: SeatAvailability.Sold })
            .addSeat({ seatLabel: '4', availability: SeatAvailability.Selected })
            .addSeat({ seatLabel: '5', availability: SeatAvailability.Available }); });
        it("returns true when left seat is available", function () {
            var selectedSeat = getSeat('A', '4', seatLayout);
            expect(seatOneSpaceAwayIsAvailable(selectedSeat, seatLayout, Direction.Left)).toBe(true);
        });
        it("returns false when left seat is not available", function () {
            var selectedSeat = getSeat('A', '2', seatLayout);
            expect(seatOneSpaceAwayIsAvailable(selectedSeat, seatLayout, Direction.Left)).toBe(false);
        });
        it("returns true when right seat is available", function () {
            var selectedSeat = getSeat('A', '2', seatLayout);
            expect(seatOneSpaceAwayIsAvailable(selectedSeat, seatLayout, Direction.Right)).toBe(true);
        });
        it("returns false when right seat is not available", function () {
            var selectedSeat = getSeat('A', '4', seatLayout);
            expect(seatOneSpaceAwayIsAvailable(selectedSeat, seatLayout, Direction.Right)).toBe(false);
        });
    });
    describe('getSeatTwoSpacesAway', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row
            .addSeat({ seatLabel: '1', availability: SeatAvailability.Available })
            .addSeat({ seatLabel: '2', availability: SeatAvailability.Available })
            .addSeat({ seatLabel: '3', availability: SeatAvailability.Available }); });
        it('can return seat two spaces away to the left', function () {
            var seat = getSeat('A', '1', seatLayout);
            var seatTwoSpacesAwayToTheLeft = getSeat('A', '3', seatLayout);
            expect(getSeatTwoSpacesAway(seat, seatLayout, Direction.Left)).toEqual(seatTwoSpacesAwayToTheLeft);
        });
        it('returns true when seat two away to the right matches function', function () {
            var seat = getSeat('A', '3', seatLayout);
            var seatTwoSpacesAwayToTheRight = getSeat('A', '1', seatLayout);
            expect(getSeatTwoSpacesAway(seat, seatLayout, Direction.Right)).toEqual(seatTwoSpacesAwayToTheRight);
        });
    });
    describe('contiguousSeatBlockHasSingleAvailableSeat', function () {
        it('returns true when contiguous seat block has single available seat', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSeat({ seatLabel: '1', availability: SeatAvailability.Available })
                .addAisle()
                .addSeat({ seatLabel: '2', availability: SeatAvailability.Sold })
                .addSeat({ seatLabel: '3', availability: SeatAvailability.Available })
                .addSeat({ seatLabel: '4', availability: SeatAvailability.Selected })
                .addAisle()
                .addSeat({ seatLabel: '5', availability: SeatAvailability.Available }); });
            var seatsInBlock = [
                getSeat('A', '2', seatLayout),
                getSeat('A', '3', seatLayout),
                getSeat('A', '4', seatLayout)
            ];
            seatsInBlock.forEach(function (seat) { return expect(contiguousSeatBlockHasSingleAvailableSeat(seat, seatLayout)).toBe(true); });
        });
        it('returns false when contiguous seat block has multiple available seats', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSeat({ seatLabel: '1', availability: SeatAvailability.Available })
                .addAisle()
                .addSeat({ seatLabel: '2', availability: SeatAvailability.Available })
                .addSeat({ seatLabel: '3', availability: SeatAvailability.Available })
                .addSeat({ seatLabel: '4', availability: SeatAvailability.Selected })
                .addAisle()
                .addSeat({ seatLabel: '5', availability: SeatAvailability.Available }); });
            var seatsInBlock = [
                getSeat('A', '2', seatLayout),
                getSeat('A', '3', seatLayout),
                getSeat('A', '4', seatLayout)
            ];
            seatsInBlock.forEach(function (seat) { return expect(contiguousSeatBlockHasSingleAvailableSeat(seat, seatLayout)).toBe(false); });
        });
        it('returns false when contiguous seat block has no available seats', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSeat({ seatLabel: '1', availability: SeatAvailability.Available })
                .addAisle()
                .addSeat({ seatLabel: '2', availability: SeatAvailability.Sold })
                .addSeat({ seatLabel: '3', availability: SeatAvailability.Sold })
                .addSeat({ seatLabel: '4', availability: SeatAvailability.Selected })
                .addAisle()
                .addSeat({ seatLabel: '5', availability: SeatAvailability.Available }); });
            var seatsInBlock = [
                getSeat('A', '2', seatLayout),
                getSeat('A', '3', seatLayout),
                getSeat('A', '4', seatLayout)
            ];
            seatsInBlock.forEach(function (seat) { return expect(contiguousSeatBlockHasSingleAvailableSeat(seat, seatLayout)).toBe(false); });
        });
    });
    describe('getSeatsUntil', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row
            .addSeat({ seatLabel: '1', availability: SeatAvailability.Available })
            .addSeat({ seatLabel: '2', availability: SeatAvailability.Selected })
            .addSeat({ seatLabel: '3', availability: SeatAvailability.Available })
            .addSeat({ seatLabel: '4', availability: SeatAvailability.Sold })
            .addSeat({ seatLabel: '5', availability: SeatAvailability.Available }); });
        it('can get seats until aisle', function () {
            var selectedSeat = getSeat('A', '2', seatLayout);
            var expectedSeats = [
                getSeat('A', '3', seatLayout),
                getSeat('A', '4', seatLayout),
                getSeat('A', '5', seatLayout)
            ];
            expect(getSeatsUntil(selectedSeat, seatLayout, Direction.Left, function (seat) { return seat === undefined; })).toEqual(expectedSeats);
        });
        it('can get seats until sold seat', function () {
            var selectedSeat = getSeat('A', '2', seatLayout);
            var expectedSeats = [
                getSeat('A', '3', seatLayout),
            ];
            expect(getSeatsUntil(selectedSeat, seatLayout, Direction.Left, function (seat) { return !!(seat && seatIsUnavailable(seat)); })).toEqual(expectedSeats);
        });
    });
});
//# sourceMappingURL=seat-gap-utils.test.js.map