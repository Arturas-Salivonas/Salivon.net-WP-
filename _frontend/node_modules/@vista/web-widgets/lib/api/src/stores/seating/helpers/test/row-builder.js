var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { SeatAvailability } from '../../../../../../types/seating/seat-availability';
import { SeatType } from '../../../../../../types/seating/seat-type';
var getSofaGroupTypeFromIndex = function (index, groupLength) {
    switch (index) {
        case 0:
            return SeatType.SofaRight;
        case groupLength:
            return SeatType.SofaLeft;
        default:
            return SeatType.SofaMiddle;
    }
};
var RowBuilder = /** @class */ (function () {
    function RowBuilder(areaCategory, area, row) {
        this.areaCategory = areaCategory;
        this.area = area;
        this.row = row;
    }
    RowBuilder.prototype.addSeat = function (seatProps) {
        this.addSeatToLayout(seatProps);
        return this;
    };
    RowBuilder.prototype.addSofa = function (seatsInGroup) {
        var _this = this;
        var seatsAdded = seatsInGroup.map(function (seatInGroup, i) {
            var seatProps = __assign({}, seatInGroup, { type: getSofaGroupTypeFromIndex(i, seatsInGroup.length) });
            return _this.addSeatToLayout(seatProps);
        });
        var seatGroupPositions = seatsAdded.map(function (s) { return s.position; });
        seatsAdded.forEach(function (seatInGroup) {
            seatInGroup.seatsInGroup = seatGroupPositions;
        });
        return this;
    };
    RowBuilder.prototype.addWheelchair = function (seatProps) {
        var _this = this;
        var wheelchairSeat = this.addSeatToLayout(__assign({}, seatProps.wheelchairSeat, { type: SeatType.Wheelchair }));
        if (seatProps.companionSeats !== undefined) {
            var companionSeats = seatProps.companionSeats.map(function (props) { return _this.addSeatToLayout(__assign({}, props, { type: SeatType.Companion })); });
            var seatsInGroup_1 = [wheelchairSeat.position].concat(companionSeats.map(function (seat) { return seat.position; }));
            wheelchairSeat.seatsInGroup = seatsInGroup_1;
            companionSeats.forEach(function (seat) { return seat.seatsInGroup = seatsInGroup_1; });
        }
        return this;
    };
    RowBuilder.prototype.addAisle = function () {
        this.area.columnCount++;
        return this;
    };
    RowBuilder.prototype.addSeatToLayout = function (seatProps) {
        this.area.columnCount++;
        var seat = __assign({ position: {
                areaNumber: this.area.number,
                rowIndex: this.area.rowCount - 1,
                columnIndex: this.area.columnCount - 1
            }, areaCategoryCode: this.areaCategory.areaCategoryCode, type: SeatType.Normal }, seatProps);
        this.row.seats.push(seat);
        if (seat.availability === SeatAvailability.Selected) {
            this.areaCategory.selectedSeats.push(seat.position);
            this.areaCategory.seatsAllocatedCount++;
            this.areaCategory.seatsToAllocate++;
        }
        return seat;
    };
    return RowBuilder;
}());
export { RowBuilder };
//# sourceMappingURL=row-builder.js.map