import { IReactionDisposer } from 'mobx';
import { Seat } from '../../../../types/seating/seat';
import { SeatLayout } from '../../../../types/seating/seat-layout';
import { SeatPosition } from '../../../../types/seating/seat-position';
import { SeatingStoreData } from '../../../../types/stores/seating-store-data';
import { ConfigurableBaseStore } from '../configurable-base-store';
import { SeatingError, SeatSelectionHandler } from '../seating/helpers/types';
/**
 * Configurable options for seating store
 */
export interface SeatingOptions {
    /**
     * selectSeat action handler, allows for different strategies to be assigned
     * defaults to {@link PopFirstSelectedSeatHandler}
     */
    selectSeatHandler: SeatSelectionHandler;
}
/**
 * Seating Store class
 */
export declare class SeatingStore extends ConfigurableBaseStore<SeatingStoreData, SeatingOptions> {
    constructor(defaultOptions?: SeatingOptions);
    /**
     * Sets the store data and updates the seat layout data of the select seat handler
     *
     * @param {SeatingStoreData} data Data to set
     */
    setData(data: Partial<SeatingStoreData>): void;
    /**
     * Sets the seat layout data
     * @param data The seat layout data
     */
    setSeatLayout(seatLayout: SeatLayout): void;
    /**
     * Sets the seating options
     * @param options the options to use for seating
     */
    setOptions(options: SeatingOptions): void;
    /**
     * provide callback to trigger when selected seats changed
     *
     * Example:
     * ```
     * const disposer = seatingStore.onSelectedSeatsChanged((selectedSeats) => { })
     * // will console log selected seats data
     * disposer();
     * // will unsubscribe from being notified when the seat collection changes
     * ```
     * @param callback
     */
    onSelectedSeatsChanged(callback: (selectedSeats: Seat[]) => void): IReactionDisposer;
    /**
     * Responds to a seat clicked events.
     * @param {Seat} seat
     */
    seatClicked(seat: Seat): void;
    /**
     * Selects a given seat within the seat layout.
     * @param seat the seat to be selected.
     */
    selectSeat(seat: Seat): void;
    /**
     * Deselects a given seat within the seat layout.
     * @param seat the seat to be deselected.
     */
    deselectSeat(seat: Seat): void;
    /**
     * Returns whether the current seat selection is valid or not.
     * Should be called prior to saving the seats in the backend.
     */
    validateSelection: () => boolean;
    /**
     * Set validation error messages
     */
    setErrorMessages(errorMessages: SeatingError[]): void;
    /**
     * Clear all validation error messages
     */
    clearErrorMessages: () => void;
    /**
     * Returns true if seat layout data exists
     */
    readonly hasSeatLayoutData: boolean;
    /**
     * Returns the currently selected seats.
     * @returns {Seat[]}
     */
    readonly selectedSeats: Seat[];
    /**
     * Sets the selected seats to an array of given seat positions.
     * @param seatPositions the positions of the new selected seats.
     */
    setSelectedSeats(seatPositions: SeatPosition[]): void;
    private updateSeatLayoutWithFriendSeats;
}
export declare const seatingStoreInstance: SeatingStore;
