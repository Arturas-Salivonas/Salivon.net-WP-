import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { createSingleRowSeatLayout, selectSeat } from '../../test/test-utils';
import { SeatLayoutStateManager } from '../../utils/seat-layout-state-manager';
import { cannotSelectUnavailableSeatsRule } from '../cannot-select-unavailable-seats-rule';
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
var defaultRule = cannotSelectUnavailableSeatsRule();
describe('cannotSelectUnavailableSeatsRule', function () {
    it('cannot select a sold seat', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row.addSeat({ availability: SeatAvailability.Sold, seatLabel: '1' }); });
        var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
        selectSeat('A', '1', seatLayoutStateManager);
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
    it('can select an empty seat', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row.addSeat({ availability: SeatAvailability.Available, seatLabel: '1' }); });
        var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
        selectSeat('A', '1', seatLayoutStateManager);
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('can select a selected seat', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row.addSeat({ availability: SeatAvailability.Selected, seatLabel: '1' }); });
        var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
        selectSeat('A', '1', seatLayoutStateManager);
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
});
//# sourceMappingURL=cannot-select-unavailable-seats-rule.test.js.map