import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { getSeat } from '../../test/test-utils';
import { PopFirstSelectedSeatHandler } from '../pop-first-selected-seat-handler';
import { TestFixture } from './test-fixture';
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
describe('PopFirstSelectedSeatHandler', function () {
    var testFixture;
    beforeEach(function () {
        testFixture = new TestFixture();
    });
    describe('selectSeat', function () {
        it('returns a valid result when all rules have passed', function () {
            var successRule = testFixture.successRule;
            var handler = new PopFirstSelectedSeatHandler([successRule, successRule], isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            handler.setSeatLayout(testFixture.defaultSeatLayout);
            var valid = handler.selectSeat(testFixture.availableSeat).valid;
            expect(valid).toEqual(true);
            expect(testFixture.successRuleSpy).toHaveBeenCalledTimes(2);
        });
        it('returns a valid result when only violations are rules with preventSeatSelection=false', function () {
            var handler = new PopFirstSelectedSeatHandler([testFixture.successRule, testFixture.failureAllowSeatSelectionRule], isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            handler.setSeatLayout(testFixture.defaultSeatLayout);
            var _a = handler.selectSeat(testFixture.availableSeat), valid = _a.valid, ruleViolations = _a.ruleViolations;
            expect(valid).toEqual(true);
            expect(ruleViolations).toMatchObject([]);
        });
        it('returns an invalid result when a preventSeatSelection=true rule is violated', function () {
            var handler = new PopFirstSelectedSeatHandler([
                testFixture.successRule,
                testFixture.failurePreventSeatSelectionRule,
                testFixture.failureAllowSeatSelectionRule
            ], isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            handler.setSeatLayout(testFixture.defaultSeatLayout);
            var _a = handler.selectSeat(testFixture.availableSeat), valid = _a.valid, ruleViolations = _a.ruleViolations;
            expect(valid).toEqual(false);
            expect(ruleViolations).toMatchObject([testFixture.failurePreventSeatSelectionRuleResult]);
        });
        it('selects an available seat', function () {
            var handler = testFixture.defaultSeatHandler;
            handler.setSeatLayout(testFixture.defaultSeatLayout);
            var availableSeat = testFixture.availableSeat;
            var areaCategory = testFixture.defaultSeatLayout.areaCategories[0];
            areaCategory.seatsToAllocate = 2;
            areaCategory.seatsNotAllocatedCount = 1;
            var valid = handler.selectSeat(availableSeat).valid;
            expect(valid).toEqual(true);
            expect(availableSeat.availability).toEqual(SeatAvailability.Selected);
            expect(areaCategory.seatsAllocatedCount).toEqual(2);
            expect(areaCategory.seatsNotAllocatedCount).toEqual(0);
        });
        it('pops the first selected seat in the same area category when all seats have already been selected', function () {
            var seatLayout = new SeatLayoutBuilder()
                .addAreaCategory(function (areaCat) {
                areaCat.addArea(function (area) { return area
                    .addRow('A', function (row) {
                    row
                        .addSeat({ availability: SeatAvailability.Available, seatLabel: '1' })
                        .addSeat({ availability: SeatAvailability.Selected, seatLabel: '2' });
                }); });
            })
                .addAreaCategory(function (areaCat) {
                areaCat.addArea(function (area) { return area
                    .addRow('B', function (row) {
                    row
                        .addSeat({ availability: SeatAvailability.Available, seatLabel: '1' })
                        .addSeat({ availability: SeatAvailability.Selected, seatLabel: '2' });
                }); });
            })
                .create();
            var availableSeatA = getSeat('A', '1', seatLayout);
            var selectedSeatA = getSeat('A', '2', seatLayout);
            var availableSeatB = getSeat('B', '1', seatLayout);
            var selectedSeatB = getSeat('B', '2', seatLayout);
            var handler = testFixture.defaultSeatHandler;
            handler.setSeatLayout(seatLayout);
            var validA = handler.selectSeat(availableSeatA).valid;
            expect(validA).toEqual(true);
            expect(availableSeatA.availability).toEqual(SeatAvailability.Selected);
            expect(selectedSeatA.availability).toEqual(SeatAvailability.Available);
            expect(availableSeatB.availability).toEqual(SeatAvailability.Available);
            expect(selectedSeatB.availability).toEqual(SeatAvailability.Selected);
            var validB = handler.selectSeat(availableSeatB).valid;
            expect(validB).toEqual(true);
            expect(availableSeatA.availability).toEqual(SeatAvailability.Selected);
            expect(selectedSeatA.availability).toEqual(SeatAvailability.Available);
            expect(availableSeatB.availability).toEqual(SeatAvailability.Selected);
            expect(selectedSeatB.availability).toEqual(SeatAvailability.Available);
        });
    });
    describe('deselectSeat', function () {
        it('deselects a selected seat', function () {
            var handler = testFixture.defaultSeatHandler;
            handler.setSeatLayout(testFixture.defaultSeatLayout);
            var selectedSeat = testFixture.selectedSeat;
            var areaCategory = testFixture.defaultSeatLayout.areaCategories[0];
            handler.deselectSeat(selectedSeat, testFixture.areaCategory);
            expect(selectedSeat.availability).toEqual(SeatAvailability.Available);
            expect(areaCategory.seatsAllocatedCount).toEqual(0);
            expect(areaCategory.seatsNotAllocatedCount).toEqual(1);
        });
    });
    describe('validateSelection', function () {
        it('returns a valid result when there are no validation errors', function () {
            var handler = new PopFirstSelectedSeatHandler([testFixture.successRule], isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            handler.setSeatLayout(testFixture.defaultSeatLayout);
            handler.selectSeat(testFixture.availableSeat);
            var validationResult = handler.validateSelection();
            expect(validationResult.valid).toEqual(true);
            expect(validationResult.ruleViolations).toMatchObject([]);
        });
        it('returns an invalid result when there are some validation errors', function () {
            var handler = new PopFirstSelectedSeatHandler([testFixture.successRule, testFixture.failureAllowSeatSelectionRule], false, 10);
            handler.setSeatLayout(testFixture.defaultSeatLayout);
            handler.selectSeat(testFixture.availableSeat);
            var validationResult = handler.validateSelection();
            expect(validationResult.valid).toEqual(false);
            expect(validationResult.ruleViolations).toMatchObject([testFixture.failureAllowSeatSelectionRuleResult]);
        });
    });
});
//# sourceMappingURL=pop-first-selected-seat-handler.test.js.map