import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { SeatLayoutStateManager } from '../../utils/seat-layout-state-manager';
import { mustSelectAtLeastOneSeatRule } from '../must-select-at-leat-one-seat-rule';
var isSeatFirstOrdering = true;
var maximumTicketsAllowedInAnOrder = 10;
var defaultRule = mustSelectAtLeastOneSeatRule();
describe('mustSelectAtLeastOneSeatRule', function () {
    it('is valid if at least one seat has been selected', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSeat({ availability: SeatAvailability.Available });
            }); });
        })
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('B', function (row) {
                row.addSeat({ availability: SeatAvailability.Selected });
            }); });
            areaCat.setTotalSeatsToSelect(1);
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('returns a failure state if no seat has been selected', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSeat({ availability: SeatAvailability.Available });
            }); });
        })
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('B', function (row) {
                row.addSeat({ availability: SeatAvailability.Available });
            }); });
            areaCat.setTotalSeatsToSelect(1);
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
});
//# sourceMappingURL=must-select-at-leat-one-seat-rule.test.js.map