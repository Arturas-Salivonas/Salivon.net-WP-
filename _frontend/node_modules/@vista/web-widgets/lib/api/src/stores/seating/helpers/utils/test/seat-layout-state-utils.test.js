import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { createSingleRowSeatLayout, getSeat } from '../../test/test-utils';
import { SeatLayoutStateManager } from '../seat-layout-state-manager';
import { getCurrentSeatState, hasAvailableSeatsInGroup, hasAvailableWheelchairSeatInGroup } from '../seat-layout-state-utils';
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
describe('seat-layout-state-utils', function () {
    describe('hasAvailableSeatsInGroup', function () {
        it('is true when sofa has one selected seat, one available seat', function () {
            var seatLayout = new SeatLayoutBuilder()
                .addAreaCategory(function (areaCat) {
                areaCat.addArea(function (area) { return area
                    .addRow('A', function (row) {
                    row.addSofa([
                        { availability: SeatAvailability.Available, seatLabel: '1' },
                        { availability: SeatAvailability.Selected, seatLabel: '2' }
                    ]);
                }); });
            })
                .create();
            var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            var sofaSeats = [
                getSeat('A', '1', seatLayout),
                getSeat('A', '2', seatLayout)
            ];
            var results = sofaSeats.map(function (s) { return hasAvailableSeatsInGroup(s, seatLayoutStateManager); });
            results.forEach(function (result) {
                return expect(result).toBe(true);
            });
        });
        it('is true when sofa has all seats available', function () {
            var seatLayout = new SeatLayoutBuilder()
                .addAreaCategory(function (areaCat) {
                areaCat.addArea(function (area) { return area
                    .addRow('A', function (row) {
                    row.addSofa([
                        { availability: SeatAvailability.Available, seatLabel: '1' },
                        { availability: SeatAvailability.Available, seatLabel: '2' }
                    ]);
                }); });
            })
                .create();
            var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            var sofaSeats = [
                getSeat('A', '1', seatLayout),
                getSeat('A', '2', seatLayout)
            ];
            var results = sofaSeats.map(function (s) { return hasAvailableSeatsInGroup(s, seatLayoutStateManager); });
            results.forEach(function (result) {
                return expect(result).toBe(true);
            });
        });
        it('is false when sofa has one selected seat, one sold seat', function () {
            var seatLayout = new SeatLayoutBuilder()
                .addAreaCategory(function (areaCat) {
                areaCat.addArea(function (area) { return area
                    .addRow('A', function (row) {
                    row.addSofa([
                        { availability: SeatAvailability.Selected, seatLabel: '1' },
                        { availability: SeatAvailability.Sold, seatLabel: '2' }
                    ]);
                }); });
            })
                .create();
            var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            var sofaSeats = [
                getSeat('A', '1', seatLayout),
                getSeat('A', '2', seatLayout)
            ];
            var results = sofaSeats.map(function (s) { return hasAvailableSeatsInGroup(s, seatLayoutStateManager); });
            results.forEach(function (result) {
                return expect(result).toBe(false);
            });
        });
        it('is false when sofa has all seats selected', function () {
            var seatLayout = new SeatLayoutBuilder()
                .addAreaCategory(function (areaCat) {
                areaCat.addArea(function (area) { return area
                    .addRow('A', function (row) {
                    row.addSofa([
                        { availability: SeatAvailability.Selected, seatLabel: '1' },
                        { availability: SeatAvailability.Selected, seatLabel: '2' }
                    ]);
                }); });
            })
                .create();
            var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            var sofaSeats = [
                getSeat('A', '1', seatLayout),
                getSeat('A', '2', seatLayout)
            ];
            var results = sofaSeats.map(function (s) { return hasAvailableSeatsInGroup(s, seatLayoutStateManager); });
            results.forEach(function (result) {
                return expect(result).toBe(false);
            });
        });
    });
    describe('hasAvailableWheelchairSeatInGroup', function () {
        it('is true when a wheelchair seat in the group is available', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) {
                return row.addWheelchair({
                    wheelchairSeat: { availability: SeatAvailability.Available, seatLabel: '1' },
                    companionSeats: [
                        { availability: SeatAvailability.Available, seatLabel: '2' },
                        { availability: SeatAvailability.Available, seatLabel: '3' }
                    ]
                });
            });
            var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            var wheelchairGroupSeats = [
                getSeat('A', '1', seatLayout),
                getSeat('A', '2', seatLayout),
                getSeat('A', '3', seatLayout)
            ];
            var results = wheelchairGroupSeats.map(function (s) { return hasAvailableWheelchairSeatInGroup(s, seatLayoutStateManager); });
            results.forEach(function (result) {
                return expect(result).toBe(true);
            });
        });
        it('is false when there is no available wheelchair seat in the group', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) {
                return row.addWheelchair({
                    wheelchairSeat: { availability: SeatAvailability.Sold, seatLabel: '1' },
                    companionSeats: [
                        { availability: SeatAvailability.Available, seatLabel: '2' },
                        { availability: SeatAvailability.Available, seatLabel: '3' }
                    ]
                });
            });
            var seatLayoutStateManager = new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder);
            var wheelchairGroupSeats = [
                getSeat('A', '1', seatLayout),
                getSeat('A', '2', seatLayout),
                getSeat('A', '3', seatLayout)
            ];
            var results = wheelchairGroupSeats.map(function (s) { return hasAvailableWheelchairSeatInGroup(s, seatLayoutStateManager); });
            results.forEach(function (result) {
                return expect(result).toBe(false);
            });
        });
    });
    describe('getCurrentSeatState', function () {
        it('returns the seat as is when no next state exists', function () {
            var seat = {
                seatLabel: '1',
                availability: SeatAvailability.Selected
            };
            var result = getCurrentSeatState(seat);
            expect(result).toEqual(seat);
        });
        it('returns the seat with an update availablility when next state exists', function () {
            var seat = {
                seatLabel: '1',
                availability: SeatAvailability.Available,
                nextState: {
                    availability: SeatAvailability.Selected
                }
            };
            var result = getCurrentSeatState(seat);
            expect(result).toEqual({
                seatLabel: '1',
                availability: SeatAvailability.Selected
            });
        });
    });
});
//# sourceMappingURL=seat-layout-state-utils.test.js.map