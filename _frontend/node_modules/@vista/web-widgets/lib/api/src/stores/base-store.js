var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
import { action, autorun, computed, observable, toJS } from 'mobx';
import { Logger } from '../utils/logger';
/**
 * This class provides all the basic properties and methods for all other classes derived from this class.
 */
var BaseStore = /** @class */ (function () {
    /**
     * Constructor for the `BaseStore` class. Accepts optional defaults.
     *
     * @param key local storage key for persisted data
     * @param browserSessionService singleton instance of browser session service
     * @param cacheService singleton instance of cache service
     * @param defaults optional, provides defaults value for store data
     */
    function BaseStore(key, browserSessionService, cacheService, defaults) {
        this.key = key;
        this.browserSessionService = browserSessionService;
        this.cacheService = cacheService;
        this.defaults = this._data = defaults || {};
    }
    Object.defineProperty(BaseStore.prototype, "data", {
        /**
         * Store data wrapper
         * MobX runs in strict mode therefore this.data can only be mutated via @action functions
         */
        get: function () {
            return this._data;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Assigns the provided value to this.data
     *
     * @param {T} data Data to set
     */
    BaseStore.prototype.setData = function (data) {
        if (data) {
            this._data = this.mergeWithPreviousOrDefaults(data);
        }
        this.syncToCache();
    };
    /**
     * Hydrate data for current store based on its cached state inside local storage
     */
    BaseStore.prototype.hydrate = function () {
        if (!this.browserSessionService.sessionId) {
            Logger.warn("No active user session found, make sure you have invoked vista.user.startSession().");
            return;
        }
        try {
            var cachedData = this.cacheService.get(this.key);
            this._data = this.mergeWithPreviousOrDefaults(cachedData);
            this.onAfterHydrate();
        }
        catch (e) {
            Logger.warn("Cannot retrieve cached data for " + this.key + ".");
        }
    };
    /**
     * Lifecycle function that runs after a successful hydration.
     * Has no effect by default.
     */
    BaseStore.prototype.onAfterHydrate = function () { return; };
    /**
     * Flush store contents and reset to defaults, if any
     */
    BaseStore.prototype.flush = function () {
        this._data = this.defaults;
        this.syncToCache();
    };
    /**
     * Stores the _data value in cache.
     * Does nothing if no browser session exists.
     *
     * @returns {void}
     */
    BaseStore.prototype.syncToCache = function () {
        if (!this.browserSessionService.sessionId) {
            return;
        }
        this.cacheService.set(this.key, this._data);
    };
    /**
     * Registers one or more reaction callbacks which will trigger when `this.data` changes.
     * This function uses this.data as its parameter.
     *
     * This method will be primarily used by portions of code which want to, or need to, remain MobX agnostic.
     * Returns a reaction disposer which can be used to unsubscribe.
     *
     * Example:
     * ```
     * const myUpdateCallback = myStore.subscribe((x) => { });
     * // will console log changes every changes to myStore.data
     * myUpdateCallback();
     * // will stop running the callback
     * ```
     *
     * @param callback Callback to trigger when `this.data` changes.
     */
    BaseStore.prototype.subscribe = function (callback) {
        var _this = this;
        return autorun(function () {
            callback(toJS(_this._data));
        });
    };
    /**
     * Provides a function to parse data (supposedly matching <T>) for it to be sanitized/validated:
     * - can return an object definitely matching <T> by merging with defaults (if any)
     * - defaults to transparent pass-through (should be extended to actually support a validation funcion)
     *
     * @param {any} data
     * @return {T}
     */
    BaseStore.prototype.mergeWithPreviousOrDefaults = function (data) {
        // todo: ts issue with spread operator and generics, supposedly fixed in 2.6 but not :(
        // https://github.com/Microsoft/TypeScript/pull/13288
        // merge with previous value, if any
        if (this.data && this.data !== this.defaults) {
            return __assign({}, this.data, data);
        }
        // merge with defaults, if any
        if (this.defaults !== {}) {
            return __assign({}, this.defaults, data);
        }
        // nothing to merge with: assign
        return data;
    };
    __decorate([
        observable,
        __metadata("design:type", Object)
    ], BaseStore.prototype, "_data", void 0);
    __decorate([
        computed,
        __metadata("design:type", Object),
        __metadata("design:paramtypes", [])
    ], BaseStore.prototype, "data", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", [Object]),
        __metadata("design:returntype", void 0)
    ], BaseStore.prototype, "setData", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], BaseStore.prototype, "hydrate", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], BaseStore.prototype, "onAfterHydrate", null);
    __decorate([
        action,
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], BaseStore.prototype, "flush", null);
    return BaseStore;
}());
export { BaseStore };
//# sourceMappingURL=base-store.js.map