import { toJS } from 'mobx';
import { ExampleGenres } from '../../../../../../example-data/browsing/genre';
import { browsingStoreInstance } from '../../browsing-store';
import { getJsValue } from './../../../../utils/get-js-value';
import { Logger } from './../../../../utils/logger';
import { getGenresByIds } from './../get-genres-by-ids';
describe('getGenresByIds', function () {
    var spyLoggerError = jest.spyOn(Logger, 'error');
    beforeAll(function () {
        browsingStoreInstance.setData({
            genresById: new Map([
                [ExampleGenres.Action.id, ExampleGenres.Action],
                [ExampleGenres.Comedy.id, ExampleGenres.Comedy]
            ])
        });
    });
    it('returns all genres by the given ids', function () {
        var result = getGenresByIds([ExampleGenres.Action.id, ExampleGenres.Comedy.id]);
        expect(getJsValue(result)).toEqual([ExampleGenres.Action, ExampleGenres.Comedy]);
    });
    it('returns an empty array if an empty array is passed in', function () {
        var result = getGenresByIds([]);
        expect(toJS(result)).toEqual([]);
    });
    it('logs an error if a genre does not exist', function () {
        var result = getGenresByIds(['UNKNOWN']);
        expect(toJS(result)).toEqual([]);
        expect(spyLoggerError).toHaveBeenCalled();
    });
});
//# sourceMappingURL=get-genres-by-ids.test.js.map