import { SeatType } from '../../../../../../types/seating/seat-type';
import { hasAvailableWheelchairSeatInGroup } from '../utils/seat-layout-state-utils';
import { SeatSelectionRuleName } from './seat-selection-rule';
/**
 * Rule that prevents a companion seat being selected without also selecting
 * its associated wheelchair seat
 */
export var mustSelectAssociatedWheelchairSeatRule = function () { return ({
    name: SeatSelectionRuleName.MustSelectAssociatedWheelchairSeat,
    preventSeatSelection: false,
    validate: function (seatLayoutStateManager) {
        var selectedSeats = seatLayoutStateManager.getSelectedSeats();
        var hasCompanionWithoutWheelchair = selectedSeats
            .reduce(function (acc, seat) {
            // Only test companion seats that are in a group
            if (seat.type === SeatType.Companion && seat.seatsInGroup) {
                acc.push(hasAvailableWheelchairSeatInGroup(seat, seatLayoutStateManager));
            }
            return acc;
        }, [])
            .some(function (hasAvailableWheelchairSeatInGroup) { return hasAvailableWheelchairSeatInGroup; });
        return {
            ruleName: this.name,
            valid: !hasCompanionWithoutWheelchair
        };
    }
}); };
//# sourceMappingURL=must-select-associated-wheelchair-seat-rule.js.map