import { SeatAvailability } from '../../../../../../types/seating/seat-availability';
import { Logger } from '../../../../utils/logger';
var TicketFirstSelectedSeatsQueueManager = /** @class */ (function () {
    function TicketFirstSelectedSeatsQueueManager(seatLayout) {
        this.currentSelectedSeatsQueue = this.buildSelectedSeatsQueueFromLayout(seatLayout);
    }
    TicketFirstSelectedSeatsQueueManager.prototype.isSeatSelected = function (seat) {
        return this.currentSelectedSeatsQueue[seat.areaCategoryCode].indexOf(seat) > -1;
    };
    TicketFirstSelectedSeatsQueueManager.prototype.selectSeat = function (seat) {
        var seatQueue = this.getNextSelectedSeatsQueue();
        seatQueue[seat.areaCategoryCode].push(seat);
    };
    TicketFirstSelectedSeatsQueueManager.prototype.deselectSeat = function (seat) {
        var seatQueue = this.getNextSelectedSeatsQueue();
        var areaCategorySeatsQueue = seatQueue[seat.areaCategoryCode];
        areaCategorySeatsQueue.splice(areaCategorySeatsQueue.indexOf(seat), 1);
    };
    TicketFirstSelectedSeatsQueueManager.prototype.popSeatToAccomodateNewSeat = function (newSeat) {
        var seatQueue = this.getNextSelectedSeatsQueue();
        // pop the first seat selected, in the same area category as the newly selected seat.
        var seatToDeselect = seatQueue[newSeat.areaCategoryCode].shift();
        return seatToDeselect;
    };
    TicketFirstSelectedSeatsQueueManager.prototype.saveChanges = function () {
        this.currentSelectedSeatsQueue = this.nextSelectedSeatsQueue;
        this.nextSelectedSeatsQueue = undefined;
    };
    TicketFirstSelectedSeatsQueueManager.prototype.discardChanges = function () {
        this.nextSelectedSeatsQueue = undefined;
    };
    TicketFirstSelectedSeatsQueueManager.prototype.getNextSelectedSeatsQueue = function () {
        if (this.nextSelectedSeatsQueue)
            return this.nextSelectedSeatsQueue;
        this.nextSelectedSeatsQueue = this.cloneSelectedSeats(this.currentSelectedSeatsQueue);
        return this.nextSelectedSeatsQueue;
    };
    TicketFirstSelectedSeatsQueueManager.prototype.cloneSelectedSeats = function (selectedSeats) {
        var selectedSeatsClone = {};
        for (var areaCategoryCode in selectedSeats) {
            selectedSeatsClone[areaCategoryCode] = selectedSeats[areaCategoryCode].slice();
        }
        return selectedSeatsClone;
    };
    TicketFirstSelectedSeatsQueueManager.prototype.buildSelectedSeatsQueueFromLayout = function (seatLayout) {
        var selectedSeats = {};
        // traverse layout structure and retrieve selected seats
        if (seatLayout.areas && seatLayout.areas.length) {
            for (var _i = 0, _a = seatLayout.areas; _i < _a.length; _i++) {
                var area = _a[_i];
                selectedSeats[area.areaCategoryCode] = selectedSeats[area.areaCategoryCode] || [];
                for (var _b = 0, _c = area.rows; _b < _c.length; _b++) {
                    var row = _c[_b];
                    for (var _d = 0, _e = row.seats; _d < _e.length; _d++) {
                        var seat = _e[_d];
                        if (seat.availability === SeatAvailability.Selected) {
                            selectedSeats[seat.areaCategoryCode].push(seat);
                        }
                    }
                }
            }
        }
        else {
            Logger.warn("Impossible to create a selected seats queue, no valid areas provided with layout:", seatLayout);
        }
        return selectedSeats;
    };
    return TicketFirstSelectedSeatsQueueManager;
}());
export { TicketFirstSelectedSeatsQueueManager };
//# sourceMappingURL=ticket-first-selected-seats-queue-manager.js.map