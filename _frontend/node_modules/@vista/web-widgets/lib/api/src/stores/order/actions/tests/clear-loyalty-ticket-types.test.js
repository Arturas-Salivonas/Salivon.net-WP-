var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { exampleOrderShowtime } from '../../../../../../example-data/order/order-showtime';
import { exampleStandardTicketType1 } from '../../../../../../example-data/order/order-ticket-type';
import { orderStoreInstance } from '../../order-store';
import { clearLoyaltyTicketTypes } from '../clear-loyalty-ticket-types';
import { exampleLoyaltyTicketType1, examplePackageTicketType, exampleVoucherTicketType1 } from './../../../../../../example-data/order/order-ticket-type';
describe('clearLoyaltyTicketTypes', function () {
    beforeEach(function () {
        orderStoreInstance.actions.setTicketTypesForShowtime = jest.fn();
    });
    afterEach(function () {
        orderStoreInstance.flush();
        jest.resetAllMocks();
    });
    it('returns if the order contains no showtimes', function () {
        orderStoreInstance.data.order.showtimes = [];
        clearLoyaltyTicketTypes();
        expect(orderStoreInstance.actions.setTicketTypesForShowtime).not.toBeCalled();
    });
    it('returns if the order showtime has no ticket types', function () {
        var showtime = __assign({}, exampleOrderShowtime, { ticketTypes: undefined });
        orderStoreInstance.data.order.showtimes = [showtime];
        clearLoyaltyTicketTypes();
        expect(orderStoreInstance.actions.setTicketTypesForShowtime).not.toBeCalled();
    });
    it('clears the loyalty ticket types', function () {
        var ticketTypes = new Map([
            [exampleStandardTicketType1.key, exampleStandardTicketType1],
            [examplePackageTicketType.key, examplePackageTicketType],
            [exampleVoucherTicketType1.key, exampleVoucherTicketType1],
            [exampleLoyaltyTicketType1.key, exampleLoyaltyTicketType1]
        ]);
        var showtime = __assign({}, exampleOrderShowtime, { ticketTypes: ticketTypes });
        orderStoreInstance.data.order.showtimes = [showtime];
        clearLoyaltyTicketTypes();
        expect(orderStoreInstance.actions.setTicketTypesForShowtime).toHaveBeenCalled();
        var arg1 = orderStoreInstance.actions.setTicketTypesForShowtime.mock.calls[0][0];
        var arg2 = orderStoreInstance.actions.setTicketTypesForShowtime.mock.calls[0][1];
        expect(arg1).toEqual(showtime.showtimeId);
        expect(JSON.stringify(arg2)).toEqual(JSON.stringify([exampleStandardTicketType1, examplePackageTicketType, exampleVoucherTicketType1]));
    });
});
//# sourceMappingURL=clear-loyalty-ticket-types.test.js.map