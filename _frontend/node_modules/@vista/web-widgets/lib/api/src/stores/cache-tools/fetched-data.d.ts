import { LoadingState } from '../../../../types/loading-state';
export interface FetchedDataState {
    loadingState: LoadingState;
}
export interface FetchedDataNotLoaded extends FetchedDataState {
    loadingState: LoadingState.NotLoaded;
}
export interface FetchedDataLoading extends FetchedDataState {
    loadingState: LoadingState.Loading;
}
export interface FetchedDataFailure extends FetchedDataState {
    loadingState: LoadingState.Failure;
    error?: {
        errorCode: string;
    };
}
export interface FetchedDataSuccess<T> extends FetchedDataState {
    loadingState: LoadingState.Success;
    payload: T;
    timestamp: Date;
}
/**
 * Generic type to encapsulate data that can be loaded from the API
 */
export declare type FetchedData<T> = FetchedDataSuccess<T> | FetchedDataNotLoaded | FetchedDataLoading | FetchedDataFailure;
export declare function isFetchedDataSuccess<T>(fetchedData: FetchedData<T>): fetchedData is FetchedDataSuccess<T>;
export declare function isFetchedDataFailure<T>(fetchedData: FetchedData<T>): fetchedData is FetchedDataFailure;
export declare function getLoadingFetchedData(): FetchedDataLoading;
export declare function getNotLoadedFetchedData(): FetchedDataNotLoaded;
export declare function getFailedFetchedData(): FetchedDataFailure;
