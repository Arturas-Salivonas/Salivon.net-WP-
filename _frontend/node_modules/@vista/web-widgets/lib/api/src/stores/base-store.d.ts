import { IReactionDisposer } from 'mobx';
import { BrowserSessionService } from '../user/browser-session-service';
import { CacheService } from '../user/cache-service';
/**
 * This class provides all the basic properties and methods for all other classes derived from this class.
 */
export declare class BaseStore<T extends {}> {
    private key;
    private browserSessionService;
    private cacheService;
    /**
     * Store state
     */
    private _data;
    /**
     * Default values for data store of type <T>
     */
    private defaults;
    /**
     * Constructor for the `BaseStore` class. Accepts optional defaults.
     *
     * @param key local storage key for persisted data
     * @param browserSessionService singleton instance of browser session service
     * @param cacheService singleton instance of cache service
     * @param defaults optional, provides defaults value for store data
     */
    constructor(key: string, browserSessionService: BrowserSessionService, cacheService: CacheService, defaults?: T);
    /**
     * Store data wrapper
     * MobX runs in strict mode therefore this.data can only be mutated via @action functions
     */
    readonly data: T;
    /**
     * Assigns the provided value to this.data
     *
     * @param {T} data Data to set
     */
    setData(data?: Partial<T>): void;
    /**
     * Hydrate data for current store based on its cached state inside local storage
     */
    hydrate(): void;
    /**
     * Lifecycle function that runs after a successful hydration.
     * Has no effect by default.
     */
    onAfterHydrate(): void;
    /**
     * Flush store contents and reset to defaults, if any
     */
    flush(): void;
    /**
     * Stores the _data value in cache.
     * Does nothing if no browser session exists.
     *
     * @returns {void}
     */
    syncToCache(): void;
    /**
     * Registers one or more reaction callbacks which will trigger when `this.data` changes.
     * This function uses this.data as its parameter.
     *
     * This method will be primarily used by portions of code which want to, or need to, remain MobX agnostic.
     * Returns a reaction disposer which can be used to unsubscribe.
     *
     * Example:
     * ```
     * const myUpdateCallback = myStore.subscribe((x) => { });
     * // will console log changes every changes to myStore.data
     * myUpdateCallback();
     * // will stop running the callback
     * ```
     *
     * @param callback Callback to trigger when `this.data` changes.
     */
    subscribe(callback: any): IReactionDisposer;
    /**
     * Provides a function to parse data (supposedly matching <T>) for it to be sanitized/validated:
     * - can return an object definitely matching <T> by merging with defaults (if any)
     * - defaults to transparent pass-through (should be extended to actually support a validation funcion)
     *
     * @param {any} data
     * @return {T}
     */
    private mergeWithPreviousOrDefaults;
}
