var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { CdnReferenceScheme } from '@vista/cdn-client';
import { isUndefined } from 'util';
import { defaultConfigurationStoreData } from '../../../../../types/stores/configuration-store-data';
import { Logger } from '../../../utils/logger';
import { Validator } from '../../../utils/validator';
/**
 * Merges the configuration store data provided with the current configuration.
 * Nulls out any invalid values and logs appropriate warnings.
 * Any undefined values will be replaced during mapping by the current values.
 */
export function mapConfigurationStoreData(currentConfig, data) {
    if (!data)
        return currentConfig;
    var valid = new Validator().ofType('object').validate(data, 'Configuration store data');
    if (!valid)
        return currentConfig;
    return {
        api: mapApiConfig(currentConfig.api, data.api),
        cdn: mapCdnConfig(currentConfig.cdn, data.cdn),
        ticketing: mapTicketingConfig(currentConfig.ticketing, data.ticketing),
        browsing: mapBrowsingConfig(currentConfig.browsing, data.browsing),
        localisation: mapLocalisationConfig(currentConfig.localisation, data.localisation),
        security: mapSecurityConfig(currentConfig.security, data.security),
        customerDetails: mapCustomerDetailsConfig(currentConfig.customerDetails, data.customerDetails),
        cache: mapCacheConfig(currentConfig.cache, data.cache),
        enableLoadingIndicator: mapLoadingIndicatorConfig(currentConfig.enableLoadingIndicator, data.enableLoadingIndicator)
    };
}
/**
 * Merges the API config provided with the current API config
 */
function mapApiConfig(currentConfig, config) {
    if (!config)
        return currentConfig;
    var validatedConfig = getValidatedApiConfig(config);
    return __assign({}, currentConfig, validatedConfig);
}
/**
 * Validates the API config values provided.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedApiConfig(config) {
    if ('url' in config) {
        var valid = new Validator()
            .ofType('string').minLength(1)
            .validate(config.url, 'API url config setting');
        if (!valid)
            delete config.url;
    }
    if ('authToken' in config) {
        var valid = new Validator()
            .ofType('string').minLength(1)
            .validate(config.authToken, 'API authToken config setting');
        if (!valid)
            delete config.authToken;
    }
    return config;
}
/**
 * Merges the CDN config provided with the current CDN config
 */
function mapCdnConfig(currentConfig, config) {
    if (!config)
        return currentConfig;
    var validatedConfig = getValidatedCdnConfig(config);
    return __assign({}, currentConfig, validatedConfig);
}
/**
 * Validates the CDN config values provided.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedCdnConfig(config) {
    if ('url' in config) {
        var valid = new Validator()
            .ofType('string').minLength(1)
            .validate(config.url, 'CDN url config setting');
        if (!valid)
            delete config.url;
    }
    if ('mediaApiToken' in config) {
        var valid = new Validator()
            .ofType('string').minLength(1)
            .validate(config.mediaApiToken, 'CDN authToken config setting');
        if (!valid)
            delete config.mediaApiToken;
    }
    if ('referenceScheme' in config) {
        var valid = new Validator()
            .includedInValues(Object.values(CdnReferenceScheme))
            .validate(config.referenceScheme, 'CDN referenceScheme config setting');
        if (!valid)
            delete config.referenceScheme;
    }
    return config;
}
/**
 * Merges the ticketing config provided with the current ticketing config
 */
function mapTicketingConfig(currentConfig, config) {
    if (!config)
        return currentConfig;
    var validatedConfig = getValidatedTicketingConfig(config);
    return __assign({}, currentConfig, validatedConfig);
}
/**
 * Validates the ticketing config values provided.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedTicketingConfig(config) {
    if ('isSeatFirstOrdering' in config) {
        var valid = new Validator()
            .ofType('boolean')
            .validate(config.isSeatFirstOrdering, 'Ticketing isSeatFirstOrdering config setting');
        if (!valid)
            delete config.isSeatFirstOrdering;
    }
    if ('maximumAllowedTicketsInAnOrder' in config) {
        var valid = new Validator()
            .ofType('number').min(1)
            .validate(config.maximumAllowedTicketsInAnOrder, 'Ticketing maximumAllowedTicketsInAnOrder config setting');
        if (!valid)
            delete config.maximumAllowedTicketsInAnOrder;
    }
    if ('admittingDuration' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.admittingDuration, 'Ticketing admittingDuration config setting');
        if (!valid)
            delete config.admittingDuration;
    }
    return config;
}
/**
 * Merges the browsing config provided with the current browsing config
 */
function mapBrowsingConfig(currentConfig, config) {
    if (!config)
        return currentConfig;
    var validatedConfig = getValidatedBrowsingConfig(config);
    return __assign({}, currentConfig, validatedConfig);
}
/**
 * Validates the browsing config values provided.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedBrowsingConfig(config) {
    if ('maximumSelectedSites' in config) {
        var valid = new Validator()
            .ofType('number').min(1)
            .validate(config.maximumSelectedSites, 'Browsing maximumSelectedSites config setting');
        if (!valid)
            delete config.maximumSelectedSites;
    }
    return config;
}
/**
 * Merges the localisation config provided with the current localisation config
 */
function mapLocalisationConfig(currentConfig, config) {
    if (!config)
        return currentConfig;
    var validatedConfig = getValidatedLocalisationConfig(config);
    return __assign({}, currentConfig, validatedConfig, { currency: __assign({}, currentConfig.currency, validatedConfig.currency) });
}
/**
 * Validates the localisation config values provided.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedLocalisationConfig(config) {
    if ('languageTag' in config) {
        var valid = new Validator()
            .ofType('string').minLength(1)
            .validate(config.languageTag, 'Localisation languageTag config setting');
        if (!valid)
            delete config.languageTag;
    }
    if ('currency' in config) {
        var valid = new Validator()
            .ofType('object')
            .validate(config.currency, 'Localisation currency config setting');
        if (!valid)
            delete config.currency;
    }
    if ('date' in config) {
        var valid = new Validator()
            .ofType('object')
            .validate(config.date, 'Localisation date config setting');
        if (!valid)
            delete config.date;
    }
    if ('filmPosterAltTextFormat' in config) {
        var valid = new Validator()
            .ofType('string').minLength(1)
            .validate(config.filmPosterAltTextFormat, 'Localisation filmPosterAltTextFormat config setting');
        if (!valid)
            delete config.filmPosterAltTextFormat;
    }
    return config;
}
/**
 * Merges the security config provided with the current security config
 */
function mapSecurityConfig(currentConfig, config) {
    if (!config)
        return currentConfig;
    var validatedConfig = getValidatedSecurityConfig(config);
    return __assign({}, currentConfig, validatedConfig, { captcha: __assign({}, currentConfig.captcha, validatedConfig.captcha) });
}
/**
 * Validates the security config values provided.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedSecurityConfig(config) {
    if ('captcha' in config) {
        var valid = new Validator()
            .ofType('object')
            .validate(config.captcha, 'Security captcha config setting');
        if (!valid)
            delete config.captcha;
    }
    return config;
}
/**
 * Merges the customer details config provided with the current customer details config.
 */
function mapCustomerDetailsConfig(currentConfig, config) {
    if (!config)
        return currentConfig;
    var validatedValidationConfig = getValidatedValidationConfig(currentConfig.validation, config.validation);
    return {
        validation: __assign({}, currentConfig.validation, validatedValidationConfig),
    };
}
/**
 * Merges the cache config provided with the current cache config
 */
function mapCacheConfig(currentConfig, config) {
    if (!config)
        return currentConfig;
    var validatedConfig = getValidatedCacheConfig(config);
    return __assign({}, currentConfig, validatedConfig, { durations: __assign({}, currentConfig.durations, validatedConfig.durations) });
}
/**
 * Validates the cache config values provided.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedCacheConfig(config) {
    if ('durations' in config) {
        var valid = new Validator()
            .ofType('object')
            .validate(config.durations, 'Cache durations config setting');
        if (!valid)
            delete config.durations;
    }
    if (config.durations)
        config.durations = getValidatedCacheDurationsConfig(config.durations);
    return config;
}
/**
 * Validates the cache durations config values provided.
 * Removes any invalid values and logs appropriate warnings.
 */
function getValidatedCacheDurationsConfig(config) {
    if ('showtimes' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.showtimes, 'Cache durations showtimes config setting');
        if (!valid)
            delete config.showtimes;
    }
    if ('screeningDates' in config) {
        var valid = new Validator()
            .ofType('number').min(0)
            .validate(config.screeningDates, 'Cache durations screeningDates config setting');
        if (!valid)
            delete config.screeningDates;
    }
    return config;
}
var formatStringValidator = new Validator().ofType('string').includedInValues(['', 'email']);
var objectValidator = new Validator().ofType('object');
var booleanValidator = new Validator().ofType('boolean');
var lengthValidator = new Validator().ofType('number');
var functionValidator = new Validator().ofType('function');
function getValidatedValidationConfig(currentConfig, config) {
    var validConfig = __assign({}, currentConfig);
    var valid = objectValidator.validate(config, 'Customer Details validation config');
    if (!valid || !config)
        return validConfig;
    var textFields = ['email', 'familyName', 'givenName', 'phone'];
    for (var _i = 0, textFields_1 = textFields; _i < textFields_1.length; _i++) {
        var field = textFields_1[_i];
        if (field in config) {
            var fieldConfig = config[field];
            var valid_1 = objectValidator.validate(fieldConfig, "Text field '" + field + "' config");
            if (valid_1)
                validConfig[field] = getValidatedTextFieldValidationConfig(validConfig[field], fieldConfig);
        }
    }
    return validConfig;
}
function getValidatedTextFieldValidationConfig(defaultConfig, config) {
    var validConfig = getValidatedFieldValidationConfig(defaultConfig, config);
    if ('minLength' in config) {
        var valid = lengthValidator.validate(config.minLength, "Text field validation config 'minLength'");
        if (valid)
            validConfig.minLength = config.minLength;
    }
    if ('maxLength' in config) {
        var valid = lengthValidator.validate(config.maxLength, "Text field validation config 'maxLength'");
        if (valid)
            validConfig.maxLength = config.maxLength;
    }
    if (validConfig.maxLength > 0 && validConfig.minLength > validConfig.maxLength) {
        Logger.warn("Text field validation config minLength '" + validConfig.minLength + "' is larger than maxLength '" + validConfig.maxLength + "'");
        validConfig.minLength = validConfig.maxLength;
    }
    if ('format' in config) {
        var valid = config.format instanceof RegExp || formatStringValidator.validate(config.format, "Text field validation config 'format'");
        if (valid)
            validConfig.format = config.format;
    }
    return validConfig;
}
function getValidatedFieldValidationConfig(defaultConfig, config) {
    var validConfig = Object.assign({}, defaultConfig);
    if ('required' in config) {
        var valid = booleanValidator.validate(config.required, "Field validation config 'required'");
        if (valid)
            validConfig.required = config.required;
    }
    if ('customValidation' in config) {
        var valid = functionValidator.validate(config.customValidation, "Field validation config 'customValidation'");
        if (valid)
            validConfig.customValidation = config.customValidation;
    }
    return validConfig;
}
function mapLoadingIndicatorConfig(currentConfig, config) {
    if (isUndefined(config))
        return currentConfig;
    var validatedConfig = getValidatedLoadingIndicatorConfig(config);
    return validatedConfig;
}
function getValidatedLoadingIndicatorConfig(config) {
    var valid = new Validator()
        .ofType('boolean')
        .validate(config, 'enableLoadingIndicator config setting');
    if (!valid)
        return defaultConfigurationStoreData.enableLoadingIndicator;
    return config;
}
//# sourceMappingURL=configuration-store-data-mapper.js.map