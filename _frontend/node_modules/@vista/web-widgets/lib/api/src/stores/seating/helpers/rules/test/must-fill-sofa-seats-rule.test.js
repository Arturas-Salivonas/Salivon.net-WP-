import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { SeatLayoutStateManager } from '../../utils/seat-layout-state-manager';
import { mustFillSofaSeatsRule } from '../must-fill-sofa-seats-rule';
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
var defaultRule = mustFillSofaSeatsRule();
describe('mustFillSofaSeatsRule', function () {
    it('allows an entire sofa with all seats selected to be sold', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSofa([
                    { availability: SeatAvailability.Selected },
                    { availability: SeatAvailability.Selected }
                ]);
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('allows a sofa with one selected seat and one sold seat to be sold', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSofa([
                    { availability: SeatAvailability.Sold },
                    { availability: SeatAvailability.Selected }
                ]);
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('prevents a sofa with one selected seat and one available seat from being sold', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSofa([
                    { availability: SeatAvailability.Available },
                    { availability: SeatAvailability.Selected }
                ]);
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
    it('prevents a sofa with one selected seat, one sold, and one available seat from being sold', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSofa([
                    { availability: SeatAvailability.Available },
                    { availability: SeatAvailability.Selected }
                ]);
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
});
//# sourceMappingURL=must-fill-sofa-seats-rule.test.js.map