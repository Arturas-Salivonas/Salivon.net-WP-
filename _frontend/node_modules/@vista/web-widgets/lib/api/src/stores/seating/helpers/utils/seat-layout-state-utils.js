var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { SeatAvailability } from '../../../../../../types/seating/seat-availability';
import { SeatType } from '../../../../../../types/seating/seat-type';
/**
 * Returns the seat as it would look if the next state had been applied
 * and the nextState property was removed.
 * @param seat
 */
export var getCurrentSeatState = function (seat) {
    var availability = seat.nextState ? seat.nextState.availability : seat.availability;
    return __assign({}, seat, { availability: availability, nextState: undefined });
};
export var seatIsCurrentlyAvailable = function (seat) {
    return getCurrentSeatState(seat).availability === SeatAvailability.Available;
};
export var seatIsCurrentlySelected = function (seat) {
    return getCurrentSeatState(seat).availability === SeatAvailability.Selected;
};
/**
 * Returns true if the seat belongs to a sofa that contains
 * any available seats
 * @param seat
 * @param seatLayoutStateManager
 */
export var hasAvailableSeatsInGroup = function (seat, seatLayoutStateManager) {
    return seat.seatsInGroup
        .map(function (position) { return seatLayoutStateManager.getSeatByPosition(position); })
        .some(function (seatInGroup) { return !!(seatInGroup && seatIsCurrentlyAvailable(seatInGroup)); });
};
/**
 * Returns true if the seat belongs to a group that contains
 * any available seats
 * @param seat
 * @param seatLayoutStateManager
 */
export var hasAvailableWheelchairSeatInGroup = function (seat, seatLayoutStateManager) {
    return seat.seatsInGroup
        .map(function (position) { return seatLayoutStateManager.getSeatByPosition(position); })
        .some(function (seatInGroup) { return !!(seatInGroup && seatInGroup.type === SeatType.Wheelchair && seatIsCurrentlyAvailable(seatInGroup)); });
};
//# sourceMappingURL=seat-layout-state-utils.js.map