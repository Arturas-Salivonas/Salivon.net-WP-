import { SeatAvailability } from '../../../../../../types/seating/seat-availability';
import { areSeatPositionsEqual, getSeatByPosition } from './seat-utils';
/**
 * Sets a given available seat as selected and updates the area category.
 */
export function selectSeat(seat, areaCategory) {
    if (!seat)
        throw new Error('Seat cannot be undefined');
    if (!areaCategory)
        throw new Error('Area category cannot be undefined');
    // Nothing to do here
    if (seat.availability === SeatAvailability.Selected)
        return;
    // Mark the seat as selected
    seat.availability = SeatAvailability.Selected;
    // Add it to the area category
    areaCategory.seatsNotAllocatedCount--;
    areaCategory.seatsAllocatedCount++;
    areaCategory.selectedSeats.push(seat.position);
}
/**
 * Sets a given selected seat as available and updates the area category.
 */
export function deselectSeat(seat, areaCategory) {
    if (!seat)
        throw new Error('Seat cannot be undefined');
    if (!areaCategory)
        throw new Error('Area category cannot be undefined');
    // Nothing to do here
    if (seat.availability === SeatAvailability.Available)
        return;
    // Mark the seat as available
    seat.availability = SeatAvailability.Available;
    // Remove it from the area category
    areaCategory.seatsNotAllocatedCount++;
    areaCategory.seatsAllocatedCount--;
    areaCategory.selectedSeats = areaCategory.selectedSeats
        .filter(function (position) { return !areSeatPositionsEqual(position, seat.position); });
}
/**
 * Returns a set of selected seats for a given area category.
 */
var getSelectedSeatsForAreaCategory = function (areaCategory, seatLayout) {
    return areaCategory.selectedSeats.reduce(function (selectedSeats, position) {
        var seat = getSeatByPosition(seatLayout, position);
        if (!seat)
            throw new Error("Seat at postion " + position + " could not be found");
        return selectedSeats.concat([seat]);
    }, []);
};
/**
 * Returns a set of currently selected seats for a given seat layout.
 */
export var getSelectedSeats = function (seatLayout) {
    return seatLayout.areaCategories.reduce(function (selectedSeats, areaCategory) {
        return selectedSeats.concat(getSelectedSeatsForAreaCategory(areaCategory, seatLayout));
    }, []);
};
var getSeatPositionId = function (seatPosition) { return seatPosition.areaNumber + "-" + seatPosition.rowIndex + "-" + seatPosition.columnIndex; };
export var seatSelectionsAreEqual = function (seatSelectionA, seatSelectionB) {
    var seatPositionIdsA = seatSelectionA.map(function (position) { return getSeatPositionId(position); }).sort();
    var seatPositionIdsB = seatSelectionB.map(function (position) { return getSeatPositionId(position); }).sort();
    if (seatPositionIdsA.length !== seatPositionIdsB.length)
        return false;
    for (var i = 0; i < seatPositionIdsA.length; i++) {
        if (seatPositionIdsA[i] !== seatPositionIdsB[i])
            return false;
    }
    return true;
};
//# sourceMappingURL=seat-selection-utils.js.map