import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { createSingleRowSeatLayout } from '../../test/test-utils';
import { SeatLayoutStateManager } from '../../utils/seat-layout-state-manager';
import { cannotLeaveSingleSeatGapFromUnavailableSeatRule } from '../cannot-leave-single-seat-gap-from-unavailable-seat-rule';
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
var defaultRule = cannotLeaveSingleSeatGapFromUnavailableSeatRule();
describe('cannotLeaveSingleSeatGapFromUnavailableSeatRule', function () {
    it('cannot leave a single available seat gap between selected seat and sold seat', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row
            .addSeat({ availability: SeatAvailability.Available })
            .addSeat({ availability: SeatAvailability.Selected })
            .addSeat({ availability: SeatAvailability.Available })
            .addSeat({ availability: SeatAvailability.Sold }); });
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
    it('can leave a double seat gap from sold seats', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row
            .addSeat({ availability: SeatAvailability.Selected })
            .addSeat({ availability: SeatAvailability.Available })
            .addSeat({ availability: SeatAvailability.Available })
            .addSeat({ availability: SeatAvailability.Sold }); });
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('can leave a single sold seat gap between selected seats', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row
            .addSeat({ availability: SeatAvailability.Selected })
            .addSeat({ availability: SeatAvailability.Sold })
            .addSeat({ availability: SeatAvailability.Selected }); });
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('can leave a single available seat gap from a sold seat when it is the only seat available in the row', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row
            .addSeat({ availability: SeatAvailability.Sold })
            .addSeat({ availability: SeatAvailability.Available })
            .addSeat({ availability: SeatAvailability.Selected })
            .addSeat({ availability: SeatAvailability.Sold }); });
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('can leave a single available seat gap from a sold seat outside the sofa when selecting sofa seats', function () {
        var seatLayout = createSingleRowSeatLayout(function (row) { return row
            .addSofa([
            { availability: SeatAvailability.Selected },
            { availability: SeatAvailability.Available },
        ])
            .addSeat({ availability: SeatAvailability.Sold })
            .addSeat({ availability: SeatAvailability.Available }); });
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    describe('default config', function () {
        it('can leave a single available seat gap from a wheelchair seat to a sold seat', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addWheelchair({
                wheelchairSeat: { availability: SeatAvailability.Selected }
            })
                .addSeat({ availability: SeatAvailability.Available })
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available }); });
            var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
            expect(result.valid).toEqual(true);
        });
        it('can leave a single available seat gap from a sold seat within the sofa when selecting sofa seats', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSofa([
                { availability: SeatAvailability.Selected },
                { availability: SeatAvailability.Available },
                { availability: SeatAvailability.Sold }
            ])
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available }); });
            var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
            expect(result.valid).toEqual(true);
        });
        it('can leave a single available seat gap from a sold seat outside the sofa when selecting sofa seats', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSofa([
                { availability: SeatAvailability.Selected },
                { availability: SeatAvailability.Available },
            ])
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available }); });
            var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
            expect(result.valid).toEqual(true);
        });
    });
    describe('custom config', function () {
        describe('ignoreWheelchairSeats', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available })
                .addWheelchair({
                wheelchairSeat: { availability: SeatAvailability.Selected }
            })
                .addSeat({ availability: SeatAvailability.Available })
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available }); });
            it('ignores selected wheelchair seats when true', function () {
                var rule = cannotLeaveSingleSeatGapFromUnavailableSeatRule({ ignoreSelectedWheelchairSeats: true });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it('processes selected wheelchair seats when false', function () {
                var rule = cannotLeaveSingleSeatGapFromUnavailableSeatRule({ ignoreSelectedWheelchairSeats: false });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(false);
            });
        });
        describe('ignoreSofaSeats', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available })
                .addSofa([
                { availability: SeatAvailability.Selected },
                { availability: SeatAvailability.Available },
            ])
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available }); });
            it('ignores selected sofa seats when true', function () {
                var rule = cannotLeaveSingleSeatGapFromUnavailableSeatRule({ ignoreSelectedSofaSeats: true });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it('processes selected sofa seats when false', function () {
                var rule = cannotLeaveSingleSeatGapFromUnavailableSeatRule({ ignoreSelectedSofaSeats: false });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(false);
            });
        });
        describe('allowWhenAllSeatsBetweenTheSeatGapAndAnUnavailableSeatAreSelected', function () {
            var seatLayout = createSingleRowSeatLayout(function (row) { return row
                .addSeat({ availability: SeatAvailability.Available })
                .addSeat({ availability: SeatAvailability.Available })
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available })
                .addSeat({ availability: SeatAvailability.Selected })
                .addSeat({ availability: SeatAvailability.Sold })
                .addSeat({ availability: SeatAvailability.Available })
                .addSeat({ availability: SeatAvailability.Available }); });
            it('can leave a single available seat gap from a sold seat when it is the only seat available in the sub-block of the row when true', function () {
                var rule = cannotLeaveSingleSeatGapFromUnavailableSeatRule({ allowWhenAllSeatsBetweenTheSeatGapAndAnUnavailableSeatAreSelected: true });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(true);
            });
            it('can not leave a single available seat gap from a sold seat when it is the only seat available in the sub-block of the row when false', function () {
                var rule = cannotLeaveSingleSeatGapFromUnavailableSeatRule({ allowWhenAllSeatsBetweenTheSeatGapAndAnUnavailableSeatAreSelected: false });
                var result = rule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
                expect(result.valid).toEqual(false);
            });
        });
    });
});
//# sourceMappingURL=cannot-leave-single-seat-gap-from-unavailable-seat-rule.test.js.map