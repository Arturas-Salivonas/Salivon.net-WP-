import { SeatAvailability } from '../../../../../../types/seating/seat-availability';
import { Logger } from '../../../../utils/logger';
var SeatFirstSelectedSeatsQueueManager = /** @class */ (function () {
    function SeatFirstSelectedSeatsQueueManager(seatLayout) {
        this.currentSelectedSeatsQueue = this.buildSelectedSeatsQueueFromLayout(seatLayout);
    }
    SeatFirstSelectedSeatsQueueManager.prototype.isSeatSelected = function (seat) {
        return this.currentSelectedSeatsQueue.indexOf(seat) > -1;
    };
    SeatFirstSelectedSeatsQueueManager.prototype.selectSeat = function (seat) {
        var seatQueue = this.getNextSelectedSeatsQueue();
        seatQueue.push(seat);
    };
    SeatFirstSelectedSeatsQueueManager.prototype.deselectSeat = function (seat) {
        var seatQueue = this.getNextSelectedSeatsQueue();
        seatQueue.splice(seatQueue.indexOf(seat), 1);
    };
    SeatFirstSelectedSeatsQueueManager.prototype.popSeatToAccomodateNewSeat = function (newSeat) {
        var seatQueue = this.getNextSelectedSeatsQueue();
        // pop the first seat selected, in the same area category as the newly selected seat.
        var seatToDeselect = seatQueue.shift();
        return seatToDeselect;
    };
    SeatFirstSelectedSeatsQueueManager.prototype.saveChanges = function () {
        this.currentSelectedSeatsQueue = this.nextSelectedSeatsQueue;
        this.nextSelectedSeatsQueue = undefined;
    };
    SeatFirstSelectedSeatsQueueManager.prototype.discardChanges = function () {
        this.nextSelectedSeatsQueue = undefined;
    };
    SeatFirstSelectedSeatsQueueManager.prototype.getNextSelectedSeatsQueue = function () {
        if (this.nextSelectedSeatsQueue)
            return this.nextSelectedSeatsQueue;
        this.nextSelectedSeatsQueue = this.cloneSelectedSeats(this.currentSelectedSeatsQueue);
        return this.nextSelectedSeatsQueue;
    };
    SeatFirstSelectedSeatsQueueManager.prototype.cloneSelectedSeats = function (selectedSeats) {
        var selectedSeatsClone = selectedSeats.slice();
        return selectedSeatsClone;
    };
    SeatFirstSelectedSeatsQueueManager.prototype.buildSelectedSeatsQueueFromLayout = function (seatLayout) {
        var selectedSeats = [];
        if (seatLayout.areas && seatLayout.areas.length) {
            for (var _i = 0, _a = seatLayout.areas; _i < _a.length; _i++) {
                var area = _a[_i];
                for (var _b = 0, _c = area.rows; _b < _c.length; _b++) {
                    var row = _c[_b];
                    for (var _d = 0, _e = row.seats; _d < _e.length; _d++) {
                        var seat = _e[_d];
                        if (seat.availability === SeatAvailability.Selected) {
                            selectedSeats.push(seat);
                        }
                    }
                }
            }
        }
        else {
            Logger.warn("Impossible to create a selected seats queue, no valid areas provided with layout:", seatLayout);
        }
        return selectedSeats;
    };
    return SeatFirstSelectedSeatsQueueManager;
}());
export { SeatFirstSelectedSeatsQueueManager };
//# sourceMappingURL=seat-first-selected-seats-queue-manager.js.map