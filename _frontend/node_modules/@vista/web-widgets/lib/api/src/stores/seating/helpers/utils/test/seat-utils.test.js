var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatType } from '../../../../../../../types/seating/seat-type';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { areSeatPositionsEqual, cloneSeat, getSeatByPosition, invertSeat, isFriendSeat, isSofaSeat } from '../seat-utils';
import { getSeatLabelsByPosition, getSeatObjectsByPosition } from './../seat-utils';
var rowLabel = 'A';
var seatLabel = '2';
var testLayout = new SeatLayoutBuilder().addAreaCategory(function (areaCat) {
    return areaCat.addArea(function (area) {
        area.addRow(rowLabel, function (row) { row.addSeat({ seatLabel: seatLabel }); });
    });
}).create();
var testArea = testLayout.areas[0];
var testRow = testArea.rows[0];
var testSeat = testRow.seats[0];
describe('getSeatObjectsByPosition', function () {
    it('returns undefined if the areaNumber does not exist in the layout', function () {
        var position = __assign({}, testSeat.position, { areaNumber: -1 });
        var result = getSeatObjectsByPosition(testLayout, position);
        expect(result).toEqual(undefined);
    });
    it('returns undefined if the rowIndex does not exist in the area', function () {
        var position = __assign({}, testSeat.position, { rowIndex: -1 });
        var result = getSeatObjectsByPosition(testLayout, position);
        expect(result).toEqual(undefined);
    });
    it('returns undefined if the columnIndex does not exist in the row', function () {
        var position = __assign({}, testSeat.position, { columnIndex: -1 });
        var result = getSeatObjectsByPosition(testLayout, position);
        expect(result).toEqual(undefined);
    });
});
describe('getSeatByPosition', function () {
    it('returns the correct seat for a given position', function () {
        var position = __assign({}, testSeat.position);
        var result = getSeatByPosition(testLayout, position);
        expect(result).toBe(testSeat);
    });
    it('returns undefined if the seat does not exist in the layout', function () {
        var position = __assign({}, testSeat.position, { areaNumber: -1 });
        var result = getSeatByPosition(testLayout, position);
        expect(result).toBe(undefined);
    });
});
describe('getSeatLabelsByPosition', function () {
    it('returns the correct labels for a given seat', function () {
        var position = __assign({}, testSeat.position);
        var result = getSeatLabelsByPosition(testLayout, position);
        expect(result).toEqual({
            rowLabel: rowLabel,
            seatLabel: seatLabel
        });
    });
    it('returns undefined if the row does not exist in the layout', function () {
        var position = __assign({}, testSeat.position, { rowIndex: -1 });
        var result = getSeatLabelsByPosition(testLayout, position);
        expect(result).toEqual(undefined);
    });
    it('returns undefined if the seat does not exist in the layout', function () {
        var position = __assign({}, testSeat.position, { columnIndex: -1 });
        var result = getSeatLabelsByPosition(testLayout, position);
        expect(result).toEqual(undefined);
    });
});
describe('isSofaSeat', function () {
    it('is true when seat type is a sofa type', function () {
        var sofaSeats = [
            { type: SeatType.SofaLeft },
            { type: SeatType.SofaMiddle },
            { type: SeatType.SofaRight }
        ];
        var results = sofaSeats.map(function (s) { return isSofaSeat(s); });
        results.forEach(function (result) { return expect(result).toBe(true); });
    });
    it('is false when seat type is normal, wheelchair or companion', function () {
        var normalSeats = [
            { type: SeatType.Normal },
            { type: SeatType.Wheelchair },
            { type: SeatType.Companion }
        ];
        var results = normalSeats.map(function (s) { return isSofaSeat(s); });
        results.forEach(function (result) { return expect(result).toBe(false); });
    });
});
describe('areSeatPositionsEqual', function () {
    it('returns true when two given positions are equal', function () {
        var positionA = {
            areaNumber: 1,
            rowIndex: 1,
            columnIndex: 1
        };
        var positionB = {
            areaNumber: 1,
            rowIndex: 1,
            columnIndex: 1
        };
        var result = areSeatPositionsEqual(positionA, positionB);
        expect(result).toBe(true);
    });
    it('returns false when two given positions have different area numbers', function () {
        var positionA = {
            areaNumber: 1,
            rowIndex: 1,
            columnIndex: 1
        };
        var positionB = {
            areaNumber: 2,
            rowIndex: 1,
            columnIndex: 1
        };
        var result = areSeatPositionsEqual(positionA, positionB);
        expect(result).toBe(false);
    });
    it('returns false when two given positions have different row indexes', function () {
        var positionA = {
            areaNumber: 1,
            rowIndex: 1,
            columnIndex: 1
        };
        var positionB = {
            areaNumber: 1,
            rowIndex: 2,
            columnIndex: 1
        };
        var result = areSeatPositionsEqual(positionA, positionB);
        expect(result).toBe(false);
    });
    it('returns false when two given positions have different column indexes', function () {
        var positionA = {
            areaNumber: 1,
            rowIndex: 1,
            columnIndex: 1
        };
        var positionB = {
            areaNumber: 1,
            rowIndex: 1,
            columnIndex: 2
        };
        var result = areSeatPositionsEqual(positionA, positionB);
        expect(result).toBe(false);
    });
});
describe('cloneSeat', function () {
    it('creates a clone of a given seat', function () {
        var seat = {
            position: {
                areaNumber: 1,
                rowIndex: 1,
                columnIndex: 1
            },
            seatsInGroup: [],
            seatLabel: 'a',
            areaCategoryCode: '1',
            type: SeatType.Normal,
            availability: SeatAvailability.Available
        };
        var clone = cloneSeat(seat);
        expect(clone).not.toBe(seat);
        expect(clone).toEqual(seat);
    });
});
describe('isFriendSeat', function () {
    var normalSeat = {
        position: { areaNumber: 1, rowIndex: 1, columnIndex: 1 },
        seatsInGroup: [],
        seatLabel: 'a',
        areaCategoryCode: '1',
        type: SeatType.Normal,
        availability: SeatAvailability.Available
    };
    it('returns true when seat is a friend seat', function () {
        var friendSeat = __assign({}, normalSeat, { availability: SeatAvailability.Sold, isFriendSeat: true });
        expect(isFriendSeat(friendSeat)).toBe(true);
    });
    it('returns false when seat is not a friend seat', function () {
        expect(isFriendSeat(normalSeat)).toBe(false);
    });
});
describe('invertSeat', function () {
    var returnOriginalSeatTestCases = [
        { name: 'companion', type: SeatType.Companion },
        { name: 'normal', type: SeatType.Normal },
        { name: 'sofa middle', type: SeatType.SofaMiddle },
        { name: 'wheelchair', type: SeatType.Wheelchair },
    ];
    returnOriginalSeatTestCases.forEach(function (testCase) {
        it("returns original seat for " + testCase.name + " seats", function () {
            var seat = { type: testCase.type };
            expect(invertSeat(seat)).toBe(seat);
        });
    });
    it('returns left sofa seat for right sofa seats', function () {
        var seat = { type: SeatType.SofaRight };
        expect(invertSeat(seat)).toEqual({ type: SeatType.SofaLeft });
    });
    it('returns right sofa seat for left sofa seats', function () {
        var seat = { type: SeatType.SofaLeft };
        expect(invertSeat(seat)).toEqual({ type: SeatType.SofaRight });
    });
});
//# sourceMappingURL=seat-utils.test.js.map