import { AreaCategory } from '../../../../../../types/seating/area-category';
import { Seat } from '../../../../../../types/seating/seat';
import { SeatLayout } from '../../../../../../types/seating/seat-layout';
import { SeatPosition } from '../../../../../../types/seating/seat-position';
/**
 * Handles temporary state changes for the seat layout
 * that allows seats to be selected, validated and the changes
 * to be discarded if the validation fails.
 */
export declare class SeatLayoutStateManager {
    seatLayout: SeatLayout;
    private _isSeatFirstOrdering;
    private maximumTicketsAllowedInAnOrder;
    constructor(seatLayout: SeatLayout, _isSeatFirstOrdering: boolean, maximumTicketsAllowedInAnOrder: number);
    readonly isSeatFirstOrdering: boolean;
    readonly areaCategories: AreaCategory[];
    /**
     * Sets the next state to include the selected seat
     * @param seat The selected seat
     * @param areaCategory The area category the seat belongs to
     */
    selectSeat(seat: Seat): void;
    /**
     * Sets the next state to exclude the deselected seat
     * @param seat The deselected seat
     * @param areaCategory The area category the seat belongs to
     */
    deselectSeat(seat: Seat): void;
    /**
     * Returns true if not all seats in the order have been selected yet.
     *
     * @param {AreaCategory} areaCategory
     * @returns {boolean}
     */
    canAllocateSeat(seat: Seat): boolean;
    /**
     * Returns the selected seats based on the 'next state' of the seat layout
     * @param seatLayout
     */
    getSelectedSeats(): Seat[];
    /**
     * Returns the seat matching that position
     * @param position
     */
    getSeatByPosition(position: SeatPosition): Seat | undefined;
    /**
     * Updates the seatLayout with any changes made by the selectSeat and
     * deselectSeat methods.
     */
    applyStateChanges(): void;
    /**
     * Discards any changes made by the selectSeat and deselectSeat methods.
     */
    discardStateChanges(): void;
    hasSeatsToAllocateInAreaCategory(areaCategory: AreaCategory): boolean;
    /**
     * Returns the selected seats based on the 'next state' of the seat layout
     * @param seatLayout
     */
    private getSelectedSeatPositions;
    private flushStateChanges;
    private isSeatsAllocatedLessThanMaximumAllowed;
    private getAreaCategoryState;
}
