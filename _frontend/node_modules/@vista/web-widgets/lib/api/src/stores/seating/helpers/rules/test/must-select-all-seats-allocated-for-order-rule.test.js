import { SeatAvailability } from '../../../../../../../types/seating/seat-availability';
import { SeatLayoutBuilder } from '../../test/seat-layout-builder';
import { SeatLayoutStateManager } from '../../utils/seat-layout-state-manager';
import { mustSelectAllSeatsAllocatedForOrderRule } from '../must-select-all-seats-allocated-for-order-rule';
var isSeatFirstOrdering = false;
var maximumTicketsAllowedInAnOrder = 10;
var defaultRule = mustSelectAllSeatsAllocatedForOrderRule();
describe('mustSelectAllSeatsAllocatedForOrderRule', function () {
    it('is valid if all seats required to be allocated have been selected across all area categories', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('B', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Selected })
                    .addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(true);
    });
    it('returns a failure state if not all seats have been selected', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSeat({ availability: SeatAvailability.Available });
            }); });
            areaCat.setTotalSeatsToSelect(1);
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
    it('returns a failure state if not all seats have been selected in one area category', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row.addSeat({ availability: SeatAvailability.Selected });
            }); });
        })
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('B', function (row) {
                row.addSeat({ availability: SeatAvailability.Available });
            }); });
            areaCat.setTotalSeatsToSelect(1);
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
    it('returns a failure state if not all seats have been selected in all area categories', function () {
        var seatLayout = new SeatLayoutBuilder()
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('A', function (row) {
                row
                    .addSeat({ availability: SeatAvailability.Available })
                    .addSeat({ availability: SeatAvailability.Selected });
            }); });
            areaCat.setTotalSeatsToSelect(2);
        })
            .addAreaCategory(function (areaCat) {
            areaCat.addArea(function (area) { return area
                .addRow('B', function (row) {
                row.addSeat({ availability: SeatAvailability.Available });
            }); });
            areaCat.setTotalSeatsToSelect(1);
        })
            .create();
        var result = defaultRule.validate(new SeatLayoutStateManager(seatLayout, isSeatFirstOrdering, maximumTicketsAllowedInAnOrder));
        expect(result.valid).toEqual(false);
    });
});
//# sourceMappingURL=must-select-all-seats-allocated-for-order-rule.test.js.map