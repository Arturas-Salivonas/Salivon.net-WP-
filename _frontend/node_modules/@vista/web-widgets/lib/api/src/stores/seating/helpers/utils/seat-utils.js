var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
import { toJS } from 'mobx';
import { SeatAvailability } from '../../../../../../types/seating/seat-availability';
import { SeatType } from '../../../../../../types/seating/seat-type';
/**
 * Finds and returns the area, row and seat objects for a given seat position.
 */
export var getSeatObjectsByPosition = function (seatLayout, position) {
    var area = seatLayout.areas.find(function (area) { return area.number === position.areaNumber; });
    if (!area)
        return undefined;
    var row = area.rows.find(function (row) { return row.rowIndex === position.rowIndex; });
    if (!row)
        return undefined;
    var seat = row.seats.find(function (seat) { return seat.position.columnIndex === position.columnIndex; });
    if (!seat)
        return undefined;
    return {
        area: area,
        row: row,
        seat: seat
    };
};
/**
 * Gets the seat labels for a given seat position.
 */
export var getSeatLabelsByPosition = function (seatLayout, position) {
    var seatObjects = getSeatObjectsByPosition(seatLayout, position);
    if (!seatObjects)
        return undefined;
    return {
        rowLabel: seatObjects.row.rowLabel,
        seatLabel: seatObjects.seat.seatLabel
    };
};
/**
 * Finds and returns a seat within a seat layout by its position information.
 */
export var getSeatByPosition = function (seatLayout, position) {
    var seatObjects = getSeatObjectsByPosition(seatLayout, position);
    if (!seatObjects)
        return undefined;
    return seatObjects.seat;
};
export var seatIsUnavailable = function (seat) {
    return seat.availability === SeatAvailability.Sold || seat.availability === SeatAvailability.Broken;
};
/**
 * Determines whether or not a given seat is a sofa based on its SeatType.
 */
export var isSofaSeat = function (seat) {
    return seat.type === SeatType.SofaLeft
        || seat.type === SeatType.SofaMiddle
        || seat.type === SeatType.SofaRight;
};
/**
 * Determines whether or not a given seat is a friend seat
 */
export var isFriendSeat = function (seat) {
    return !!(seat.isFriendSeat);
};
/**
 * Determines whether or not two given seat positions are the same.
 */
export var areSeatPositionsEqual = function (positionA, positionB) {
    return positionA.areaNumber === positionB.areaNumber
        && positionA.rowIndex === positionB.rowIndex
        && positionA.columnIndex === positionB.columnIndex;
};
/**
 * Makes a deep copy of a given seat.
 */
export var cloneSeat = function (seat) {
    return __assign({}, toJS(seat));
};
/**
 * Inverts a seat.
 * Left sofa seats are changed to right and vice versa. Other seat types remain the same.
 */
export var invertSeat = function (seat) {
    switch (seat.type) {
        case SeatType.SofaLeft:
            return __assign({}, seat, { type: SeatType.SofaRight });
        case SeatType.SofaRight:
            return __assign({}, seat, { type: SeatType.SofaLeft });
        default:
            return seat;
    }
};
//# sourceMappingURL=seat-utils.js.map