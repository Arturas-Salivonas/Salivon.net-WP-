import { toJS } from 'mobx';
import { ExamplePeople } from '../../../../../../example-data/browsing/person';
import { browsingStoreInstance } from '../../browsing-store';
import { getJsValue } from './../../../../utils/get-js-value';
import { Logger } from './../../../../utils/logger';
import { getPeopleByIds } from './../get-people-by-ids';
describe('getPeopleByIds', function () {
    var spyLoggerError = jest.spyOn(Logger, 'error');
    beforeAll(function () {
        browsingStoreInstance.setData({
            peopleById: new Map([
                [ExamplePeople.TomHanks.id, ExamplePeople.TomHanks],
                [ExamplePeople.RianJohnson.id, ExamplePeople.RianJohnson]
            ])
        });
    });
    it('returns all people by the given ids', function () {
        var result = getPeopleByIds([ExamplePeople.TomHanks.id, ExamplePeople.RianJohnson.id]);
        expect(getJsValue(result)).toEqual([ExamplePeople.TomHanks, ExamplePeople.RianJohnson]);
    });
    it('returns an empty array if an empty array is passed in', function () {
        var result = getPeopleByIds([]);
        expect(toJS(result)).toEqual([]);
    });
    it('logs an error if a person does not exist', function () {
        var result = getPeopleByIds(['UNKNOWN']);
        expect(toJS(result)).toEqual([]);
        expect(spyLoggerError).toHaveBeenCalled();
    });
});
//# sourceMappingURL=get-people-by-ids.test.js.map