import { Film } from '../../../../../types/browsing/film';
import { ShowtimeAttribute } from '../../../../../types/browsing/showtime-attribute';
import { ShowtimeQuery } from '../../../../../types/browsing/showtime-query';
import { Site } from '../../../../../types/browsing/site';
import { ScreeningDatesData } from '../../../../../types/stores/browsing-store/screening-dates-for-query';
import { ShowtimesData } from '../../../../../types/stores/browsing-store/showtimes-for-query';
import { BusinessDate } from './../../../../../types/browsing/business-date';
import { CensorRating } from './../../../../../types/browsing/censor-rating';
import { Genre } from './../../../../../types/browsing/genre';
import { Person } from './../../../../../types/browsing/person';
/**
 * Selector methods for the Browsing Store.
 */
export interface BrowsingStoreSelectors {
    getAllFilms: () => Film[] | undefined;
    getFilmById: (filmId: string) => Film | undefined;
    getFilmsForSite: (siteId: string) => Film[] | undefined;
    getShowtimeAttributeById: (id: string) => ShowtimeAttribute | undefined;
    getShowtimesForQueryOnBusinessDate: (query: ShowtimeQuery, businessDate: BusinessDate) => ShowtimesData;
    getSiteById: (siteId: string) => Site | undefined;
    getAllSites: () => Site[] | undefined;
    getSelectedSites: () => Site[];
    getUnselectedSites: () => Site[];
    hasMaximumSelectedSites: () => boolean;
    getCensorRatingById: (censorRatingId: string) => CensorRating | undefined;
    getGenresByIds: (genreIds: string[]) => Genre[];
    getPeopleByIds: (peopleIds: string[]) => Person[];
    getScreeningDatesForQuery: (query: ShowtimeQuery) => ScreeningDatesData;
}
export declare const browsingStoreSelectors: BrowsingStoreSelectors;
