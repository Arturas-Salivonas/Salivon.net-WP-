import { calculateSelectedSeatsCountForAreaCategory, calculateSelectedTicketsCountForAreaCategory } from '../../../services/order/utils/order-showtime-utils';
import { getPackageTicketTypeTicketCount, getTicketTypeTicketCount, isLoyaltyTicketType, isPackageTicketType } from '../../../services/order/utils/ticket-type-utils';
import { isVoucherTicket } from './../../../services/order/utils/order-ticket-utils';
import { configurationStoreInstance } from './../../configuration/configuration-store';
import { orderStoreInstance } from './../order-store';
export var AllowedTicketQuantityStatus;
(function (AllowedTicketQuantityStatus) {
    AllowedTicketQuantityStatus[AllowedTicketQuantityStatus["NotAllowed"] = 0] = "NotAllowed";
    AllowedTicketQuantityStatus[AllowedTicketQuantityStatus["Allowed"] = 1] = "Allowed";
    AllowedTicketQuantityStatus[AllowedTicketQuantityStatus["Invalid"] = 2] = "Invalid";
})(AllowedTicketQuantityStatus || (AllowedTicketQuantityStatus = {}));
/**
 * Returns the allowed ticket quantity of a given ticket.
 * Todo: This should possibly be moved out of the api directory as it is a UI concern only
 */
export function getAllowedTicketQuantity(showtimeId, ticket, ticketType) {
    var isSeatFirstOrdering = orderStoreInstance.selectors.isSeatFirstOrderingForShowtime(showtimeId);
    if (isSeatFirstOrdering)
        return getAllowedTicketQuantityForSeatFirstOrdering(showtimeId, ticket, ticketType);
    else
        return getAllowedTicketQuantityForTicketFirstOrdering(ticket, ticketType);
}
/**
 * In ticket-first ordering mode, the maximum quantity of a ticket is determined by the maximum number of tickets allowed in an order.
 */
function getAllowedTicketQuantityForTicketFirstOrdering(ticket, ticketType) {
    var maximumAllowedTicketsInAnOrder = configurationStoreInstance.data.ticketing.maximumAllowedTicketsInAnOrder;
    var selectedTicketCount = orderStoreInstance.selectors.getSelectedTicketsCount();
    var remainingAvailableQuantity = maximumAllowedTicketsInAnOrder - selectedTicketCount;
    var currentTicketQuantityForTicket = getTicketTypeTicketCount(ticketType) * ticket.quantity;
    var allowedQuantity = {
        status: AllowedTicketQuantityStatus.Allowed,
        quantity: remainingAvailableQuantity + currentTicketQuantityForTicket
    };
    return getAllowedQuantityForTicket(ticket, ticketType, allowedQuantity);
}
/**
 * In seat-first ordering mode, the maximum quantity of a ticket is determined by the seats selected.
 * The ticket is 'not allowed' if is is not valid for the selected seats.
 * The ticket is 'invalid' if the selected ticket quantity exceeds the number of selected seats.
 */
function getAllowedTicketQuantityForSeatFirstOrdering(showtimeId, ticket, ticketType) {
    var areaCategoryCode = ticketType.areaCategoryCode;
    var showtime = orderStoreInstance.selectors.getShowtimeById(showtimeId);
    var selectedSeatsCount = calculateSelectedSeatsCountForAreaCategory(showtime, areaCategoryCode);
    var selectedTicketsCount = calculateSelectedTicketsCountForAreaCategory(showtime, areaCategoryCode);
    var currentTicketQuantityForTicket = getTicketTypeTicketCount(ticketType) * ticket.quantity;
    var ticketHasBeenSelected = currentTicketQuantityForTicket > 0;
    var allowedQuantity;
    if (!ticketHasBeenSelected && selectedSeatsCount === 0) {
        // Ticket has not been selected and no seats for this ticket have been selected
        allowedQuantity = { status: AllowedTicketQuantityStatus.NotAllowed, quantity: 0 };
    }
    else if (ticketHasBeenSelected && selectedTicketsCount > selectedSeatsCount) {
        // Ticket has been selected and too many tickets have been selected for this area category        
        allowedQuantity = { status: AllowedTicketQuantityStatus.Invalid, quantity: currentTicketQuantityForTicket };
    }
    else {
        allowedQuantity = { status: AllowedTicketQuantityStatus.Allowed, quantity: selectedSeatsCount - selectedTicketsCount + currentTicketQuantityForTicket };
    }
    return getAllowedQuantityForTicket(ticket, ticketType, allowedQuantity);
}
function getAllowedQuantityForTicket(ticket, ticketType, allowedQuantity) {
    if (isLoyaltyTicketType(ticketType))
        return getAllowedQuantityForLoyaltyTicketType(ticketType, allowedQuantity);
    if (isPackageTicketType(ticketType))
        return getAllowedQuantityForPackageTicketType(ticketType, allowedQuantity);
    if (isVoucherTicket(ticket))
        return getAllowedQuantityForVoucherTicket(ticket, allowedQuantity);
    return allowedQuantity;
}
function getAllowedQuantityForPackageTicketType(ticketType, allowedQuantity) {
    return {
        status: allowedQuantity.status,
        quantity: Math.floor(allowedQuantity.quantity / getPackageTicketTypeTicketCount(ticketType))
    };
}
function getAllowedQuantityForLoyaltyTicketType(ticketType, allowedQuantity) {
    if (allowedQuantity.status !== AllowedTicketQuantityStatus.Allowed)
        return allowedQuantity;
    return {
        status: AllowedTicketQuantityStatus.Allowed,
        quantity: Math.min(allowedQuantity.quantity, ticketType.rewardDetails.quantityAvailable)
    };
}
function getAllowedQuantityForVoucherTicket(ticket, allowedQuantity) {
    if (allowedQuantity.status !== AllowedTicketQuantityStatus.Allowed)
        return allowedQuantity;
    if (!ticket.barcode)
        return { status: AllowedTicketQuantityStatus.NotAllowed, quantity: 0 };
    var maxVoucherRedemptions = orderStoreInstance.selectors.getVoucherRedemptionDetails(ticket.barcode).remaining + ticket.quantity;
    return {
        status: AllowedTicketQuantityStatus.Allowed,
        quantity: Math.min(allowedQuantity.quantity, maxVoucherRedemptions)
    };
}
//# sourceMappingURL=get-allowed-ticket-quantity.js.map