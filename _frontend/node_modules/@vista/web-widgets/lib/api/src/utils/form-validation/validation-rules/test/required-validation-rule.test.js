import { FormValidationError } from '../validation-error';
import { requiredValidationRule } from '../required-validation-rule';
describe('required validation rule', function () {
    var testProperty = 'test';
    describe('can validate', function () {
        var invalidData = [null, undefined];
        var _loop_1 = function (data) {
            it("and returns a required error for '" + data + "'", function () {
                var _a;
                var result = requiredValidationRule(testProperty)((_a = {}, _a[testProperty] = data, _a));
                expect(result).toBe(FormValidationError.Required);
            });
        };
        for (var _i = 0, invalidData_1 = invalidData; _i < invalidData_1.length; _i++) {
            var data = invalidData_1[_i];
            _loop_1(data);
        }
        var validData = [{}, 1, 0, -1, []];
        var _loop_2 = function (data) {
            it("and returns no error for '" + data + "'", function () {
                var _a;
                var result = requiredValidationRule(testProperty)((_a = {}, _a[testProperty] = data, _a));
                expect(result).toBeUndefined();
            });
        };
        for (var _a = 0, validData_1 = validData; _a < validData_1.length; _a++) {
            var data = validData_1[_a];
            _loop_2(data);
        }
        describe('strings', function () {
            var validStrings = ['a', 'test.email@vista.co', '123'];
            var _loop_3 = function (str) {
                it("and returns no error for non-empty string '" + str + "'", function () {
                    var _a;
                    var result = requiredValidationRule(testProperty)((_a = {}, _a[testProperty] = str, _a));
                    expect(result).toBeUndefined();
                });
            };
            for (var _i = 0, validStrings_1 = validStrings; _i < validStrings_1.length; _i++) {
                var str = validStrings_1[_i];
                _loop_3(str);
            }
            var invalidStrings = ['', ' ', ' \t\n'];
            var _loop_4 = function (str) {
                it("and returns a required error for empty string '" + str + "'", function () {
                    var _a;
                    var result = requiredValidationRule(testProperty)((_a = {}, _a[testProperty] = str, _a));
                    expect(result).toBe(FormValidationError.Required);
                });
            };
            for (var _a = 0, invalidStrings_1 = invalidStrings; _a < invalidStrings_1.length; _a++) {
                var str = invalidStrings_1[_a];
                _loop_4(str);
            }
        });
    });
});
//# sourceMappingURL=required-validation-rule.test.js.map