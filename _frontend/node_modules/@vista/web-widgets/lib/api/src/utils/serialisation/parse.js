import { mapValues } from './../map-values';
import { getTypeOfValue, ValueType } from './get-type-of-value';
import { isSerializerValueObject, SerializerValueType } from './serializer-value';
var deSerializeDate = function (value) {
    return new Date(value);
};
var deSerializeSet = function (valueArray) {
    return new Set(deSerializeArray(valueArray));
};
var deSerializeMap = function (valueArray) {
    return new Map(deSerializeArray(valueArray));
};
var deSerializeSerializerValueObject = function (object) {
    switch (object._type_) {
        case SerializerValueType.Date: return deSerializeDate(object._value_);
        case SerializerValueType.Set: return deSerializeSet(object._value_);
        case SerializerValueType.Map: return deSerializeMap(object._value_);
    }
    throw new Error("Serializer value type '" + object._type_ + "' unknown. Failed to parse value.");
};
var deSerializeObject = function (object) {
    if (isSerializerValueObject(object))
        return deSerializeSerializerValueObject(object);
    return mapValues(object, deSerializeValue);
};
var deSerializeArray = function (array) {
    return array.map(function (element) { return deSerializeValue(element); });
};
var deSerializeValue = function (value) {
    var type = getTypeOfValue(value);
    switch (type) {
        case ValueType.Object:
            return deSerializeObject(value);
        case ValueType.Array:
            return deSerializeArray(value);
        default:
            return value;
    }
};
/**
 * De-serializes a stringified value back to it's original type.
 */
export var parse = function (value) {
    if (!value)
        return value; // null, undefined
    var parsedValue;
    try {
        parsedValue = JSON.parse(value);
    }
    catch (e) {
        // If we can't parse, it's probably because it isn't an object
        parsedValue = value;
    }
    return deSerializeValue(parsedValue);
};
//# sourceMappingURL=parse.js.map