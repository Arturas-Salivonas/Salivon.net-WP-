import { observable } from 'mobx';
/**
 * Used within a reduce function for an
 * observable array to flatten a 2d array, e.g.:
 * ```
 *     const allSeats = area.rows
 *      .map(x => x.seats)
 *      .reduce(flattenObservableArray, observable.array([]));
 * ```
 */
export function flattenObservableArray(acc, next) {
    return observable.array(acc.concat(next));
}
/**
 * Flattens a 2d array into a 1d array, when used in a
 * reduce function, e.g:
 * `[[1, 2], [3, 4].reduce(flattenArray, [])`
 * produces:
 * `[1, 2, 3, 4]`
 */
export function flattenArray(acc, next) {
    return acc.concat(next);
}
export function compactMap(sourceArray, callbackfn) {
    var mapped = sourceArray.reduce(function (accumulator, currentValue, index, array) {
        var mappedValue = callbackfn(currentValue, index, array);
        if (mappedValue !== undefined && mappedValue !== null)
            accumulator.push(mappedValue);
        return accumulator;
    }, []);
    return mapped;
}
// TODO: This is a duplicate function. Remove
export function arrayToMap(array) {
    var result = new Map();
    for (var _i = 0, array_1 = array; _i < array_1.length; _i++) {
        var item = array_1[_i];
        result.set(item.id, item);
    }
    return result;
}
//# sourceMappingURL=array-utils.js.map