import { IObservableArray } from 'mobx';
/**
 * Used within a reduce function for an
 * observable array to flatten a 2d array, e.g.:
 * ```
 *     const allSeats = area.rows
 *      .map(x => x.seats)
 *      .reduce(flattenObservableArray, observable.array([]));
 * ```
 */
export declare function flattenObservableArray<T>(acc: T[], next: T[]): IObservableArray<T>;
/**
 * Flattens a 2d array into a 1d array, when used in a
 * reduce function, e.g:
 * `[[1, 2], [3, 4].reduce(flattenArray, [])`
 * produces:
 * `[1, 2, 3, 4]`
 */
export declare function flattenArray<T>(acc: T[], next: T[]): T[];
export declare function compactMap<T, U>(sourceArray: T[], callbackfn: (value: any, index: any, array: any) => U | null | undefined): U[];
export declare function arrayToMap<TKey, TValue extends {
    id: TKey;
}>(array: TValue[]): Map<TKey, TValue>;
