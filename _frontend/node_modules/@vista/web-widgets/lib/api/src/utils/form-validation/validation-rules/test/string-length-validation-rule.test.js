import { FormValidationError } from '../validation-error';
import { stringLengthValidationRule } from '../string-length-validation-rule';
describe('string length validation rule', function () {
    var testProperty = 'test';
    describe('can validate strings', function () {
        var minLength = 3;
        var maxLength = 8;
        describe("using minLength " + minLength + " and maxLength " + maxLength, function () {
            var validText = ['abc', 'abcde', 'abcdefgh'];
            var _loop_1 = function (text) {
                it("and returns no error for text '" + text + "'", function () {
                    var _a;
                    var result = stringLengthValidationRule(testProperty, minLength, maxLength)((_a = {}, _a[testProperty] = text, _a));
                    expect(result).toBeUndefined();
                });
            };
            for (var _i = 0, validText_1 = validText; _i < validText_1.length; _i++) {
                var text = validText_1[_i];
                _loop_1(text);
            }
            var invalidText = ['', 'ab', 'abcdefghi', '   ab'];
            var _loop_2 = function (text) {
                it("and returns length error for text '" + text + "'", function () {
                    var _a;
                    var result = stringLengthValidationRule(testProperty, minLength, maxLength)((_a = {}, _a[testProperty] = text, _a));
                    expect(result).toBe(FormValidationError.Length);
                });
            };
            for (var _a = 0, invalidText_1 = invalidText; _a < invalidText_1.length; _a++) {
                var text = invalidText_1[_a];
                _loop_2(text);
            }
        });
        var minLengthZero = 0;
        describe('using minLength of zero', function () {
            var validText = ['', 'a', 'abcdefgh'];
            var _loop_3 = function (text) {
                it("and returns no error for text '" + text + "'", function () {
                    var _a;
                    var result = stringLengthValidationRule(testProperty, minLengthZero, maxLength)((_a = {}, _a[testProperty] = text, _a));
                    expect(result).toBeUndefined();
                });
            };
            for (var _i = 0, validText_2 = validText; _i < validText_2.length; _i++) {
                var text = validText_2[_i];
                _loop_3(text);
            }
            var invalidText = 'abcdefghi';
            it("and returns length error for text '" + invalidText + "'", function () {
                var _a;
                var result = stringLengthValidationRule(testProperty, minLength, maxLength)((_a = {}, _a[testProperty] = invalidText, _a));
                expect(result).toBe(FormValidationError.Length);
            });
        });
    });
    describe('returns format error', function () {
        var invalidData = [{}, null, undefined, 3, -1];
        var _loop_4 = function (data) {
            it("for non-string '" + data + "'", function () {
                var _a;
                var result = stringLengthValidationRule(testProperty, Number.NEGATIVE_INFINITY, Number.POSITIVE_INFINITY)((_a = {}, _a[testProperty] = data, _a));
                expect(result).toBe(FormValidationError.Length);
            });
        };
        for (var _i = 0, invalidData_1 = invalidData; _i < invalidData_1.length; _i++) {
            var data = invalidData_1[_i];
            _loop_4(data);
        }
    });
});
//# sourceMappingURL=string-length-validation-rule.test.js.map