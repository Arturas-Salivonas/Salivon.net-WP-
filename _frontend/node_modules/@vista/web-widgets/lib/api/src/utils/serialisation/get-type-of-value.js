import { isObservableArray, isObservableMap } from 'mobx';
export var ValueType;
(function (ValueType) {
    ValueType[ValueType["Undefined"] = 0] = "Undefined";
    ValueType[ValueType["Null"] = 1] = "Null";
    ValueType[ValueType["String"] = 2] = "String";
    ValueType[ValueType["Array"] = 3] = "Array";
    ValueType[ValueType["Object"] = 4] = "Object";
    ValueType[ValueType["Boolean"] = 5] = "Boolean";
    ValueType[ValueType["Number"] = 6] = "Number";
    ValueType[ValueType["Set"] = 7] = "Set";
    ValueType[ValueType["Map"] = 8] = "Map";
    ValueType[ValueType["Date"] = 9] = "Date";
    ValueType[ValueType["Unsupported"] = 10] = "Unsupported";
})(ValueType || (ValueType = {}));
/**
 * Returns the type of a given value
 */
export var getTypeOfValue = function (value) {
    if (value === null)
        return ValueType.Null;
    if (Array.isArray(value) || isObservableArray(value))
        return ValueType.Array;
    if (value instanceof Date)
        return ValueType.Date;
    if (value instanceof Set)
        return ValueType.Set;
    if (value instanceof Map || isObservableMap(value))
        return ValueType.Map;
    switch (typeof value) {
        case 'undefined': return ValueType.Undefined;
        case 'string': return ValueType.String;
        case 'boolean': return ValueType.Boolean;
        case 'number': return ValueType.Number;
        case 'object': return ValueType.Object;
        default: return ValueType.Unsupported;
    }
};
//# sourceMappingURL=get-type-of-value.js.map