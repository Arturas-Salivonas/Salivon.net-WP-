export declare type TypeString = 'string' | 'number' | 'boolean' | 'symbol' | 'undefined' | 'object' | 'function' | 'array';
export declare class Validator {
    private _ofType;
    private _allowNull;
    private _allowUndefined;
    private _min;
    private _max;
    private _minLength;
    private _maxLength;
    private _validValues;
    /**
     * Enforces that the value is of a given type.
     */
    ofType(type: TypeString): Validator;
    /**
     * Enforces that the value is within a constrained set of values.
     */
    includedInValues(validValues: any[]): Validator;
    /**
     * Allow the value to be null.
     */
    allowNull(): Validator;
    /**
     * Allow the value to be undefined.
     */
    allowUndefined(): Validator;
    /**
     * Enforces that the number is no smaller than a given minimum value.
     * @param min The minimum value that the number can be.
     */
    min(min: number): this;
    /**
     * Enforces that the number is no greater than a given maximum value.
     * @param max The maximum value that the number can be.
     */
    max(max: number): this;
    /**
     * Enforces that the value's length is no shorter than a given minimum length.
     * @param minLength The minimum length that the value can be.
     */
    minLength(minLength: number): this;
    /**
     * Enforces that the value's length is no longer than a given maximum length.
     * @param maxLength The maximum length that the value can be.
     */
    maxLength(maxLength: number): this;
    /**
     * Validates a given value and logs appropriate warnings.
     * @param value The value to be validated.
     * @param logLabel The label to be used when logging warnings.
     */
    validate(value: any, logLabel: string): boolean;
    private validateType;
    private validateMin;
    private validateMax;
    private hasLength;
    private validateMinLength;
    private validateMaxLength;
    private validateValues;
    private validateValue;
}
