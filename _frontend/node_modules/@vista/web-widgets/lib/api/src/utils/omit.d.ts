/**
 * Exclude type from T
 *
 * Example
 * ```
 * interface Test {
 *   a: string;
 *   b: number;
 *   c: boolean;
 * }
 *
 * Omit a single property:
 * // Equivalent to: { b: number, c: boolean }
 * type OmitA = Omit<Test, 'a'>;
 *
 * Omit multiple properties:
 * // Equivalent to: { c: boolean }
 * type OmitAB = Omit<Test, 'a'|'b'>;
 * ```
 */
export declare type Omit<T, K extends keyof T> = Pick<T, Exclude<keyof T, K>>;
