import { regexFormatValidationRule } from './validation-rules/regex-format-validation-rule';
import { emailFormatValidationRule } from './validation-rules/email-format-validation-rule';
import { FormFieldValidator } from './form-field-validator';
import { stringLengthValidationRule } from './validation-rules/string-length-validation-rule';
function isTextFieldValidationConfig(config) {
    return config.format !== undefined;
}
function getFormatValidationRule(key, _a) {
    var format = _a.format;
    if (format instanceof RegExp) {
        return regexFormatValidationRule(key, format);
    }
    else {
        switch (format) {
            case 'email':
                return emailFormatValidationRule(key);
            default:
                return undefined;
        }
    }
}
function getStringLengthValidationRule(key, _a) {
    var minLength = _a.minLength, maxLength = _a.maxLength;
    var hasMinLength = minLength > 0;
    var hasMaxLength = maxLength > 0;
    if (!(hasMinLength || hasMaxLength)) {
        return undefined;
    }
    return stringLengthValidationRule(key, hasMinLength ? minLength : 0, hasMaxLength ? maxLength : Infinity);
}
export function getValidatorForConfig(key, config) {
    var validator = new FormFieldValidator(key, config.required);
    if (isTextFieldValidationConfig(config)) {
        var lengthRule = getStringLengthValidationRule(key, config);
        if (lengthRule !== undefined) {
            validator.addValidationRule(lengthRule);
        }
        var formatRule = getFormatValidationRule(key, config);
        if (formatRule !== undefined) {
            validator.addValidationRule(formatRule);
        }
    }
    if (typeof config.customValidation === 'function') {
        validator.addValidationRule(config.customValidation);
    }
    return validator;
}
//# sourceMappingURL=get-validator-for-config.js.map