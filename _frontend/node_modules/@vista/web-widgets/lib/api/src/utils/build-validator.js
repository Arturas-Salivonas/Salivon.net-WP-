// import { NestedPartial } from './../../../types/nested-partial';
// import { Validator } from './validator';
// import { isUndefined, isNullOrUndefined } from 'util';
// type Primitives = string | number | boolean | null | undefined;
// type ValidatorConfig<T> = {
//     [P in keyof T]: T[P] extends Primitives | Array<any>
//     ? Validator
//     : ValidatorConfig<T[P]>
// };
// const validate = <T extends {}>(validatorName: string, validationConfig: ValidatorConfig<T>, defaultConfig: T, config: NestedPartial<T> | undefined): T => {
//     if (isUndefined(config)) return defaultConfig;
//     const validatedConfig = Object.keys(defaultConfig).reduce((acc, key) => {
//         const validator = validationConfig[key];
//         const defaultValue = defaultConfig[key];
//         const userProvidedValue = config[key];
//         let validatedObject = defaultValue;
//         if (!isNullOrUndefined(userProvidedValue)) {
//             if (typeof userProvidedValue === 'object') {
//                 validatedObject = validate(validatorName, validator, defaultValue, userProvidedValue);
//             }
//             const validationLogLabel = `validating ${key} of ${validatorName}`;
//             validatedObject = (validator as Validator).validate(userProvidedValue, validationLogLabel)
//                 ? userProvidedValue
//                 : defaultValue;
//         }
//         acc[key] = validatedObject;
//         return acc;
//     }, {} as T);
//     return validatedConfig;
// };
// // usage
// interface ExampleInputConfig {
//     numberConfig: number;
//     booleanConfig: boolean;
//     stringConfig: string;
//     arrayConfig: string[];
//     functionConfig: () => any;
//     objectConfig: {
//         numberConfig: number;
//         booleanConfig: boolean;
//         stringConfig: string;
//     };
// }
// const validators: ValidatorConfig<ExampleInputConfig> = {
//     numberConfig: new Validator(),
//     booleanConfig: new Validator(),
//     stringConfig: new Validator,
//     functionConfig: new Validator,
//     objectConfig: {
//         numberConfig: new Validator(),
//         booleanConfig: new Validator(),
//         stringConfig: new Validator,
//     },
//     arrayConfig: new Validator()
// };
// const defaultValues: ExampleInputConfig = {
//     numberConfig: 1,
//     booleanConfig: true,
//     stringConfig: 'hello',
//     functionConfig: () => 'test',
//     objectConfig: {
//         numberConfig: 1,
//         booleanConfig: true,
//         stringConfig: 'hello',
//     },
//     arrayConfig: ['hello', 'world']
// };
// const config: ExampleInputConfig = validate('ExampleInputConfig', validators, defaultValues, {});
//# sourceMappingURL=build-validator.js.map