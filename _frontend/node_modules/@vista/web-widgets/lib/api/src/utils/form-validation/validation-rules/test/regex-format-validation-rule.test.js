import { FormValidationError } from '../validation-error';
import { regexFormatValidationRule } from '../regex-format-validation-rule';
describe('regex format validation rule', function () {
    var testProperty = 'test';
    var anyStrRegex = /.*/;
    var abcRegex = /^[abc]+$/;
    describe('can validate strings', function () {
        var validAbcText = ['abc', 'bac', 'abcabc'];
        var invalidAbcText = ['', 'abcd', 'd'];
        var _loop_1 = function (text) {
            it("and validates '" + text + "' as valid for abcRegex", function () {
                var _a;
                var result = regexFormatValidationRule(testProperty, abcRegex)((_a = {}, _a[testProperty] = text, _a));
                expect(result).toBeUndefined();
            });
        };
        for (var _i = 0, validAbcText_1 = validAbcText; _i < validAbcText_1.length; _i++) {
            var text = validAbcText_1[_i];
            _loop_1(text);
        }
        var _loop_2 = function (text) {
            it("and validates '" + text + "' as invalid for abcRegex", function () {
                var _a;
                var result = regexFormatValidationRule(testProperty, abcRegex)((_a = {}, _a[testProperty] = text, _a));
                expect(result).toBe(FormValidationError.Format);
            });
        };
        for (var _a = 0, invalidAbcText_1 = invalidAbcText; _a < invalidAbcText_1.length; _a++) {
            var text = invalidAbcText_1[_a];
            _loop_2(text);
        }
        var _loop_3 = function (text) {
            it("and validates '" + text + "' as valid for anyStrRegex regex", function () {
                var _a;
                var result = regexFormatValidationRule(testProperty, anyStrRegex)((_a = {}, _a[testProperty] = text, _a));
                expect(result).toBeUndefined();
            });
        };
        for (var _b = 0, invalidAbcText_2 = invalidAbcText; _b < invalidAbcText_2.length; _b++) {
            var text = invalidAbcText_2[_b];
            _loop_3(text);
        }
    });
    describe('returns format error', function () {
        var invalidData = [{}, null, undefined, 3, -1];
        var _loop_4 = function (data) {
            it("for non-string '" + data + "'", function () {
                var _a;
                var result = regexFormatValidationRule(testProperty, anyStrRegex)((_a = {}, _a[testProperty] = data, _a));
                expect(result).toBe(FormValidationError.Format);
            });
        };
        for (var _i = 0, invalidData_1 = invalidData; _i < invalidData_1.length; _i++) {
            var data = invalidData_1[_i];
            _loop_4(data);
        }
    });
});
//# sourceMappingURL=regex-format-validation-rule.test.js.map