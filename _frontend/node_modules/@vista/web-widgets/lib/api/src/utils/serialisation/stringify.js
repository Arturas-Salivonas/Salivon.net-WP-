import { mapValues } from './../map-values';
import { getTypeOfValue, ValueType } from './get-type-of-value';
import { SerializerValueType } from './serializer-value';
var serializeObject = function (object) {
    return mapValues(object, serializeValue);
};
var serializeArray = function (array) {
    return array.map(function (element) { return serializeValue(element); });
};
var serializeDate = function (date) {
    return {
        '_type_': SerializerValueType.Date,
        '_value_': date.toISOString()
    };
};
var serializeSet = function (set) {
    return {
        '_type_': SerializerValueType.Set,
        '_value_': serializeArray(Array.from(set))
    };
};
var serializeMap = function (map) {
    return {
        '_type_': SerializerValueType.Map,
        '_value_': serializeArray(Array.from(map))
    };
};
var serializeValue = function (value) {
    var type = getTypeOfValue(value);
    switch (type) {
        case ValueType.Object:
            return serializeObject(value);
        case ValueType.Array:
            return serializeArray(value);
        case ValueType.Date:
            return serializeDate(value);
        case ValueType.Set:
            return serializeSet(value);
        case ValueType.Map:
            return serializeMap(value);
        case ValueType.Unsupported:
            throw new Error("Unsupported value " + value + " could not be serialized");
        default:
            return value;
    }
};
/**
 * Serializes a given value to a string that can be de-serialized back to it's original type.
 */
export var stringify = function (value) {
    if (typeof value === 'string')
        return value; // strings do not need to be stringified
    var serializedValue = serializeValue(value); // some types need to be serialized before stringifying
    return JSON.stringify(serializedValue);
};
//# sourceMappingURL=stringify.js.map