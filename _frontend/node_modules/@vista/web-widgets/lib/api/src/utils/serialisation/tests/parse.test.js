import { parse } from '../parse';
describe('parse', function () {
    describe('string', function () {
        it('de-serializes a string correctly', function () {
            var result = parse('hello world');
            expect(result).toEqual('hello world');
        });
    });
    describe('array', function () {
        it('de-serializes a number array correctly', function () {
            var result = parse('[1,2,3]');
            expect(result).toEqual([1, 2, 3]);
        });
        it('de-serializes a string array correctly', function () {
            var result = parse('["hello","world"]');
            expect(result).toEqual(['hello', 'world']);
        });
    });
    describe('number', function () {
        it('de-serializes a positive integer correctly', function () {
            var result = parse('1');
            expect(result).toEqual(1);
        });
        it('de-serializes a negative integer correctly', function () {
            var result = parse('-1');
            expect(result).toEqual(-1);
        });
        it('de-serializes a float correctly', function () {
            var result = parse('11.05');
            expect(result).toEqual(11.05);
        });
    });
    describe('boolean', function () {
        it('de-serializes true correctly', function () {
            var result = parse('true');
            expect(result).toEqual(true);
        });
        it('de-serializes false correctly', function () {
            var result = parse('false');
            expect(result).toEqual(false);
        });
    });
    describe('undefined and null', function () {
        it('de-serializes undefined correctly', function () {
            var result = parse(undefined);
            expect(result).toEqual(undefined);
        });
        it('de-serializes null correctly', function () {
            var result = parse('null');
            expect(result).toEqual(null);
        });
    });
    describe('object', function () {
        it('de-serializes an empty object correctly', function () {
            var result = parse('{}');
            expect(result).toEqual({});
        });
        it('de-serializes a basic object correctly', function () {
            var result = parse('{"1":2,"3":4}');
            expect(result).toEqual({
                1: 2,
                3: 4
            });
        });
    });
    describe('date', function () {
        it('de-serializes a date correctly', function () {
            var result = parse('{"_type_":"Date","_value_":"1995-12-16T14:24:00.000Z"}');
            expect(result).toEqual(new Date('1995-12-17T03:24:00'));
        });
    });
    describe('set', function () {
        it('de-serializes a set of numbers correctly', function () {
            var result = parse('{"_type_":"Set","_value_":[1,2,3]}');
            expect(result).toEqual(new Set([1, 2, 3]));
        });
        it('de-serializes a set with a date correctly', function () {
            var result = parse('{"_type_":"Set","_value_":[{"_type_":"Date","_value_":"1995-12-16T14:24:00.000Z"}]}');
            expect(result).toEqual(new Set([new Date('1995-12-17T03:24:00')]));
        });
        it('de-serializes a nested set correctly', function () {
            var result = parse('{"_type_":"Set","_value_":[{"_type_":"Set","_value_":[1,2,3]}]}');
            expect(result).toEqual(new Set([new Set([1, 2, 3])]));
        });
    });
    describe('map', function () {
        it('de-serializes a basic map correctly', function () {
            var result = parse('{"_type_":"Map","_value_":[["1",1],["2",2],["3",3]]}');
            expect(result).toEqual(new Map([['1', 1], ['2', 2], ['3', 3]]));
        });
        it('de-serializes a map with a date correctly', function () {
            var result = parse('{"_type_":"Map","_value_":[["1",{"_type_":"Date","_value_":"1995-12-16T14:24:00.000Z"}]]}');
            expect(result).toEqual(new Map([['1', new Date('1995-12-17T03:24:00')]]));
        });
        it('de-serializes a nested map correctly', function () {
            var result = parse('{"_type_":"Map","_value_":[["1",{"_type_":"Map","_value_":[["2",3]]}]]}');
            expect(result).toEqual(new Map([['1', new Map([['2', 3]])]]));
        });
    });
});
//# sourceMappingURL=parse.test.js.map