import { stringify } from '../stringify';
describe('stringify', function () {
    describe('string', function () {
        it('returns the value of a string unaltered', function () {
            var result = stringify('hello world');
            expect(result).toEqual('hello world');
        });
    });
    describe('array', function () {
        it('serializes a number array correctly', function () {
            var result = stringify([1, 2, 3]);
            expect(result).toEqual('[1,2,3]');
        });
        it('serializes a string array correctly', function () {
            var result = stringify(['hello', 'world']);
            expect(result).toEqual('["hello","world"]');
        });
    });
    describe('number', function () {
        it('serializes a positive integer correctly', function () {
            var result = stringify(1);
            expect(result).toEqual('1');
        });
        it('serializes a negative integer correctly', function () {
            var result = stringify(-1);
            expect(result).toEqual('-1');
        });
        it('serializes a float correctly', function () {
            var result = stringify(11.05);
            expect(result).toEqual('11.05');
        });
    });
    describe('boolean', function () {
        it('serializes true correctly', function () {
            var result = stringify(true);
            expect(result).toEqual('true');
        });
        it('serializes false correctly', function () {
            var result = stringify(false);
            expect(result).toEqual('false');
        });
    });
    describe('undefined and null', function () {
        it('serializes undefined correctly', function () {
            var result = stringify(undefined);
            expect(result).toEqual(undefined);
        });
        it('serializes null correctly', function () {
            var result = stringify(null);
            expect(result).toEqual('null');
        });
    });
    describe('object', function () {
        it('serializes an empty object correctly', function () {
            var result = stringify({});
            expect(result).toEqual('{}');
        });
        it('serializes a basic object correctly', function () {
            var result = stringify({
                1: 2,
                3: 4
            });
            expect(result).toEqual('{"1":2,"3":4}');
        });
    });
    describe('date', function () {
        it('serializes a date correctly', function () {
            var result = stringify(new Date('1995-12-17T03:24:00'));
            expect(result).toEqual('{"_type_":"Date","_value_":"1995-12-16T14:24:00.000Z"}');
        });
    });
    describe('set', function () {
        it('serializes a set of numbers correctly', function () {
            var result = stringify(new Set([1, 2, 3]));
            expect(result).toEqual('{"_type_":"Set","_value_":[1,2,3]}');
        });
        it('serializes a set with a date correctly', function () {
            var result = stringify(new Set([new Date('1995-12-17T03:24:00')]));
            expect(result).toEqual('{"_type_":"Set","_value_":[{"_type_":"Date","_value_":"1995-12-16T14:24:00.000Z"}]}');
        });
        it('serializes a nested set correctly', function () {
            var result = stringify(new Set([new Set([1, 2, 3])]));
            expect(result).toEqual('{"_type_":"Set","_value_":[{"_type_":"Set","_value_":[1,2,3]}]}');
        });
    });
    describe('map', function () {
        it('serializes a basic map correctly', function () {
            var result = stringify(new Map([['1', 1], ['2', 2], ['3', 3]]));
            expect(result).toEqual('{"_type_":"Map","_value_":[["1",1],["2",2],["3",3]]}');
        });
        it('serializes a map with a date correctly', function () {
            var result = stringify(new Map([['1', new Date('1995-12-17T03:24:00')]]));
            expect(result).toEqual('{"_type_":"Map","_value_":[["1",{"_type_":"Date","_value_":"1995-12-16T14:24:00.000Z"}]]}');
        });
        it('serializes a nested map correctly', function () {
            var result = stringify(new Map([['1', new Map([['2', 3]])]]));
            expect(result).toEqual('{"_type_":"Map","_value_":[["1",{"_type_":"Map","_value_":[["2",3]]}]]}');
        });
    });
});
//# sourceMappingURL=stringify.test.js.map