var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { FormValidator } from '../form-validator';
import * as getValidatorForConfig from '../get-validator-for-config';
import { Logger } from '../../logger';
var TestValidator = /** @class */ (function (_super) {
    __extends(TestValidator, _super);
    function TestValidator() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.dataToReturn = { a: 'testA', b: 'testB' };
        return _this;
    }
    TestValidator.prototype.getData = function () {
        return this.dataToReturn;
    };
    return TestValidator;
}(FormValidator));
describe('FormValidator', function () {
    var _a;
    var getValidatorSpy = jest.spyOn(getValidatorForConfig, 'getValidatorForConfig');
    var paramOne = 'a';
    var paramTwo = 'b';
    var config = (_a = {},
        _a[paramOne] = {
            format: 'testA',
        },
        _a[paramTwo] = {
            format: 'testB',
        },
        _a);
    var errorText = 'invalid';
    beforeEach(function () {
        getValidatorSpy.mockClear();
    });
    describe('constructor', function () {
        it('calls getValidatorForConfig for each field in the config', function () {
            // tslint:disable-next-line:no-unused-expression
            new TestValidator(config);
            expect(getValidatorSpy).toHaveBeenCalledTimes(2);
            expect(getValidatorSpy).toHaveBeenNthCalledWith(1, paramOne, config[paramOne]);
            expect(getValidatorSpy).toHaveBeenNthCalledWith(2, paramTwo, config[paramTwo]);
        });
    });
    describe('validateField', function () {
        var loggerWarnSpy;
        beforeAll(function () {
            loggerWarnSpy = jest.spyOn(Logger, 'warn');
        });
        beforeEach(function () {
            loggerWarnSpy.mockClear();
        });
        it('can validate a field', function () { return __awaiter(_this, void 0, void 0, function () {
            var validatorReturnValue, validator, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(1);
                        validatorReturnValue = true;
                        getValidatorSpy.mockReturnValue({
                            validate: function () { return Promise.resolve(validatorReturnValue); },
                        });
                        validator = new TestValidator(config);
                        return [4 /*yield*/, validator.validateField(paramOne)];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe(validatorReturnValue);
                        return [2 /*return*/];
                }
            });
        }); });
        it('logs a warning when and returns undefined for an unknown key', function () { return __awaiter(_this, void 0, void 0, function () {
            var validator, result;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(2);
                        validator = new TestValidator(config);
                        return [4 /*yield*/, validator.validateField('c')];
                    case 1:
                        result = _a.sent();
                        expect(result).toBe(undefined);
                        expect(loggerWarnSpy).toBeCalledTimes(1);
                        return [2 /*return*/];
                }
            });
        }); });
        describe('can validate data', function () {
            var validData = { a: 't', b: 't' };
            beforeAll(function () {
                getValidatorSpy.mockReturnValue({
                    validate: function (dataToValidate) { return dataToValidate === validData ? undefined : errorText; },
                });
            });
            it('and pass', function () { return __awaiter(_this, void 0, void 0, function () {
                var validator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(1);
                            validator = new TestValidator(config);
                            validator.dataToReturn = validData;
                            return [4 /*yield*/, validator.validateField(paramOne)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBeUndefined();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('and fail', function () { return __awaiter(_this, void 0, void 0, function () {
                var validator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(1);
                            validator = new TestValidator(config);
                            return [4 /*yield*/, validator.validateField(paramOne)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBe(errorText);
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
    describe('validateForm', function () {
        var _a, _b, _c, _d;
        var validationResult;
        beforeAll(function () {
            getValidatorSpy.mockImplementation(function (key) { return ({
                validate: function () { return validationResult[key]; },
            }); });
        });
        var testCases = [
            {
                name: "an error in '" + paramOne + "'",
                validationResult: (_a = {}, _a[paramOne] = undefined, _a[paramTwo] = errorText, _a),
                expectedResult: { isValid: false, validationErrors: new Map([[paramTwo, errorText]]) }
            },
            {
                name: "an error in '" + paramTwo + "'",
                validationResult: (_b = {}, _b[paramOne] = errorText, _b[paramTwo] = undefined, _b),
                expectedResult: { isValid: false, validationErrors: new Map([[paramOne, errorText]]) }
            },
            {
                name: "errors in '" + paramOne + "' and '" + paramTwo + "'",
                validationResult: (_c = {}, _c[paramOne] = errorText, _c[paramTwo] = errorText, _c),
                expectedResult: { isValid: false, validationErrors: new Map([[paramOne, errorText], [paramTwo, errorText]]) }
            },
            {
                name: "no errors",
                validationResult: (_d = {}, _d[paramOne] = undefined, _d[paramTwo] = undefined, _d),
                expectedResult: { isValid: true, validationErrors: new Map() }
            },
        ];
        var _loop_1 = function (testCase) {
            it("validates correctly with " + name, function () { return __awaiter(_this, void 0, void 0, function () {
                var validator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(1);
                            validationResult = testCase.validationResult;
                            validator = new TestValidator(config);
                            return [4 /*yield*/, validator.validateForm()];
                        case 1:
                            result = _a.sent();
                            expect(result).toEqual(testCase.expectedResult);
                            return [2 /*return*/];
                    }
                });
            }); });
        };
        for (var _i = 0, testCases_1 = testCases; _i < testCases_1.length; _i++) {
            var testCase = testCases_1[_i];
            _loop_1(testCase);
        }
    });
});
//# sourceMappingURL=form-validator.test.js.map