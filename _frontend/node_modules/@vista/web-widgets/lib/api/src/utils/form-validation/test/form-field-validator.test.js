var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import * as requiredValidationRule from '../validation-rules/required-validation-rule';
import { FormFieldValidator } from '../form-field-validator';
describe('FormFieldValidator', function () {
    var _a;
    var requiredValidationRuleSpy = jest.spyOn(requiredValidationRule, 'requiredValidationRule');
    var mockRequiredValidation = jest.fn();
    requiredValidationRuleSpy.mockReturnValue(mockRequiredValidation);
    var testKey = 'a';
    var testObject = (_a = {}, _a[testKey] = 'abc', _a);
    var testError = 'testError';
    beforeEach(function () {
        requiredValidationRuleSpy.mockClear();
        mockRequiredValidation.mockClear();
    });
    describe('addValidationRule', function () {
        it('validates an added validation rule', function () { return __awaiter(_this, void 0, void 0, function () {
            var formFieldValidator, mockValidationRule;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(1);
                        formFieldValidator = new FormFieldValidator(testKey, false);
                        mockValidationRule = jest.fn();
                        formFieldValidator.addValidationRule(mockValidationRule);
                        return [4 /*yield*/, formFieldValidator.validate(testObject)];
                    case 1:
                        _a.sent();
                        expect(mockValidationRule).toHaveBeenCalledWith(testObject);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('validate', function () {
        describe('checks the required rule', function () {
            it('and returns undefined if valid and no other rules', function () { return __awaiter(_this, void 0, void 0, function () {
                var formFieldValidator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(3);
                            formFieldValidator = new FormFieldValidator(testKey, true);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBeUndefined();
                            expect(mockRequiredValidation).toHaveBeenCalledWith(testObject);
                            expect(requiredValidationRuleSpy).toHaveBeenCalledWith(testKey);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('and returns undefined if invalid but not required', function () { return __awaiter(_this, void 0, void 0, function () {
                var formFieldValidator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(2);
                            mockRequiredValidation.mockReturnValueOnce(testError);
                            formFieldValidator = new FormFieldValidator(testKey, false);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBe(undefined);
                            expect(mockRequiredValidation).toHaveBeenCalledWith(testObject);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('and returns the error if invalid and required', function () { return __awaiter(_this, void 0, void 0, function () {
                var formFieldValidator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(2);
                            mockRequiredValidation.mockReturnValueOnce(testError);
                            formFieldValidator = new FormFieldValidator(testKey, true);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBe(testError);
                            expect(mockRequiredValidation).toHaveBeenCalledWith(testObject);
                            return [2 /*return*/];
                    }
                });
            }); });
            it("doesn't check other rules if invalid", function () { return __awaiter(_this, void 0, void 0, function () {
                var mockRule, formFieldValidator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(2);
                            mockRule = jest.fn();
                            formFieldValidator = new FormFieldValidator(testKey, false);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBeUndefined();
                            expect(mockRule).not.toHaveBeenCalled();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
        describe('checks added rules', function () {
            it('and returns the first error', function () { return __awaiter(_this, void 0, void 0, function () {
                var firstError, secondError, mockRuleOne, mockRuleTwo, formFieldValidator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(1);
                            firstError = 'errorOne';
                            secondError = 'errorTwo';
                            mockRuleOne = jest.fn().mockReturnValue(firstError);
                            mockRuleTwo = jest.fn().mockReturnValue(secondError);
                            formFieldValidator = new FormFieldValidator(testKey, true);
                            [mockRuleOne, mockRuleTwo].forEach(formFieldValidator.addValidationRule, formFieldValidator);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBe(firstError);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('and checks all rules if none return an error', function () { return __awaiter(_this, void 0, void 0, function () {
                var mockRule, numberOfRules, formFieldValidator, i, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(2);
                            mockRule = jest.fn();
                            numberOfRules = 5;
                            formFieldValidator = new FormFieldValidator(testKey, true);
                            i = 0;
                            while (i++ < numberOfRules)
                                formFieldValidator.addValidationRule(mockRule);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBeUndefined();
                            expect(mockRule).toHaveBeenCalledTimes(numberOfRules);
                            return [2 /*return*/];
                    }
                });
            }); });
            it('and checks rules in the order added', function () { return __awaiter(_this, void 0, void 0, function () {
                var mockRuleOne, mockRuleTwo, mockRuleThree, formFieldValidator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(4);
                            mockRuleOne = jest.fn();
                            mockRuleTwo = jest.fn();
                            mockRuleThree = jest.fn();
                            formFieldValidator = new FormFieldValidator(testKey, true);
                            [mockRuleOne, mockRuleTwo, mockRuleThree].forEach(formFieldValidator.addValidationRule, formFieldValidator);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBeUndefined();
                            expect(mockRequiredValidation.mock.invocationCallOrder[0]).toBeLessThan(mockRuleOne.mock.invocationCallOrder[0]);
                            expect(mockRuleOne.mock.invocationCallOrder[0]).toBeLessThan(mockRuleTwo.mock.invocationCallOrder[0]);
                            expect(mockRuleTwo.mock.invocationCallOrder[0]).toBeLessThan(mockRuleThree.mock.invocationCallOrder[0]);
                            return [2 /*return*/];
                    }
                });
            }); });
            it("and doesn't validate any rules after the first error", function () { return __awaiter(_this, void 0, void 0, function () {
                var mockRuleOne, mockRuleTwo, mockRuleThree, formFieldValidator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(5);
                            mockRuleOne = jest.fn();
                            mockRuleTwo = jest.fn().mockReturnValue(testError);
                            mockRuleThree = jest.fn();
                            formFieldValidator = new FormFieldValidator(testKey, true);
                            [mockRuleOne, mockRuleOne, mockRuleTwo, mockRuleThree, mockRuleThree].forEach(formFieldValidator.addValidationRule, formFieldValidator);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBe(testError);
                            expect(mockRequiredValidation).toHaveBeenCalledTimes(1);
                            expect(mockRuleOne).toHaveBeenCalledTimes(2);
                            expect(mockRuleTwo).toHaveBeenCalledTimes(1);
                            expect(mockRuleThree).not.toHaveBeenCalled();
                            return [2 /*return*/];
                    }
                });
            }); });
            it('and copes with rules returning a promise', function () { return __awaiter(_this, void 0, void 0, function () {
                var mockRuleOne, mockRuleTwo, mockRuleThree, formFieldValidator, result;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            expect.assertions(4);
                            mockRuleOne = jest.fn().mockResolvedValue(undefined);
                            mockRuleTwo = jest.fn().mockResolvedValue(testError);
                            mockRuleThree = jest.fn();
                            formFieldValidator = new FormFieldValidator(testKey, true);
                            [mockRuleOne, mockRuleTwo, mockRuleThree].forEach(formFieldValidator.addValidationRule, formFieldValidator);
                            return [4 /*yield*/, formFieldValidator.validate(testObject)];
                        case 1:
                            result = _a.sent();
                            expect(result).toBe(testError);
                            expect(mockRuleOne).toHaveBeenCalled();
                            expect(mockRuleTwo).toHaveBeenCalled();
                            expect(mockRuleThree).not.toHaveBeenCalled();
                            return [2 /*return*/];
                    }
                });
            }); });
        });
    });
});
//# sourceMappingURL=form-field-validator.test.js.map