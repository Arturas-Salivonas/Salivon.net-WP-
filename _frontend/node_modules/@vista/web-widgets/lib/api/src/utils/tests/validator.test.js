import { Logger } from '../logger';
import { Validator } from '../validator';
beforeEach(function () {
    Logger.warn = jest.fn();
});
describe('Validator', function () {
    it('returns true when no validations are being enforced', function () {
        var result = new Validator().validate(null, '');
        expect(result).toEqual(true);
    });
    describe('ofType', function () {
        var testCases = [
            { type: 'array', value: [], expectedOutcome: true },
            { type: 'array', value: '', expectedOutcome: false },
            { type: 'array', value: null, expectedOutcome: false },
            { type: 'array', value: undefined, expectedOutcome: false },
            { type: 'string', value: '', expectedOutcome: true },
            { type: 'string', value: 'abc', expectedOutcome: true },
            { type: 'string', value: 1, expectedOutcome: false },
            { type: 'string', value: null, expectedOutcome: false },
            { type: 'string', value: undefined, expectedOutcome: false },
            { type: 'number', value: 1, expectedOutcome: true },
            { type: 'number', value: -1, expectedOutcome: true },
            { type: 'number', value: 0, expectedOutcome: true },
            { type: 'number', value: 'abc', expectedOutcome: false },
            { type: 'number', value: '', expectedOutcome: false },
            { type: 'number', value: null, expectedOutcome: false },
            { type: 'number', value: undefined, expectedOutcome: false },
            { type: 'number', value: NaN, expectedOutcome: false },
            { type: 'object', value: {}, expectedOutcome: true },
            { type: 'object', value: 'abc', expectedOutcome: false },
            { type: 'object', value: 0, expectedOutcome: false },
            { type: 'object', value: null, expectedOutcome: false },
            { type: 'object', value: undefined, expectedOutcome: false },
        ];
        testCases.forEach(function (testCase) {
            it("returns: " + testCase.expectedOutcome + " when value: '" + testCase.value + "' and type: '" + testCase.type + "'", function () {
                var result = new Validator().ofType(testCase.type).validate(testCase.value, '');
                if (testCase.expectedOutcome === true) {
                    expect(result).toEqual(true);
                }
                else {
                    expect(result).toEqual(false);
                    expect(Logger.warn).toBeCalled();
                }
            });
        });
    });
    it('allows null values when allowNull has been called', function () {
        var result = new Validator().allowNull().validate(null, '');
        expect(result).toEqual(true);
    });
    it('allows undefined values when allowUndefined has been called', function () {
        var result = new Validator().allowUndefined().validate(undefined, '');
        expect(result).toEqual(true);
    });
    describe('min', function () {
        var testCases = [
            { min: 0, value: 0, expectedOutcome: true },
            { min: 0, value: 10, expectedOutcome: true },
            { min: 10, value: 0, expectedOutcome: false },
            { min: 0, value: '', expectedOutcome: false },
            { min: 0, value: [], expectedOutcome: false },
            { min: 0, value: {}, expectedOutcome: false },
            { min: 0, value: undefined, expectedOutcome: false },
            { min: 0, value: null, expectedOutcome: false },
        ];
        testCases.forEach(function (testCase) {
            it("returns: " + testCase.expectedOutcome + " when value: '" + testCase.value + "' and min: '" + testCase.min + "'", function () {
                var result = new Validator().min(testCase.min).validate(testCase.value, '');
                if (testCase.expectedOutcome === true) {
                    expect(result).toEqual(true);
                }
                else {
                    expect(result).toEqual(false);
                    expect(Logger.warn).toBeCalled();
                }
            });
        });
    });
    describe('max', function () {
        var testCases = [
            { max: 0, value: 0, expectedOutcome: true },
            { max: 10, value: 10, expectedOutcome: true },
            { max: 0, value: 10, expectedOutcome: false },
            { max: 0, value: '', expectedOutcome: false },
            { max: 0, value: [], expectedOutcome: false },
            { max: 0, value: {}, expectedOutcome: false },
            { max: 0, value: undefined, expectedOutcome: false },
            { max: 0, value: null, expectedOutcome: false },
        ];
        testCases.forEach(function (testCase) {
            it("returns: " + testCase.expectedOutcome + " when value: '" + testCase.value + "' and max: '" + testCase.max + "'", function () {
                var result = new Validator().max(testCase.max).validate(testCase.value, '');
                if (testCase.expectedOutcome === true) {
                    expect(result).toEqual(true);
                }
                else {
                    expect(result).toEqual(false);
                    expect(Logger.warn).toBeCalled();
                }
            });
        });
    });
    describe('minLength', function () {
        var testCases = [
            { minLength: 0, value: '', expectedOutcome: true },
            { minLength: 1, value: '', expectedOutcome: false },
            { minLength: 3, value: 'abc', expectedOutcome: true },
            { minLength: 0, value: [], expectedOutcome: true },
            { minLength: 1, value: [], expectedOutcome: false },
            { minLength: 4, value: [0, 1, 2, 3], expectedOutcome: true },
            { minLength: 0, value: 0, expectedOutcome: false },
            { minLength: 0, value: {}, expectedOutcome: false },
            { minLength: 0, value: undefined, expectedOutcome: false },
            { minLength: 0, value: null, expectedOutcome: false },
        ];
        testCases.forEach(function (testCase) {
            it("returns: " + testCase.expectedOutcome + " when value: '" + testCase.value + "' and minLength: '" + testCase.minLength + "'", function () {
                var result = new Validator().minLength(testCase.minLength).validate(testCase.value, '');
                if (testCase.expectedOutcome === true) {
                    expect(result).toEqual(true);
                }
                else {
                    expect(result).toEqual(false);
                    expect(Logger.warn).toBeCalled();
                }
            });
        });
    });
    describe('maxLength', function () {
        var testCases = [
            { maxLength: 0, value: '', expectedOutcome: true },
            { maxLength: 0, value: 'a', expectedOutcome: false },
            { maxLength: 3, value: 'abc', expectedOutcome: true },
            { maxLength: 0, value: [], expectedOutcome: true },
            { maxLength: 0, value: [0], expectedOutcome: false },
            { maxLength: 4, value: [0, 1, 2, 3], expectedOutcome: true },
            { maxLength: 0, value: 0, expectedOutcome: false },
            { maxLength: 0, value: {}, expectedOutcome: false },
            { maxLength: 0, value: undefined, expectedOutcome: false },
            { maxLength: 0, value: null, expectedOutcome: false },
        ];
        testCases.forEach(function (testCase) {
            it("returns: " + testCase.expectedOutcome + " when value: '" + testCase.value + "' and maxLength: '" + testCase.maxLength + "'", function () {
                var result = new Validator().maxLength(testCase.maxLength).validate(testCase.value, '');
                if (testCase.expectedOutcome === true) {
                    expect(result).toEqual(true);
                }
                else {
                    expect(result).toEqual(false);
                    expect(Logger.warn).toBeCalled();
                }
            });
        });
    });
    describe('includedInValues', function () {
        var obj = { a: 1 };
        var testCases = [
            { validValues: ['a', 'b', 'c'], value: 'a', expectedOutcome: true },
            { validValues: ['b', 'c', 'd'], value: 'a', expectedOutcome: false },
            { validValues: [0, 1, 2], value: 2, expectedOutcome: true },
            { validValues: [], value: 2, expectedOutcome: false },
            { validValues: [obj], value: obj, expectedOutcome: true },
            { validValues: [obj], value: { a: 1 }, expectedOutcome: false },
            { validValues: ['a', obj, 3], value: 3, expectedOutcome: true },
            { validValues: ['a', 'b', 'c'], value: [], expectedOutcome: true },
            { validValues: ['a', 'b', 'c'], value: ['a'], expectedOutcome: true },
            { validValues: ['a', 'b', 'c'], value: ['c', 'b', 'a'], expectedOutcome: true },
            { validValues: ['a', 'b', 'c'], value: ['1', 'a', 'b', 'c'], expectedOutcome: false },
            { validValues: ['a', 'b', 'c'], value: ['1'], expectedOutcome: false }
        ];
        var _loop_1 = function (testCase) {
            it("returns " + testCase.expectedOutcome + " for value '" + testCase.value + "' and validValues '" + testCase.validValues + "'", function () {
                var result = new Validator().includedInValues(testCase.validValues).validate(testCase.value, '');
                if (testCase.expectedOutcome === true) {
                    expect(result).toEqual(true);
                }
                else {
                    expect(result).toEqual(false);
                    expect(Logger.warn).toBeCalled();
                }
            });
        };
        for (var _i = 0, testCases_1 = testCases; _i < testCases_1.length; _i++) {
            var testCase = testCases_1[_i];
            _loop_1(testCase);
        }
    });
});
//# sourceMappingURL=validator.test.js.map