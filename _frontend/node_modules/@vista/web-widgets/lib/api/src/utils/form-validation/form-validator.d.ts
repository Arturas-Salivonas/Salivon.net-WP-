import { FormValidationConfig } from './validation-config/form-validation-configs';
import { FormFieldValidator } from './form-field-validator';
import { FormValidationResult } from './form-validation-result';
export declare type ExtractValidationObject<T> = T extends FormValidationConfig<infer U> ? U : never;
export interface IFormValidator<T> {
    validateField: (key: keyof T) => Promise<string | undefined>;
    validateForm: () => Promise<FormValidationResult<T>>;
}
export declare abstract class FormValidator<T extends FormValidationConfig<U>, U = ExtractValidationObject<T>> implements IFormValidator<T> {
    protected validators: Partial<{
        [P in keyof T]: FormFieldValidator<U>;
    }>;
    protected abstract name: any;
    constructor(config: T);
    validateField(key: keyof T, data?: U): Promise<string | undefined>;
    validateForm(): Promise<FormValidationResult<T>>;
    protected abstract getData(): U;
}
