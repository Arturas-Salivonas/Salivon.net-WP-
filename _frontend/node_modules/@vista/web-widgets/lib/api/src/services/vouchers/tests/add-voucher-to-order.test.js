var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { exampleOrderShowtime } from '../../../../../example-data/order/order-showtime';
import { exampleVoucherSingleUse } from '../../../../../example-data/vouchers';
import { addVoucherToOrder } from '../add-voucher-to-order';
import { AddVoucherErrorTypes } from './../../../../../types/vouchers/add-voucher-to-order-result';
import { exampleVoucherTicketType1 } from './../../../../../example-data/order/order-ticket-type';
import { exampleVoucherExpired, exampleVoucherInvalid, exampleVoucherMultiUse, exampleVoucherRedeemed, exampleVoucherWithNoTicketTypes } from './../../../../../example-data/vouchers';
import { orderStoreInstance } from './../../../stores/order/order-store';
import { vouchersService } from '../vouchers-service';
import { exampleOrder } from '../../../../../example-data/order/order';
describe('addVoucherToOrder', function () {
    var showtimeId = '';
    beforeEach(function () {
        var showtime = __assign({}, exampleOrderShowtime);
        var order = __assign({}, exampleOrder, { showtimes: [showtime] });
        showtimeId = showtime.showtimeId;
        orderStoreInstance.data.order = order;
    });
    afterEach(function () {
        orderStoreInstance.flush();
        jest.resetAllMocks();
    });
    it('throws an error when showtimeId is undefined', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, expect(addVoucherToOrder(undefined, exampleVoucherSingleUse.barcode)).rejects.toThrowError('Voucher cannot be added without a currentShowtimeId')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('throws an error when site is undefined in an order', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    orderStoreInstance.data.order.site = undefined;
                    return [4 /*yield*/, expect(addVoucherToOrder(showtimeId, exampleVoucherSingleUse.barcode)).rejects.toThrowError('Voucher cannot be added to an order without a site')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns a VoucherNotValid result when the voucher is invalid', function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    vouchersService.validateVoucher = jest.fn().mockReturnValue(exampleVoucherInvalid);
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, exampleVoucherInvalid.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        success: false,
                        validationError: AddVoucherErrorTypes.VoucherNotValid
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns an AlreadyRedeemed result when the voucher has already been redeemed', function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    vouchersService.validateVoucher = jest.fn().mockReturnValue(exampleVoucherRedeemed);
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, exampleVoucherRedeemed.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        success: false,
                        validationError: AddVoucherErrorTypes.AlreadyRedeemed
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns a VoucherExpired result when the voucher has expired', function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    vouchersService.validateVoucher = jest.fn().mockReturnValue(exampleVoucherExpired);
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, exampleVoucherExpired.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        success: false,
                        validationError: AddVoucherErrorTypes.VoucherExpired
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns a VoucherNotValid result when the voucher is not a ticket voucher', function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    vouchersService.validateVoucher = jest.fn().mockReturnValue(exampleVoucherWithNoTicketTypes);
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, exampleVoucherWithNoTicketTypes.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        success: false,
                        validationError: AddVoucherErrorTypes.VoucherNotValid
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns a VoucherAlreadyInOrder result when the voucher has already been added to the order', function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    orderStoreInstance.selectors.hasVoucher = jest.fn().mockReturnValue(true);
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, exampleVoucherSingleUse.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        success: false,
                        validationError: AddVoucherErrorTypes.VoucherAlreadyInOrder
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns a OrderAlreadyHasMaximumAllowedTickets  result when the order contains the maximum allowed tickets', function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    orderStoreInstance.selectors.hasMaximumAllowedTickets = jest.fn().mockReturnValue(true);
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, '1341324', '123')];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        success: false,
                        validationError: AddVoucherErrorTypes.OrderAlreadyHasMaximumAllowedTickets
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns a NoTicketTypeAvailableForVoucher result when the current showtime has no ticket types', function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    vouchersService.validateVoucher = jest.fn().mockReturnValue(exampleVoucherSingleUse);
                    orderStoreInstance.selectors.hasTicketTypesForShowtime = jest.fn().mockReturnValue(false);
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, exampleVoucherSingleUse.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        success: false,
                        validationError: AddVoucherErrorTypes.NoTicketTypeAvailableForVoucher
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('returns a NoTicketTypeAvailableForVoucher result when the current showtime has no ticket types for the current voucher', function () { return __awaiter(_this, void 0, void 0, function () {
        var result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    vouchersService.validateVoucher = jest.fn().mockReturnValue(exampleVoucherSingleUse);
                    orderStoreInstance.selectors.hasTicketTypesForShowtime = jest.fn().mockReturnValue(true);
                    orderStoreInstance.selectors.getTicketTypesForShowtime = jest.fn().mockReturnValue(new Map());
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, exampleVoucherSingleUse.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({
                        success: false,
                        validationError: AddVoucherErrorTypes.NoTicketTypeAvailableForVoucher
                    });
                    return [2 /*return*/];
            }
        });
    }); });
    it('adds a single use voucher to the order and automatically set ticket quantity', function () { return __awaiter(_this, void 0, void 0, function () {
        var voucher, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    voucher = __assign({}, exampleVoucherSingleUse, { ticketRedemptions: {
                            remainingRedemptions: 1,
                            ticketTypes: [
                                { ticketTypeId: 'id', ticketTypeKey: 'key' }
                            ]
                        } });
                    vouchersService.validateVoucher = jest.fn().mockReturnValue(voucher);
                    orderStoreInstance.selectors.hasTicketTypesForShowtime = jest.fn().mockReturnValue(true);
                    orderStoreInstance.selectors.getTicketTypesForShowtime = jest.fn().mockReturnValue(new Map([['key', exampleVoucherTicketType1]]));
                    orderStoreInstance.actions.setTicketQuantity = jest.fn();
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, voucher.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({ success: true });
                    expect(orderStoreInstance.actions.setTicketQuantity).toBeCalledWith(showtimeId, 'key', 1, voucher.barcode);
                    return [2 /*return*/];
            }
        });
    }); });
    it('adds a multi use voucher to the order and automatically set ticket quantity', function () { return __awaiter(_this, void 0, void 0, function () {
        var voucher, result;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    voucher = __assign({}, exampleVoucherMultiUse, { ticketRedemptions: {
                            remainingRedemptions: 2,
                            ticketTypes: [
                                { ticketTypeId: 'id1', ticketTypeKey: 'key1' },
                                { ticketTypeId: 'id2', ticketTypeKey: 'key2' },
                            ]
                        } });
                    vouchersService.validateVoucher = jest.fn().mockReturnValue(voucher);
                    orderStoreInstance.selectors.hasTicketTypesForShowtime = jest.fn().mockReturnValue(true);
                    orderStoreInstance.selectors.getTicketTypesForShowtime = jest.fn().mockReturnValue(new Map([
                        ['key1', exampleVoucherTicketType1],
                        ['key2', exampleVoucherTicketType1]
                    ]));
                    orderStoreInstance.actions.setTicketQuantity = jest.fn();
                    return [4 /*yield*/, addVoucherToOrder(showtimeId, voucher.barcode)];
                case 1:
                    result = _a.sent();
                    expect(result).toEqual({ success: true });
                    expect(orderStoreInstance.actions.setTicketQuantity).toHaveBeenCalledTimes(2);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=add-voucher-to-order.test.js.map