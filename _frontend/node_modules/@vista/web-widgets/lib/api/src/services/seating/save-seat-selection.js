var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { transaction } from 'mobx';
import { mapMxSelectedSeatToOrderSeat } from '../../mappers/seating/selected-seat-mapper';
import { configurationStoreInstance } from '../../stores/configuration/configuration-store';
import { mxtApi } from './../../../../mx-api-client/src/mxt/api/mxt-api';
import { orderStoreInstance } from './../../stores/order/order-store';
import { getSeatsCountPerAreaCategory } from './../order/utils/order-seat-utils';
import { getTicketsCountPerAreaCategory } from './../order/utils/order-ticket-utils';
import { getTicketingFlowScenario, TicketingFlowScenario } from './utils/get-ticketing-flow-scenario';
/**
 * Saves any currently selected seats for the seat layout.
 */
export function saveSeatSelection(showtimeId, selectedSeats) {
    return __awaiter(this, void 0, void 0, function () {
        var cinemaChainId, _a, orderId, seats, bookingFee, orderSeats;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    cinemaChainId = configurationStoreInstance.data.api.cinemaChainId;
                    if (!cinemaChainId)
                        throw new Error('Cannot save seat selections without a cinemaChainId');
                    return [4 /*yield*/, saveSeatsFn(cinemaChainId, showtimeId, selectedSeats)];
                case 1:
                    _a = _b.sent(), orderId = _a.orderId, seats = _a.seats, bookingFee = _a.bookingFee;
                    orderSeats = seats.map(mapMxSelectedSeatToOrderSeat);
                    transaction(function () {
                        var updatedTickets = adjustTicketsSelected(showtimeId, orderSeats);
                        if (updatedTickets !== undefined)
                            orderStoreInstance.actions.setTicketsForShowtime(showtimeId, updatedTickets);
                        orderStoreInstance.actions.setSeatsForShowtime(showtimeId, orderSeats);
                        orderStoreInstance.actions.setOrderData({ orderId: orderId, bookingFee: bookingFee });
                    });
                    return [2 /*return*/];
            }
        });
    });
}
function saveSeatsFn(cinemaChainId, showtimeId, selectedSeats) {
    return __awaiter(this, void 0, void 0, function () {
        var ticketingFlowScenario, orderId, bookingFee, _a, updatedOrder, newOrder;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    ticketingFlowScenario = getTicketingFlowScenario();
                    orderId = orderStoreInstance.selectors.getOrderId();
                    bookingFee = orderStoreInstance.data.order ? orderStoreInstance.data.order.bookingFee : 0;
                    _a = ticketingFlowScenario;
                    switch (_a) {
                        case TicketingFlowScenario.Unsupported: return [3 /*break*/, 1];
                        case TicketingFlowScenario.SeatFirstUpdateSeats: return [3 /*break*/, 2];
                        case TicketingFlowScenario.TicketFirstUpdateSeats: return [3 /*break*/, 4];
                        case TicketingFlowScenario.SeatFirstCreateOrder: return [3 /*break*/, 6];
                    }
                    return [3 /*break*/, 8];
                case 1: throw new Error('saveSeatSelection method is not expected to be called at this stage of the order flow');
                case 2: return [4 /*yield*/, mxtApi.updateShowtimeTicketingDetails(cinemaChainId, orderId, showtimeId, { ticketTypes: [], seats: selectedSeats })];
                case 3:
                    updatedOrder = _b.sent();
                    bookingFee = updatedOrder.bookingFee;
                    return [3 /*break*/, 8];
                case 4: return [4 /*yield*/, mxtApi.updateSelectedSeats(cinemaChainId, orderId, showtimeId, selectedSeats)];
                case 5:
                    _b.sent();
                    return [3 /*break*/, 8];
                case 6: return [4 /*yield*/, mxtApi.createOrderWithSeats(cinemaChainId, showtimeId, { seats: selectedSeats })];
                case 7:
                    newOrder = _b.sent();
                    orderId = newOrder.id;
                    bookingFee = newOrder.bookingFee;
                    return [3 /*break*/, 8];
                case 8: return [2 /*return*/, { orderId: orderId, seats: selectedSeats, bookingFee: bookingFee }];
            }
        });
    });
}
function adjustTicketsSelected(showtimeId, selectedSeats) {
    if (!orderStoreInstance.selectors.hasShowtime(showtimeId))
        return undefined;
    var showtime = orderStoreInstance.selectors.getShowtimeById(showtimeId);
    // no tickets in order, can skip any further calculations.
    // TODO: see if we could memoise the function below, as these are being called in ticket picker
    if (orderStoreInstance.selectors.getSelectedTicketsCountForShowtime(showtimeId) === 0)
        return undefined;
    // check if seats grouped by area category count === ticket type quantity grouped by area category
    // TODO: see if these functions can be memoized, as this is called during ticket selection again
    var seatCountPerAreaCategory = getSeatsCountPerAreaCategory(selectedSeats);
    var ticketQtyPerAreaCategory = getTicketsCountPerAreaCategory(showtimeId, showtime.tickets);
    var updatedTickets = showtime.tickets.reduce(function (acc, ticket) {
        if (ticket.quantity === 0)
            return acc.concat([ticket]); // no adjustment required
        var ticketType = orderStoreInstance.selectors.getTicketTypeByKey(showtimeId, ticket.ticketTypeKey);
        var seatCountForAreaCategory = seatCountPerAreaCategory.get(ticketType.areaCategoryCode) || 0;
        var ticketQtyForAreaCategory = ticketQtyPerAreaCategory.get(ticketType.areaCategoryCode);
        // all seats in that area category has been removed, in this case remove any added tickets
        if (seatCountForAreaCategory === 0 && ticketQtyForAreaCategory !== 0)
            return acc.concat([__assign({}, ticket, { quantity: 0 })]);
        // seats have been removed & is the only selected ticket type in that area category
        if (seatCountForAreaCategory < ticketQtyForAreaCategory && ticketQtyForAreaCategory === ticket.quantity) {
            return acc.concat([__assign({}, ticket, { quantity: seatCountForAreaCategory })]);
        }
        // every other scenario requires user intervention.
        return acc.concat([ticket]);
    }, []);
    return updatedTickets;
}
//# sourceMappingURL=save-seat-selection.js.map