var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { AddVoucherErrorTypes } from '../../../../types/vouchers/add-voucher-to-order-result';
import { VoucherStatus } from '../../../../types/vouchers/voucher-status';
import { orderStoreInstance } from '../../stores/order/order-store';
import { calculateSelectedSeatsCountForAreaCategory, calculateSelectedTicketsCountForAreaCategory } from '../order/utils/order-showtime-utils';
import { configurationStoreInstance } from './../../stores/configuration/configuration-store';
import { vouchersService } from './vouchers-service';
export function addVoucherToOrder(showtimeId, voucherBarcode, voucherPin) {
    return __awaiter(this, void 0, void 0, function () {
        var site, voucher;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!showtimeId)
                        throw new Error('Voucher cannot be added without a currentShowtimeId');
                    site = orderStoreInstance.data.order.site;
                    if (!site)
                        throw new Error('Voucher cannot be added to an order without a site');
                    if (orderStoreInstance.selectors.hasMaximumAllowedTickets())
                        return [2 /*return*/, { success: false, validationError: AddVoucherErrorTypes.OrderAlreadyHasMaximumAllowedTickets }];
                    if (orderStoreInstance.selectors.hasVoucher(voucherBarcode))
                        return [2 /*return*/, { success: false, validationError: AddVoucherErrorTypes.VoucherAlreadyInOrder }];
                    return [4 /*yield*/, vouchersService.validateVoucher(site.id, configurationStoreInstance.data.api.cinemaChainId, voucherBarcode, voucherPin)];
                case 1:
                    voucher = _a.sent();
                    switch (voucher.status) {
                        case VoucherStatus.Invalid:
                            return [2 /*return*/, { success: false, validationError: AddVoucherErrorTypes.VoucherNotValid }];
                        case VoucherStatus.Redeemed:
                            return [2 /*return*/, { success: false, validationError: AddVoucherErrorTypes.AlreadyRedeemed }];
                        case VoucherStatus.Expired:
                            return [2 /*return*/, { success: false, validationError: AddVoucherErrorTypes.VoucherExpired }];
                    }
                    if (isNotATicketVoucher(voucher))
                        return [2 /*return*/, { success: false, validationError: AddVoucherErrorTypes.VoucherNotValid }]; // This will be a non-ticket voucher, eg: miscellaneous vouchers.
                    if (!voucherTicketTypesExistsInShowtime(showtimeId, voucher))
                        return [2 /*return*/, { success: false, validationError: AddVoucherErrorTypes.NoTicketTypeAvailableForVoucher }];
                    orderStoreInstance.actions.addVoucher(voucher);
                    if (canVoucherTicketBeAutomaticallyAdded(voucher, showtimeId)) {
                        orderStoreInstance.actions.setTicketQuantity(showtimeId, voucher.ticketRedemptions.ticketTypes[0].ticketTypeKey, 1, voucher.barcode);
                    }
                    else {
                        voucher.ticketRedemptions.ticketTypes.forEach(function (ticketType) { return orderStoreInstance.actions.setTicketQuantity(showtimeId, ticketType.ticketTypeKey, 0, voucher.barcode); });
                    }
                    return [2 /*return*/, { success: true }];
            }
        });
    });
}
/**
 * We only do this for:
 * 1. The voucher is single use.
 * 2. The voucher has a one to one mapping with a ticket type.
 * 3. (Seat first ordering) We have remaining tickets to select in the ticket type's area category
 */
function canVoucherTicketBeAutomaticallyAdded(voucher, showtimeId) {
    if (voucher.ticketRedemptions.remainingRedemptions !== 1)
        return false;
    if (voucher.ticketRedemptions.ticketTypes.length !== 1)
        return false;
    if (configurationStoreInstance.data.ticketing.isSeatFirstOrdering) {
        var ticketType = orderStoreInstance.selectors.getTicketTypeByKey(showtimeId, voucher.ticketRedemptions.ticketTypes[0].ticketTypeKey);
        var showtime = orderStoreInstance.selectors.getShowtimeById(showtimeId);
        var selectedSeatsCount = calculateSelectedSeatsCountForAreaCategory(showtime, ticketType.areaCategoryCode);
        var selectedTicketsCount = calculateSelectedTicketsCountForAreaCategory(showtime, ticketType.areaCategoryCode);
        return selectedSeatsCount > selectedTicketsCount;
    }
    return true;
}
function voucherTicketTypesExistsInShowtime(showtimeId, voucher) {
    if (!orderStoreInstance.selectors.hasTicketTypesForShowtime(showtimeId))
        return false;
    var ticketTypeForShowtime = orderStoreInstance.selectors.getTicketTypesForShowtime(showtimeId);
    return voucher.ticketRedemptions.ticketTypes.some(function (t) { return ticketTypeForShowtime.has(t.ticketTypeKey); });
}
function isNotATicketVoucher(voucher) {
    return voucher.ticketRedemptions.ticketTypes.length === 0;
}
//# sourceMappingURL=add-voucher-to-order.js.map