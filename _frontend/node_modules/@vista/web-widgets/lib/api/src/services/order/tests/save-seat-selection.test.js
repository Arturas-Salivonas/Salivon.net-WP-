var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { SeatLayoutBuilder } from '../../../stores/seating/helpers/test/seat-layout-builder';
import { seatingStoreInstance } from '../../../stores/seating/seating-store';
import { saveSeatSelection } from '../save-seat-selection';
import { SetSeatsErrorCode } from './../../../../../mx-api-client/src/mxt/types/set-seats-failed-response';
import { SeatAvailability } from './../../../../../types/seating/seat-availability';
import { seatingService } from './../../seating/seating-service';
describe('saveSeatSelection', function () {
    var testSeatLayout = new SeatLayoutBuilder().addAreaCategory(function (areaCat) {
        return areaCat.addArea(function (area) {
            area.addRow('A', function (row) {
                row.addSeat({ availability: SeatAvailability.Available });
                row.addSeat({ availability: SeatAvailability.Sold });
                row.addSeat({ availability: SeatAvailability.Selected });
            });
        });
    }).create();
    beforeEach(function () {
        seatingStoreInstance.data.seatLayout = testSeatLayout;
        seatingService.saveSeatSelection = jest.fn();
        seatingService.getSeatLayout = jest.fn().mockReturnValue(Promise.resolve(testSeatLayout));
    });
    afterEach(function () {
        seatingStoreInstance.flush();
        jest.resetAllMocks();
    });
    it('calls seatingService.saveSeatSelection', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0: return [4 /*yield*/, saveSeatSelection('showtimeId')];
                case 1:
                    _a.sent();
                    expect(seatingService.saveSeatSelection).toHaveBeenCalledWith('showtimeId', [{ areaCategoryCode: '1', areaNumber: 1, columnId: 2, rowId: 0 }]);
                    return [2 /*return*/];
            }
        });
    }); });
    it('handles failures', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    seatingService.saveSeatSelection = jest.fn().mockReturnValue(Promise.reject({ errorCode: SetSeatsErrorCode.SeatsUnavailable }));
                    return [4 /*yield*/, expect(saveSeatSelection('1')).rejects.toEqual({ errorCode: SetSeatsErrorCode.SeatsUnavailable })];
                case 1:
                    _a.sent();
                    expect(seatingService.getSeatLayout).toHaveBeenCalledWith('1');
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=save-seat-selection.test.js.map