var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { subMinutes } from 'date-fns';
import { LoadingState } from '../../../../../types/loading-state';
import { mapMxScreeningDateToWidgetScreeningDate } from '../../../mappers/browsing/screening-date-mapper';
import { browsingStoreInstance } from '../../../stores/browsing/browsing-store';
import { generateShowtimeQueryKey } from '../../../stores/browsing/helpers/utils/query-key-generator';
import { getLoadingFetchedData } from '../../../stores/cache-tools/fetched-data';
import { configurationStoreInstance } from '../../../stores/configuration/configuration-store';
import { loadScreeningDates } from '../load-screening-dates';
import { mxsApi } from './../../../../../mx-api-client/src/mxs/api/mxs-api';
describe('loadScreeningDates', function () {
    var testDurations = { screeningDates: 30, showtimes: 30, itemButtonGroups: 30 };
    configurationStoreInstance.setData({
        cache: {
            durations: testDurations
        }
    });
    var query = {
        filmIds: ['001', '002'],
        siteIds: ['S1', 'S2']
    };
    var mxScreeningDateOne = {
        businessDate: '2020-01-01',
        screeningDetails: [{
                filmId: '001',
                siteIds: ['S1', 'S2']
            }]
    };
    var mxScreeningDateTwo = {
        businessDate: '2020-01-03',
        screeningDetails: [{
                filmId: '002',
                siteIds: ['S1', 'S2']
            }]
    };
    var screeningDatesResponse = {
        screeningDates: [mxScreeningDateOne, mxScreeningDateTwo]
    };
    var widgetScreeningDateOne = mapMxScreeningDateToWidgetScreeningDate(mxScreeningDateOne);
    var widgetScreeningDateTwo = mapMxScreeningDateToWidgetScreeningDate(mxScreeningDateTwo);
    var getScreeningDatesSpy = jest.spyOn(mxsApi.showtimes, 'getScreeningDates').mockReturnValue(screeningDatesResponse);
    var browsingStoreSetScreeningDatesSpy = jest.spyOn(browsingStoreInstance.actions, 'setScreeningDatesForQuery');
    // Mocking Date
    var timestamp = new Date('2020-01-01');
    jest.spyOn(Date, 'now').mockReturnValue(timestamp.getTime());
    beforeEach(function () {
        jest.clearAllMocks();
        browsingStoreInstance.setData({ screeningDatesByQuery: {} });
    });
    describe('No existing data in store', function () {
        var expectedScreeningDateData = {
            loadingState: LoadingState.Success,
            payload: [widgetScreeningDateOne, widgetScreeningDateTwo],
            timestamp: timestamp
        };
        it('gets screening dates from API', function () { return __awaiter(_this, void 0, void 0, function () {
            var screeningDates;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expect.assertions(5);
                        return [4 /*yield*/, loadScreeningDates(query)];
                    case 1:
                        screeningDates = _a.sent();
                        expect(screeningDates).toEqual([widgetScreeningDateOne, widgetScreeningDateTwo]);
                        expect(getScreeningDatesSpy).toHaveBeenCalled();
                        expect(browsingStoreSetScreeningDatesSpy).toHaveBeenCalledTimes(2);
                        expect(browsingStoreSetScreeningDatesSpy).toHaveBeenCalledWith(getLoadingFetchedData(), query);
                        expect(browsingStoreSetScreeningDatesSpy).toHaveBeenLastCalledWith(expectedScreeningDateData, query);
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Store contains valid data', function () {
        var existingScreeningDates = [widgetScreeningDateOne];
        var existingData = {
            loadingState: LoadingState.Success,
            payload: existingScreeningDates,
            timestamp: subMinutes(new Date(), 5)
        };
        it('returns cached data and does not make an API call', function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, screeningDates;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        expect.assertions(3);
                        browsingStoreInstance.setData({ screeningDatesByQuery: (_a = {}, _a[generateShowtimeQueryKey(query)] = existingData, _a) });
                        return [4 /*yield*/, loadScreeningDates(query)];
                    case 1:
                        screeningDates = _b.sent();
                        // Use stringify to work around jest issue where we get false failures
                        expect(JSON.stringify(screeningDates)).toEqual(JSON.stringify(existingScreeningDates));
                        expect(getScreeningDatesSpy).not.toHaveBeenCalled();
                        expect(browsingStoreSetScreeningDatesSpy).not.toHaveBeenCalled();
                        return [2 /*return*/];
                }
            });
        }); });
    });
    describe('Store contains expired data', function () {
        var existingScreeningDates = [widgetScreeningDateOne];
        var existingData = {
            loadingState: LoadingState.Success,
            payload: existingScreeningDates,
            timestamp: subMinutes(new Date(), 45)
        };
        var expectedScreeningDateData = {
            loadingState: LoadingState.Success,
            payload: [widgetScreeningDateOne, widgetScreeningDateTwo],
            timestamp: timestamp
        };
        it('gets screening dates from API', function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, screeningDates;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        expect.assertions(5);
                        browsingStoreInstance.setData({ screeningDatesByQuery: (_a = {}, _a[generateShowtimeQueryKey(query)] = existingData, _a) });
                        return [4 /*yield*/, loadScreeningDates(query)];
                    case 1:
                        screeningDates = _b.sent();
                        expect(screeningDates).toEqual([widgetScreeningDateOne, widgetScreeningDateTwo]);
                        expect(getScreeningDatesSpy).toHaveBeenCalled();
                        expect(browsingStoreSetScreeningDatesSpy).toHaveBeenCalledTimes(2);
                        expect(browsingStoreSetScreeningDatesSpy).toHaveBeenCalledWith(getLoadingFetchedData(), query);
                        expect(browsingStoreSetScreeningDatesSpy).toHaveBeenLastCalledWith(expectedScreeningDateData, query);
                        return [2 /*return*/];
                }
            });
        }); });
    });
});
//# sourceMappingURL=load-screening-dates.test.js.map