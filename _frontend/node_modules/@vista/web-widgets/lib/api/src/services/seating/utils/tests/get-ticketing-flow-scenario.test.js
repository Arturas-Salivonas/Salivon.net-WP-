import { configurationStoreInstance } from './../../../../stores/configuration/configuration-store';
import { orderStoreInstance } from './../../../../stores/order/order-store';
import { getTicketingFlowScenario, TicketingFlowScenario } from './../get-ticketing-flow-scenario';
describe('getTicketingFlowScenario', function () {
    var testCases = [
        {
            hasOrderId: true,
            isSeatFirstOrdering: true,
            expectedResult: TicketingFlowScenario.SeatFirstUpdateSeats
        },
        {
            hasOrderId: true,
            isSeatFirstOrdering: false,
            expectedResult: TicketingFlowScenario.TicketFirstUpdateSeats
        },
        {
            hasOrderId: false,
            isSeatFirstOrdering: true,
            expectedResult: TicketingFlowScenario.SeatFirstCreateOrder
        },
        {
            hasOrderId: false,
            isSeatFirstOrdering: false,
            expectedResult: TicketingFlowScenario.Unsupported
        },
    ];
    beforeEach(function () {
        orderStoreInstance.flush();
        configurationStoreInstance.flush();
    });
    testCases.forEach(function (_a) {
        var hasOrderId = _a.hasOrderId, isSeatFirstOrdering = _a.isSeatFirstOrdering, expectedResult = _a.expectedResult;
        it("returns " + expectedResult + " when hasOrderId = " + hasOrderId + " and isSeatFirstOrdering = " + isSeatFirstOrdering, function () {
            orderStoreInstance.selectors.hasOrderId = jest.fn().mockReturnValueOnce(hasOrderId);
            configurationStoreInstance.data.ticketing.isSeatFirstOrdering = isSeatFirstOrdering;
            var result = getTicketingFlowScenario();
            expect(result).toEqual(expectedResult);
        });
    });
});
//# sourceMappingURL=get-ticketing-flow-scenario.test.js.map