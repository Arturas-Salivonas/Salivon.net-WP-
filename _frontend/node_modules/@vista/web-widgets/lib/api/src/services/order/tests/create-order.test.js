var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { configurationStoreInstance } from '../../../stores/configuration/configuration-store';
import { createOrder } from '../create-order';
import { exampleOrderShowtime } from './../../../../../example-data/order/order-showtime';
import { exampleLoyaltyTicket1, examplePackageTicket, exampleStandardTicket1, exampleVoucherTicket1 } from './../../../../../example-data/order/order-ticket';
import { exampleLoyaltyTicketType1, examplePackageTicketType, exampleStandardTicketType1, exampleVoucherTicketType1 } from './../../../../../example-data/order/order-ticket-type';
import { exampleVoucherSingleUse } from './../../../../../example-data/vouchers';
import { mxtApi } from './../../../../../mx-api-client/src/mxt/api/mxt-api';
import { orderStoreInstance } from './../../../stores/order/order-store';
describe('createOrder', function () {
    var apiResponse = {
        id: 'orderId',
        cinemaChainId: 'cinemaChainId',
        totalPrice: 100,
        bookingFee: 5,
        showtimes: [],
        items: []
    };
    beforeEach(function () {
        configurationStoreInstance.data.api.cinemaChainId = 'cinemaChainId';
        orderStoreInstance.actions.setOrderData = jest.fn();
        mxtApi.createOrder = jest.fn().mockReturnValue(Promise.resolve(apiResponse));
    });
    afterEach(function () {
        orderStoreInstance.flush();
    });
    it('throws an error when the order data is undefined or empty', function () { return __awaiter(_this, void 0, void 0, function () {
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    orderStoreInstance.data.order = undefined;
                    return [4 /*yield*/, expect(createOrder()).rejects.toThrow('Order store is empty, no valid data for an order to be created.')];
                case 1:
                    _a.sent();
                    return [2 /*return*/];
            }
        });
    }); });
    it('can create an order', function () { return __awaiter(_this, void 0, void 0, function () {
        var _a, showtime, orderId;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0:
                    showtime = __assign({}, exampleOrderShowtime, { tickets: [exampleStandardTicket1, examplePackageTicket, exampleLoyaltyTicket1, exampleVoucherTicket1].map(function (t) { return getTicketWithQuantity(t, 1); }), ticketTypes: new Map([
                            [exampleStandardTicketType1.key, exampleStandardTicketType1],
                            [examplePackageTicketType.key, examplePackageTicketType],
                            [exampleLoyaltyTicketType1.key, exampleLoyaltyTicketType1],
                            [exampleVoucherTicketType1.key, exampleVoucherTicketType1],
                        ]) });
                    orderStoreInstance.data.order.showtimes = [showtime];
                    orderStoreInstance.data.order.vouchers = (_a = {},
                        _a[exampleVoucherTicket1.barcode] = __assign({}, exampleVoucherSingleUse, { barcode: exampleVoucherTicket1.barcode }),
                        _a);
                    return [4 /*yield*/, createOrder()];
                case 1:
                    orderId = _b.sent();
                    expect(mxtApi.createOrder).toBeCalledWith('cinemaChainId', {
                        ticketTypes: [
                            {
                                showtimeId: showtime.showtimeId,
                                id: exampleStandardTicketType1.id,
                                quantity: 1
                            },
                            {
                                showtimeId: showtime.showtimeId,
                                id: examplePackageTicketType.id,
                                quantity: 1
                            },
                            {
                                showtimeId: showtime.showtimeId,
                                id: exampleLoyaltyTicketType1.id,
                                quantity: 1,
                                rewardDetails: { id: exampleLoyaltyTicketType1.rewardDetails.id }
                            },
                            {
                                showtimeId: showtime.showtimeId,
                                id: exampleVoucherTicketType1.id,
                                quantity: 1,
                                voucher: {
                                    barcode: exampleVoucherTicket1.barcode,
                                    pin: exampleVoucherSingleUse.pin
                                }
                            },
                        ]
                    });
                    expect(orderId).toEqual(apiResponse.id);
                    expect(orderStoreInstance.actions.setOrderData).toBeCalledWith({ orderId: apiResponse.id, bookingFee: apiResponse.bookingFee });
                    return [2 /*return*/];
            }
        });
    }); });
});
var getTicketWithQuantity = function (orderTicket, quantity) { return (__assign({}, orderTicket, { quantity: quantity })); };
//# sourceMappingURL=create-order.test.js.map