var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
import { mxsApi } from '../../../../../mx-api-client/src/mxs/api/mxs-api';
import { defaultConfigurationStoreData } from '../../../../../types/stores/configuration-store-data';
import { mapMxSiteToWidgetSite } from '../../../mappers/browsing/site-mapper';
import { browsingStoreInstance } from '../../../stores/browsing/browsing-store';
import { loadSiteById } from '../load-site-by-id';
describe('getSiteById', function () {
    var siteId = 'Site Id';
    var mxSite = {
        id: siteId,
        name: 'Site',
        nameTranslations: [],
        contactDetails: {}
    };
    var widgetSite = mapMxSiteToWidgetSite(mxSite);
    var getSiteByIdSpy = jest.spyOn(mxsApi.sites, 'getById').mockReturnValue(Promise.resolve(mxSite));
    var browsingStoreGetSiteByIdSpy = jest.spyOn(browsingStoreInstance.selectors, 'getSiteById');
    var browsingStoreAddSiteSpy = jest.spyOn(browsingStoreInstance.actions, 'addSites');
    afterEach(function () {
        jest.clearAllMocks();
    });
    it('can get a previously stored site by id', function () { return __awaiter(_this, void 0, void 0, function () {
        var site;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(3);
                    browsingStoreGetSiteByIdSpy.mockReturnValue(widgetSite);
                    return [4 /*yield*/, loadSiteById(siteId)];
                case 1:
                    site = _a.sent();
                    expect(site).toEqual(widgetSite);
                    expect(getSiteByIdSpy).not.toHaveBeenCalled();
                    expect(browsingStoreAddSiteSpy).not.toHaveBeenCalled();
                    return [2 /*return*/];
            }
        });
    }); });
    it('can get a site by id', function () { return __awaiter(_this, void 0, void 0, function () {
        var site;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    expect.assertions(3);
                    browsingStoreGetSiteByIdSpy.mockReturnValueOnce(undefined).mockReturnValueOnce(widgetSite);
                    return [4 /*yield*/, loadSiteById(siteId)];
                case 1:
                    site = _a.sent();
                    expect(site).toEqual(widgetSite);
                    expect(getSiteByIdSpy).toHaveBeenCalledWith(defaultConfigurationStoreData.api.cinemaChainId, siteId);
                    expect(browsingStoreAddSiteSpy).toHaveBeenCalledWith([widgetSite]);
                    return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=load-site-by-id.test.js.map