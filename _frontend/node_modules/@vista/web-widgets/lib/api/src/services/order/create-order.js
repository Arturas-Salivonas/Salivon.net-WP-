var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { mxtApi } from '../../../../mx-api-client/src/mxt/api/mxt-api';
import { configurationStoreInstance } from '../../stores/configuration/configuration-store';
import { isNullOrUndefined } from '../../utils/is-null-or-undefined';
import { Logger } from '../../utils/logger';
import { orderStoreInstance } from './../../stores/order/order-store';
import { isVoucherTicket } from './utils/order-ticket-utils';
import { isLoyaltyTicketType } from './utils/ticket-type-utils';
/**
 * Creates an order, and persists it via the back-end client.
 * @returns {Promise<string>} orderId
 */
export function createOrder() {
    return __awaiter(this, void 0, void 0, function () {
        var errorMessage, createOrderRequest, order;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    if (!orderStoreInstance.data.order || Object.keys(orderStoreInstance.data.order).length === 0) {
                        errorMessage = 'Order store is empty, no valid data for an order to be created.';
                        Logger.warn(errorMessage);
                        throw new Error(errorMessage);
                    }
                    createOrderRequest = {
                        ticketTypes: orderStoreInstance.data.order.showtimes
                            .map(function (showtime) { return mapOrderTicketsToApiTicketTypeRequest(showtime.showtimeId, showtime.tickets); })
                            .reduce(function (prev, curr) { return prev.concat(curr); }, [])
                    };
                    return [4 /*yield*/, mxtApi.createOrder(configurationStoreInstance.data.api.cinemaChainId, createOrderRequest)];
                case 1:
                    order = _a.sent();
                    orderStoreInstance.actions.setOrderData({ orderId: order.id, bookingFee: order.bookingFee });
                    return [2 /*return*/, order.id];
            }
        });
    });
}
function mapOrderTicketsToApiTicketTypeRequest(showtimeId, tickets) {
    return tickets.reduce(function (requests, ticket) {
        if (isNullOrUndefined(ticket) || ticket.quantity === 0)
            return requests;
        var ticketType = orderStoreInstance.selectors.getTicketTypeByKey(showtimeId, ticket.ticketTypeKey);
        var quantity = ticket.quantity;
        var request = {
            showtimeId: showtimeId,
            id: ticketType.id,
            quantity: quantity
        };
        if (isVoucherTicket(ticket)) {
            var voucher = orderStoreInstance.selectors.getVoucherByBarcode(ticket.barcode);
            requests.push(__assign({}, request, { voucher: { barcode: voucher.barcode, pin: voucher.pin } }));
        }
        else if (isLoyaltyTicketType(ticketType)) {
            requests.push(__assign({}, request, { rewardDetails: { id: ticketType.rewardDetails.id } }));
        }
        else {
            requests.push(request);
        }
        return requests;
    }, new Array());
}
//# sourceMappingURL=create-order.js.map