import { CdnReferenceScheme } from '@vista/cdn-client';
import { CurrencyConfiguration, DateConfiguration, LocaleTags } from '@vista/i18n';
import { CustomerDetailsValidationConfig } from '../../api/src/utils/form-validation/validation-config/form-validation-configs';
import { CaptchaConfig } from './../../widgets/src/components/captcha/captcha-config';
export declare class ConfigurationStoreData {
    /**
     * API configuration for widgets
     */
    api: WidgetApiConfig;
    /**
     * CDN configuration for widgets
     */
    cdn: WidgetCdnConfig;
    /**
     * Ticketing configuration for widgets
     */
    ticketing: WidgetTicketingConfig;
    /**
     * Browsing configuration for widget
     */
    browsing: WidgetBrowsingConfig;
    /**
     * Localisation configuration for widgets
     */
    localisation: WidgetLocalisationConfig;
    /**
     * Security configuration for widgets
     */
    security: WidgetSecurityConfig;
    /**
     * Customer Details configuration for widgets.
     */
    customerDetails: CustomerDetailsConfig;
    /**
     * Cache configuration for widgets.
     */
    cache: WidgetCacheConfig;
    /**
     * Loading Indicator configuration for widgets.
     */
    enableLoadingIndicator: boolean;
}
/**
 * API configuration for widgets
 */
export interface WidgetApiConfig {
    /**
     * The URL of the back-end API
     */
    url: string;
    /**
     * The auth token of the back-end API
     */
    authToken: string;
    /**
     * The cinema chain id to use in API requests
     */
    cinemaChainId: string;
}
/**
 * CDN configuration for widgets
 */
export interface WidgetCdnConfig {
    /**
     * The URL of the Vista CDN.
     */
    url: string;
    /**
     * The security token used to access the Vista CDN.
     */
    mediaApiToken?: string;
    /**
     * The type of entity identifier being used.
     */
    referenceScheme: CdnReferenceScheme;
}
/**
 * Ticketing configuration for widgets
 */
export interface WidgetTicketingConfig {
    /**
     * Set ordering mode for widgets
     */
    isSeatFirstOrdering: boolean;
    /**
     * Maximum allowed tickets in an order
     */
    maximumAllowedTicketsInAnOrder: number;
    /**
     * Determines the duration in minutes before the start time of a showtime that admission into the cinema is allowed.
     */
    admittingDuration: number;
}
/**
 * Browsing configuration for widgets
 */
export interface WidgetBrowsingConfig {
    /**
     * Maximum number of cinema locations that can be selected.
     */
    maximumSelectedSites: number;
}
/**
 * Localisation configuration for widgets
 */
export interface WidgetLocalisationConfig {
    /**
     * The ietf language tag for widgets
     */
    languageTag: LocaleTags;
    /**
     * Currency configuration options for widgets
     */
    currency: CurrencyConfiguration;
    /**
     * Date configuration for widgets
     */
    date: DateConfiguration;
    /**
     * Alt text format for film posters
     */
    filmPosterAltTextFormat: string;
}
/**
 * Security configuration for widgets
 */
export interface WidgetSecurityConfig {
    /**
     * Configuration options for the captcha verification
     */
    captcha: CaptchaConfig;
}
/**
 * Configuration options for customer details.
 */
export interface CustomerDetailsConfig {
    /**
     * Configuration options for validating customer details.
     */
    validation: CustomerDetailsValidationConfig;
}
/**
 * Configuration options for data caching.
 */
export interface WidgetCacheConfig {
    /**
     * Determines how long (in minutes) that each data type is cached for before new data is required.
     */
    durations: WidgetCacheDurationsConfig;
}
/**
 * Determines how long (in minutes) that each data type is cached for before new data is required.
 */
export interface WidgetCacheDurationsConfig {
    /**
     * Cache duration for showtimes data.
     */
    showtimes: number;
    /**
     * Cache duration for screening dates data.
     */
    screeningDates: number;
    /**
     * Cache duration for item button groups data.
     */
    itemButtonGroups: number;
}
export declare const defaultConfigurationStoreData: ConfigurationStoreData;
