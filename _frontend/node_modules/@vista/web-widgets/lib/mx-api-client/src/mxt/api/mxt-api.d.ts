import { MxOrder } from '../types/order/order';
import { MxOrderCustomerDetails } from '../types/order/order-customer-details';
import { MxCreateOrderRequest } from '../types/order/request/create-order-request';
import { MxCreateOrderRequestWithSeats } from '../types/order/request/create-order-with-seats-request';
import { MxSelectedSeat } from '../types/selected-seat';
import { MxUpdateShowtimeDetails } from '../types/update-showtime-ticketing-details';
import { MxSetOrderItemsRequest } from './../types/order/request/set-order-items-request';
import { MxSeatLayout } from './../types/seating/seat-layout';
import { SetSeatsFailedResponse } from './../types/set-seats-failed-response';
import { MxGetJourneyByIdApi } from './get-journey-by-id';
import { MxGetJourneyByReferenceApi } from './get-journey-by-reference';
import { MxGetOrderCompletionStatusApi } from './get-order-completion-status';
import { MxStartEmbeddedPaymentApi } from './start-embedded-payment';
/**
 * @hidden
 */
export interface MxtApi {
    createOrder: (cinemaChainId: string, createOrderRequest: MxCreateOrderRequest) => Promise<MxOrder>;
    createOrderWithSeats: (cinemaChainId: string, showtimeId: string, createOrderRequestWithSeats: MxCreateOrderRequestWithSeats) => Promise<MxOrder>;
    cancelOrder: (cinemaChainId: string, orderId: string) => Promise<boolean>;
    setCustomerDetails: (cinemaChainId: string, orderId: string, customerDetails: MxOrderCustomerDetails) => Promise<void>;
    getSeatLayoutForOrder: (cinemaChainId: string, orderId: string, showtimeId: string) => Promise<MxSeatLayout>;
    getSeatLayoutForShowtime: (cinemaChainId: string, showtimeId: string) => Promise<MxSeatLayout>;
    updateShowtimeTicketingDetails: (cinemaChainId: string, orderId: string, showtimeId: string, showtimeTicketingDetails: MxUpdateShowtimeDetails) => Promise<MxOrder>;
    updateSelectedSeats: (cinemaChainId: string, orderId: string, showtimeId: string, selectedSeats: MxSelectedSeat[]) => Promise<void | SetSeatsFailedResponse>;
    setOrderItems: (cinemaChainId: string, orderId: string, request: MxSetOrderItemsRequest) => Promise<MxOrder>;
    startEmbeddedPayment: MxStartEmbeddedPaymentApi;
    getOrderCompletionStatus: MxGetOrderCompletionStatusApi;
    getJourneyByReference: MxGetJourneyByReferenceApi;
    getJourneyById: MxGetJourneyByIdApi;
}
/**
 * @hidden
 */
export declare const mxtApi: MxtApi;
