"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var cdn_media_type_1 = require("./../types/cdn-media-type");
/**
 * A front-end client helper for consuming assets from the Vista CDN.
 */
var CdnClient = /** @class */ (function () {
    /**
     * Creates a CDN Client instance.
     * @param cdnUrl The base URL of the CDN.
     * @param options The default options for all CDN asset URLs.
     */
    function CdnClient(cdnUrl, options) {
        this.cdnUrl = cdnUrl;
        this.options = options;
    }
    /**
     * URL builder for Film assets.
     * @param filmId The ID of the Film entity.
     * @param options Options for the Film's assets.
     */
    CdnClient.prototype.film = function (filmId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(filmId, options);
        return {
            poster: urlBuilder(cdn_media_type_1.CdnMediaType.FilmPoster),
            backdrop: urlBuilder(cdn_media_type_1.CdnMediaType.FilmBackdrop),
            advertisement: urlBuilder(cdn_media_type_1.CdnMediaType.FilmAdvertisement),
            motionPoster: urlBuilder(cdn_media_type_1.CdnMediaType.FilmMotionPoster),
            still: urlBuilder(cdn_media_type_1.CdnMediaType.FilmStill),
            titleTreatment: urlBuilder(cdn_media_type_1.CdnMediaType.FilmTitleTreatment),
            trailer: urlBuilder(cdn_media_type_1.CdnMediaType.FilmTrailer),
            shortTrailer: urlBuilder(cdn_media_type_1.CdnMediaType.FilmShortTrailer)
        };
    };
    /**
     * URL builder for Site assets.
     * @param siteId The ID of the Site entity.
     * @param options Options for the Site's assets.
     */
    CdnClient.prototype.site = function (siteId, options) {
        // todo: maybe this needs to be renamed to reflect that it's actually the
        // cinema operator code, not the site ID.
        var urlBuilder = this.getUrlBuilderForEntity(siteId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.SiteImage),
            gallery: urlBuilder(cdn_media_type_1.CdnMediaType.SiteGallery)
        };
    };
    /**
     * URL builder for Item assets.
     * @param itemId The ID of the Item entity.
     * @param options Options for the Item's assets.
     */
    CdnClient.prototype.item = function (itemId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(itemId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.ItemImage),
            advertisement: urlBuilder(cdn_media_type_1.CdnMediaType.ItemAdvertisement)
        };
    };
    /**
     * URL builder for Ticket Type assets.
     * @param ticketTypeId The ID of the Ticket Type entity.
     * @param options Options for the Ticket Type's assets.
     */
    CdnClient.prototype.ticketType = function (ticketTypeId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(ticketTypeId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.TicketTypeImage)
        };
    };
    /**
     * URL builder for Advertising Profile assets.
     * @param advertisingProfileId The ID of the Advertising Profile entity.
     * @param options Options for the Advertising Profile's assets.
     */
    CdnClient.prototype.advertisingProfile = function (advertisingProfileId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(advertisingProfileId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.AdvertisingProfileImage),
            video: urlBuilder(cdn_media_type_1.CdnMediaType.AdvertisingProfileVideo)
        };
    };
    /**
     * URL builder for Promotion assets.
     * @param promotionId The ID of the Promotion entity.
     * @param options Options for the Promotion's assets.
     */
    CdnClient.prototype.promotion = function (promotionId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(promotionId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.PromotionImage),
            advertisement: urlBuilder(cdn_media_type_1.CdnMediaType.PromotionAdvertisement)
        };
    };
    /**
     * URL builder for Attribute assets.
     * @param attributeId The ID of the Attribute entity.
     * @param options Options for the Attribute's assets.
     */
    CdnClient.prototype.attribute = function (attributeId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(attributeId, options);
        return {
            icon: urlBuilder(cdn_media_type_1.CdnMediaType.AttributeIcon),
            advertisement: urlBuilder(cdn_media_type_1.CdnMediaType.AttributeAdvertisement)
        };
    };
    /**
     * URL builder for Event assets.
     * @param eventId The ID of the Event entity.
     * @param options Options for the Event's assets.
     */
    CdnClient.prototype.event = function (eventId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(eventId, options);
        return {
            gallery: urlBuilder(cdn_media_type_1.CdnMediaType.EventGallery),
            poster: urlBuilder(cdn_media_type_1.CdnMediaType.EventPoster)
        };
    };
    /**
     * URL builder for Censor Rating assets.
     * @param censorRatingId The ID of the Censor Rating entity.
     * @param options Options for the Censor Rating's assets.
     */
    CdnClient.prototype.censorRating = function (censorRatingId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(censorRatingId, options);
        return {
            icon: urlBuilder(cdn_media_type_1.CdnMediaType.CensorRatingIcon)
        };
    };
    /**
     * URL builder for Corporate Booking assets.
     * @param corporateBookingId The ID of the Corporate Booking entity.
     * @param options Options for the Corporate Booking's assets.
     */
    CdnClient.prototype.corporateBooking = function (corporateBookingId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(corporateBookingId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.CorporateBookingImage)
        };
    };
    /**
     * URL builder for Loyalty Club assets.
     * @param loyaltyClubId The ID of the Loyalty Club entity.
     * @param options Options for the Loyalty Club's assets.
     */
    CdnClient.prototype.loyaltyClub = function (loyaltyClubId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(loyaltyClubId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.LoyaltyClubImage),
            banner: urlBuilder(cdn_media_type_1.CdnMediaType.LoyaltyClubBanner),
            loginImage: urlBuilder(cdn_media_type_1.CdnMediaType.LoyaltyClubLoginImage),
            paymentImage: urlBuilder(cdn_media_type_1.CdnMediaType.LoyaltyClubPaymentImage),
            homeBanner: urlBuilder(cdn_media_type_1.CdnMediaType.LoyaltyClubHomeBanner),
            header: urlBuilder(cdn_media_type_1.CdnMediaType.LoyaltyClubHeader)
        };
    };
    /**
     * URL builder for Loyalty Membership Program assets.
     * @param loyaltyMembershipProgramId The ID of the Loyalty Membership Program entity.
     * @param options Options for the Loyalty Membership Program's assets.
     */
    CdnClient.prototype.loyaltyMembershipProgram = function (loyaltyMembershipProgramId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(loyaltyMembershipProgramId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.LoyaltyMembershipProgramImage)
        };
    };
    /**
     * URL builder for Loyalty Reward Shop Item assets.
     * @param loyaltyRewardShopItemId The ID of the Loyalty Reward Shop Item entity.
     * @param options Options for the Loyalty Reward Shop Item's assets.
     */
    CdnClient.prototype.loyaltyRewardShopItem = function (loyaltyRewardShopItemId, options) {
        var urlBuilder = this.getUrlBuilderForEntity(loyaltyRewardShopItemId, options);
        return {
            image: urlBuilder(cdn_media_type_1.CdnMediaType.LoyaltyRewardShopItemImage)
        };
    };
    /**
     * Constructs and returns a URL for a CDN asset.
     * @param mediaType The CDN media type for the asset.
     * @param entityId The ID of the entity.
     * @param options Options for the asset.
     */
    CdnClient.prototype.getAssetUrl = function (mediaType, entityId, options) {
        var baseUrl = this.cdnUrl + "/media/entity/get/" + mediaType + "/" + entityId;
        var queryString = this.getQueryStringForOptions(__assign({}, this.options, options));
        return baseUrl + queryString;
    };
    /**
     * Creates a URL builder for a given entity.
     * @param entityId The ID of the entity.
     * @param options The option for the entity.
     */
    CdnClient.prototype.getUrlBuilderForEntity = function (entityId, options) {
        var _this = this;
        return function (mediaType) { return function (assetOptions) {
            return _this.getAssetUrl(mediaType, entityId, __assign({}, options, assetOptions));
        }; };
    };
    /**
     * Creates a query string for a CDN asset URL based on the supplied options.
     * @param options The options for the URL.
     */
    CdnClient.prototype.getQueryStringForOptions = function (options) {
        var queryParams = [];
        // Todo: This has two assumptions
        // 1. Only valid options are included in the options object.
        // 2. The query parameter name exactly matches the options parameter names.
        // Perhaps in future this could be made more robust.
        for (var optionName in options) {
            var value = options[optionName];
            if (value !== undefined && value !== null) {
                queryParams.push([optionName] + "=" + value);
            }
        }
        return queryParams.length === 0 ? '' : "?" + queryParams.join('&');
    };
    return CdnClient;
}());
exports.CdnClient = CdnClient;
//# sourceMappingURL=cdn-client.js.map