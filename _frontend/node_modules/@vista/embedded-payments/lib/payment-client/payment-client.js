"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var payment_error_1 = require("../types/payment-error");
var payment_error_result_code_1 = require("./../types/payment-error-result-code");
var load_script_1 = require("./utils/load-script");
var sleep_1 = require("./utils/sleep");
var PaymentClient = /** @class */ (function () {
    function PaymentClient(params) {
        var _this = this;
        this.handlePaymentButtonClicked = function () {
            _this.showPaymentButtonLoading(true);
        };
        this.showPaymentButtonLoading = function (show) {
            var paymentButton = _this.paymentButton;
            var loadingClassName = _this.params.paymentButtonConfig.loadingClassName;
            if (show)
                paymentButton.classList.add(loadingClassName);
            else
                paymentButton.classList.remove(loadingClassName);
        };
        this.completePayment = function (completePaymentUrl, token) {
            var url = completePaymentUrl + token;
            fetch(url, { method: 'POST' })
                .then(_this.handleSuccessfulPayment)
                .catch(_this.handleFailedPayment);
        };
        this.getOrderCompletionStatusOrUndefined = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, api, orderId, status_1, error_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.params, api = _a.api, orderId = _a.orderId;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, api.getOrderCompletionStatus(orderId)];
                    case 2:
                        status_1 = _b.sent();
                        return [2 /*return*/, Promise.resolve(status_1)];
                    case 3:
                        error_1 = _b.sent();
                        return [2 /*return*/, Promise.resolve(undefined)];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        this.confirmOrderCompletion = function () { return __awaiter(_this, void 0, void 0, function () {
            var i, status_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        i = 0;
                        _a.label = 1;
                    case 1:
                        if (!(i <= 8)) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.getOrderCompletionStatusOrUndefined()];
                    case 2:
                        status_2 = _a.sent();
                        if (status_2 && status_2.isOrderCompleted)
                            return [2 /*return*/, Promise.resolve(status_2)];
                        return [4 /*yield*/, sleep_1.sleep(1000)];
                    case 3:
                        _a.sent(); // Wait for 1 second and then retry. Background notification should complete the payment.
                        _a.label = 4;
                    case 4:
                        i++;
                        return [3 /*break*/, 1];
                    case 5: return [2 /*return*/, Promise.reject()];
                }
            });
        }); };
        this.handleSuccessfulPayment = function () { return __awaiter(_this, void 0, void 0, function () {
            var _a, onPaymentSuccessful, onPaymentFailed, status_3, error_2;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.params.events, onPaymentSuccessful = _a.onPaymentSuccessful, onPaymentFailed = _a.onPaymentFailed;
                        _b.label = 1;
                    case 1:
                        _b.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.confirmOrderCompletion()];
                    case 2:
                        status_3 = _b.sent();
                        this.showPaymentButtonLoading(false);
                        onPaymentSuccessful(status_3);
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _b.sent();
                        this.showPaymentButtonLoading(false);
                        onPaymentFailed(new payment_error_1.PaymentError(payment_error_result_code_1.PaymentErrorResultCode.OrderNotCompletedAfterPaymentAccepted));
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        }); };
        this.handleFailedPayment = function (error) {
            _this.showPaymentButtonLoading(false);
            _this.params.events.onPaymentFailed(error);
        };
        this.validateParams(params);
        this.params = params;
    }
    PaymentClient.prototype.initialiseConnector = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, api, orderId, paymentMethod, container, response, sdkScriptUrls, connectorScriptUrls, connectorFunctionName, connectorParametersJson, isPaymentButtonIncluded, completePaymentUrl, serverParams;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this.params, api = _a.api, orderId = _a.orderId, paymentMethod = _a.paymentMethod, container = _a.container;
                        return [4 /*yield*/, api.startEmbeddedPayment(orderId, { paymentMethod: paymentMethod })];
                    case 1:
                        response = _b.sent();
                        sdkScriptUrls = response.sdkScriptUrls, connectorScriptUrls = response.connectorScriptUrls, connectorFunctionName = response.connectorFunctionName, connectorParametersJson = response.connectorParametersJson, isPaymentButtonIncluded = response.isPaymentButtonIncluded, completePaymentUrl = response.completePaymentUrl;
                        return [4 /*yield*/, load_script_1.loadScripts(sdkScriptUrls.concat(connectorScriptUrls))];
                    case 2:
                        _b.sent();
                        if (!vista.payments.connector[connectorFunctionName]) {
                            throw new Error("Payment connector '" + connectorFunctionName + "' not found");
                        }
                        serverParams = JSON.parse(connectorParametersJson);
                        vista.payments.connector[connectorFunctionName](serverParams, {
                            container: isPaymentButtonIncluded ? container : this.addChildContainer(),
                            paymentButton: isPaymentButtonIncluded ? undefined : this.addPaymentButton(),
                            onPaymentSuccessful: completePaymentUrl
                                ? function (token) { return _this.completePayment(completePaymentUrl, token); }
                                : this.handleSuccessfulPayment,
                            onPaymentFailed: function () { return _this.handleFailedPayment(new payment_error_1.PaymentError(payment_error_result_code_1.PaymentErrorResultCode.PaymentDeclined)); }
                        });
                        return [2 /*return*/];
                }
            });
        });
    };
    PaymentClient.prototype.unmount = function () {
        this.params.container.innerHTML = '';
    };
    PaymentClient.prototype.addChildContainer = function () {
        var container = this.params.container;
        var childContainer = document.createElement('div');
        childContainer.className = this.params.childContainerClassName;
        container.appendChild(childContainer);
        return childContainer;
    };
    PaymentClient.prototype.addPaymentButton = function () {
        var _a = this.params, container = _a.container, paymentButtonConfig = _a.paymentButtonConfig;
        var button = document.createElement('button');
        button.className = paymentButtonConfig.className;
        var label = document.createElement('span');
        label.textContent = paymentButtonConfig.label;
        button.appendChild(label);
        button.addEventListener('click', this.handlePaymentButtonClicked);
        container.appendChild(button);
        this.paymentButton = button;
        return button;
    };
    PaymentClient.prototype.validateParams = function (params) {
        var requiredParams = [
            'orderId',
            'paymentMethod',
            'container',
            'paymentButtonConfig',
            'childContainerClassName',
            'events',
            'api'
        ];
        requiredParams.forEach(function (param) {
            if (!params[param]) {
                throw new Error("Cannot construct a PaymentClient without " + param);
            }
        });
    };
    return PaymentClient;
}());
exports.PaymentClient = PaymentClient;
//# sourceMappingURL=payment-client.js.map