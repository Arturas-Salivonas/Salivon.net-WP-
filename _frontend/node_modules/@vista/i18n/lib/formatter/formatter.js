"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../types");
var formatters_1 = require("./formatters");
/**
 * Provides methods to format dates, currency and templates as strings
 * based on given configuration or its default
 * (English is the built-in language and doesn't require any setup)
 */
var Formatter = /** @class */ (function () {
    /**
     * Default constructor for the Formatter
     * @param config
     */
    function Formatter(config) {
        this.config = config || types_1.defaultI18NConfiguration;
    }
    Object.defineProperty(Formatter.prototype, "configuration", {
        /**
         * Configuration getter
         */
        get: function () {
            return this.config;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Formats a given date as a string
     *
     * Example:
     * ```javascript
     * const i18n = new I18NFormatter();
     *
     * i18n.date(new Date('18 Jan 2018')) // will return: 2018-01-18T00:00:00.000+13:00
     * i18n.date(
     *     new Date('18 Jan 2018'),
     *     'dddd, MMMM DD, YYYY')         // will return: Thursday, January 18, 2018
     * i18n.date(
     *     new Date('18 Jan 2018),
     *     i18n.configuration.date.short
     * )                                  // will return: 18/01/2018
     * i18n.date(
     *     new Date('18 Jan 2018'),
     *     'ddd DD MMM',
     *     'ru-RU')                       // will return: вск 02 сент.
     *                                    // provided the chosen locale has been loaded
     * ```
     *
     * @param date The date to be formatted
     * @param dateFormat The override for configuration's date format to use (optional)
     * @param languageTag The override for configuration's locale tag to be used for this transformation
     */
    Formatter.prototype.date = function (date, dateFormat, languageTag) {
        return formatters_1.formatDate(date, dateFormat || (this.config.date ? this.config.date.default : undefined), languageTag || this.config.localeTag);
    };
    /**
     * Formats a given numeric value as a string
     *
     * Example:
     * ```javascript
     * const i18n = new I18NFormatter();
     *
     * i18n.number(1050)              // will return: '1,050.00'
     * i18n.number(1050.55)           // will return '1,050.55'
     * i18n.number(
     *     18580.80,
     *     {
     *       decimalPrecision: 3,
     *       thousandsSeparator: '.',
     *       decimalSeparator: ','
     *     })                         // will return: 18.580,800
     * i18n.number(
     *     4523,
     *     { decimalPrecision: 0 }
     * )                              // will return: 4,523
     * ```
     *
     * @param value The numeric value to be formatted
     * @param numberFormat The override for configuration's number format to use (optional or partial)
     */
    Formatter.prototype.number = function (value, numberFormat) {
        return formatters_1.formatNumber(value, __assign({}, this.config.number, numberFormat));
    };
    /**
     * Converts the string representation of a number or currency to its number data-type equivalent
     *
     * Example:
     * ```javascript
     * const i18n = new I18NFormatter();
     *
     * i18n.parse('1,050.55')          // will return: 1050.55
     * i18n.parse('$ 1,050.70')        // will return: 1050.7
     * i18n.parse('2.534.234,1234 €')  // wil return: 2534234.1234
     * i18n.parse('xyz')               // will return: 0
     * ```
     *
     * @param value The string value to be parsed
     * @param decimalSeparator The ovveride value for configuration's decimal separator (optional)
     */
    Formatter.prototype.parse = function (value, decimalSeparator) {
        return formatters_1.parse(value, decimalSeparator || (this.config.number ? this.config.number.decimalSeparator : undefined));
    };
    /**
     * Formats a given monetary value as a string
     *
     * Example:
     * ```javascript
     * const i18n = new I18NFormatter();
     *
     * i18n.currency(1050.55)         // will return: '$1,050.55'
     * i18n.currency(
     *     18580.80,
     *     {
     *       symbol: 'EUR',
     *       format: '%v %s'
     *       decimalPrecision: 3,
     *       thousandsSeparator: '.',
     *       decimalSeparator: ','
     *     }
     * )                             // will return: 18.580,800 EUR
     * i18n.currency(
     *     4523,
     *     { symbol: ¥ }
     * )                             // will return: ¥4,523.00
     * ```
     *
     * Note: Use `number()` method if you wish to display a currency value with no symbol
     *
     * @param value The monetary value to be formatted
     * @param currencyFormat The override for configuration's currency format to use (optional or partial)
     */
    Formatter.prototype.currency = function (value, currencyFormat) {
        return formatters_1.formatCurrency(value, __assign({}, this.config.currency, currencyFormat));
    };
    /**
     * Formats a given template and parameters as a string.
     * @param template The template to be used
     * @param parameters The parameters to be used
     */
    Formatter.prototype.template = function (template, parameters) {
        return formatters_1.formatTemplate(template, parameters, this.config);
    };
    return Formatter;
}());
exports.Formatter = Formatter;
//# sourceMappingURL=formatter.js.map