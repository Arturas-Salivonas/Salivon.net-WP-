"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var types_1 = require("../../types");
var number_1 = require("./number");
var currency_1 = require("./currency");
var date_1 = require("./date");
/**
 * Formats a given template and parameters as a string.
 * @param template The template to be used
 * @param parameters The parameters to be used
 */
function formatTemplate(template, parameters, formatterConfig) {
    return template.replace(/\${([^{]+[^}])}/g, function (match) {
        var parameterString = match.substr(2, match.length - 3).trim();
        return getParameterValueFromString(parameterString, parameters, formatterConfig);
    });
}
exports.formatTemplate = formatTemplate;
/**
 * Gets the value of a parameter from the provided string and parameters.
 * @param parameter The provided parameter
 * @param parameters The provided parameters
 * @param formatterConfig The formatter config (optional)
 */
function getParameterValueFromString(parameter, parameters, formatterConfig) {
    var properties = parameter.split('|');
    var path = properties[0];
    var formatterTypeKey = properties[1];
    var formatString = properties[2];
    var value = getParameterValueFromPath(path, parameters);
    return formatterTypeKey ? value = formatValue(value, formatterTypeKey, formatString, formatterConfig) : value;
}
/**
 * Gets the parameter value based on it's path string.
 * Return empty string as a fallback if the value does not exist.
 * @param path The path string of the parameter (e.g. 'date.shortDate')
 * @param parameters The parameters provided to formatTemplate
 */
function getParameterValueFromPath(path, parameters) {
    return path.split('.').reduce(function (res, key) {
        var value = res[key];
        if (value === undefined || value === null)
            return '';
        return value;
    }, parameters);
}
/**
 * Formats a value using a specified formatter type and optional format string
 * @param value The value to be formatted
 * @param formatterTypeKey The formatter type key
 * @param formatString The format string (optional)
 * @param formatterConfig The fallback formatter config (used when the format string is not provided/relevant)
 */
function formatValue(value, formatterTypeKey, formatString, formatterConfig) {
    var formatterType = getTemplateFormatterTypeFromKey(formatterTypeKey);
    switch (formatterType) {
        case types_1.TemplateFormatterType.Date:
            return date_1.formatDate(value, formatString || formatterConfig && formatterConfig.date && formatterConfig.date.default, formatterConfig && formatterConfig.localeTag);
        case types_1.TemplateFormatterType.Number:
            return number_1.formatNumber(value, formatterConfig && formatterConfig.number);
        case types_1.TemplateFormatterType.Currency:
            return currency_1.formatCurrency(value, formatterConfig && formatterConfig.currency);
        default:
            // TODO: missing test coverage
            return value;
    }
}
/**
 * Gets the formatter type from a given key. Throws an error if the key is invalid
 */
function getTemplateFormatterTypeFromKey(formatterTypeKey) {
    switch (formatterTypeKey.toLowerCase()) {
        case 'n': return types_1.TemplateFormatterType.Number;
        case 'c': return types_1.TemplateFormatterType.Currency;
        case 'd': return types_1.TemplateFormatterType.Date;
        default: throw new Error(formatterTypeKey + " is not a valid TemplateFormatterType.");
    }
}
//# sourceMappingURL=template.js.map