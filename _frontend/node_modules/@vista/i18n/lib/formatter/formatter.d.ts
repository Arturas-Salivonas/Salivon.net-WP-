import { Configuration, CurrencyConfiguration, NumberConfiguration } from '../types';
/**
 * Provides methods to format dates, currency and templates as strings
 * based on given configuration or its default
 * (English is the built-in language and doesn't require any setup)
 */
export declare class Formatter {
    /**
     * The configuration to be used
     */
    private config;
    /**
     * Default constructor for the Formatter
     * @param config
     */
    constructor(config?: Configuration);
    /**
     * Configuration getter
     */
    readonly configuration: Configuration;
    /**
     * Formats a given date as a string
     *
     * Example:
     * ```javascript
     * const i18n = new I18NFormatter();
     *
     * i18n.date(new Date('18 Jan 2018')) // will return: 2018-01-18T00:00:00.000+13:00
     * i18n.date(
     *     new Date('18 Jan 2018'),
     *     'dddd, MMMM DD, YYYY')         // will return: Thursday, January 18, 2018
     * i18n.date(
     *     new Date('18 Jan 2018),
     *     i18n.configuration.date.short
     * )                                  // will return: 18/01/2018
     * i18n.date(
     *     new Date('18 Jan 2018'),
     *     'ddd DD MMM',
     *     'ru-RU')                       // will return: вск 02 сент.
     *                                    // provided the chosen locale has been loaded
     * ```
     *
     * @param date The date to be formatted
     * @param dateFormat The override for configuration's date format to use (optional)
     * @param languageTag The override for configuration's locale tag to be used for this transformation
     */
    date(date: Date | string | number, dateFormat?: string, languageTag?: string): string;
    /**
     * Formats a given numeric value as a string
     *
     * Example:
     * ```javascript
     * const i18n = new I18NFormatter();
     *
     * i18n.number(1050)              // will return: '1,050.00'
     * i18n.number(1050.55)           // will return '1,050.55'
     * i18n.number(
     *     18580.80,
     *     {
     *       decimalPrecision: 3,
     *       thousandsSeparator: '.',
     *       decimalSeparator: ','
     *     })                         // will return: 18.580,800
     * i18n.number(
     *     4523,
     *     { decimalPrecision: 0 }
     * )                              // will return: 4,523
     * ```
     *
     * @param value The numeric value to be formatted
     * @param numberFormat The override for configuration's number format to use (optional or partial)
     */
    number(value: number, numberFormat?: Partial<NumberConfiguration>): string;
    /**
     * Converts the string representation of a number or currency to its number data-type equivalent
     *
     * Example:
     * ```javascript
     * const i18n = new I18NFormatter();
     *
     * i18n.parse('1,050.55')          // will return: 1050.55
     * i18n.parse('$ 1,050.70')        // will return: 1050.7
     * i18n.parse('2.534.234,1234 €')  // wil return: 2534234.1234
     * i18n.parse('xyz')               // will return: 0
     * ```
     *
     * @param value The string value to be parsed
     * @param decimalSeparator The ovveride value for configuration's decimal separator (optional)
     */
    parse(value: string, decimalSeparator?: string): number;
    /**
     * Formats a given monetary value as a string
     *
     * Example:
     * ```javascript
     * const i18n = new I18NFormatter();
     *
     * i18n.currency(1050.55)         // will return: '$1,050.55'
     * i18n.currency(
     *     18580.80,
     *     {
     *       symbol: 'EUR',
     *       format: '%v %s'
     *       decimalPrecision: 3,
     *       thousandsSeparator: '.',
     *       decimalSeparator: ','
     *     }
     * )                             // will return: 18.580,800 EUR
     * i18n.currency(
     *     4523,
     *     { symbol: ¥ }
     * )                             // will return: ¥4,523.00
     * ```
     *
     * Note: Use `number()` method if you wish to display a currency value with no symbol
     *
     * @param value The monetary value to be formatted
     * @param currencyFormat The override for configuration's currency format to use (optional or partial)
     */
    currency(value: number, currencyFormat?: Partial<CurrencyConfiguration>): string;
    /**
     * Formats a given template and parameters as a string.
     * @param template The template to be used
     * @param parameters The parameters to be used
     */
    template(template: string, parameters: object): string;
}
