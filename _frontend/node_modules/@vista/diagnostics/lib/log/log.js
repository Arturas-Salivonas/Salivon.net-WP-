"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var format_1 = __importDefault(require("date-fns/format"));
var log_constants_1 = require("./log.constants");
var console_1 = require("./providers/console");
/**
 * Vista Diagnostics Log
 *
 * Provides a wrapper for console.log with support for:
 * - configurable threshold level to contain console pollution in different environments
 * - tagged entries for discrete debug, regardless of the above
 * - remote persistence via configurable XHR end point and payload mapping configuration
 *
 * Example #1 - import in your code:
 * ```
 * import { VistaDiagnosticsLog } from '@vista/diagnostics';
 *
 * const log = new VistaDiagnosticsLog();
 * ```
 *
 * Example #2 - use threshold:
 * ```
 * // configure log to only display errors
 * log.configure('console', {
 *     thresholdLevel: ThresholdLevel.ERROR // (4)
 * });
 *
 * // log info
 * log.info('Test message with arguments', {one: 1});
 *
 * // no console output
 * ```
 *
 * Example #3 - use discrete debug with tags:
 * ```
 * // change debug
 * log.debugByTag('security');
 *
 * // first approach, multiple entries in a class or file
 * const securityLog = log.tag(['security']);
 * // call one
 * securityLog.info('Test tagged message');
 * // call two
 * sceurityLog.warn('Oops! Something is not completely right');
 *
 * // second approach - one off chained version
 * log.tag(['security', 'login'])
 *    .info('Test message with arguments', {one: 1});
 *
 * // both will output to console, because tag match
 * ```
 */
var VistaDiagnosticsLog = /** @class */ (function () {
    function VistaDiagnosticsLog() {
        // service configuration object
        this._configuration = __assign({}, log_constants_1.CONFIGURATION_DEFAULTS);
        // log providers
        this._providers = {
            // QUESTION: do we register console by default?
            console: console_1.consoleLogProviderInstance
        };
        // debug tags pool
        this._debugByTagPool = [];
    }
    /**
     * Creates a new entry (or extends default values) configuration section
     * matching provided key
     */
    VistaDiagnosticsLog.prototype.configure = function (name, newConfigurationSection) {
        this._configuration[name] = __assign({}, this._configuration[name], newConfigurationSection, { lastUpdatedOn: format_1.default(new Date(), log_constants_1.DATE_FORMAT_PATTERN) });
        // return updated configuration
        return this._configuration;
    };
    /**
     * After any error gets thrown, this provides forwarding of the message and context to log.error
     * By defaults system errors will be suppressed.
     */
    VistaDiagnosticsLog.prototype.includeGlobalErrors = function (suppressSystemError) {
        var _this = this;
        // set exceptions interceptor
        window.onerror = function (message, url, lineNo, columnNo, error) {
            // run vista log.error()
            _this.error(message, url, error);
            // suppres system error
            return suppressSystemError || true;
        };
    };
    /**
     * Allows for registration of a new log provider that will be added to the stack
     * and invoked when new entries will be logged.
     */
    VistaDiagnosticsLog.prototype.registerProvider = function (name, provider, configuration) {
        // validating inputs
        if (name === '') {
            console.warn('You must provide a valid name to register a provider');
            return undefined;
        }
        // assign or override
        this._providers[name] = provider;
        // return new configuration
        return this.configure(name, configuration);
    };
    /**
     * Turns on discrete tag based debugging
     * by adding actively filtered tags for log entries to come.
     * An empty payload will turn the tag filtering off.
     * @param tag
     */
    VistaDiagnosticsLog.prototype.debugByTag = function (tags) {
        var _this = this;
        // if empty clear pool
        if (typeof tags === 'undefined') {
            this._debugByTagPool = [];
        }
        else {
            // if not array, array-ize
            var newTags = Array.isArray(tags) ? tags : [tags];
            // iterate array
            newTags.map(function (tag) {
                // add to debug by tag pool if not already there
                if (tag && _this._debugByTagPool.indexOf(tag) === -1) {
                    _this._debugByTagPool.push(tag);
                }
            });
        }
        // return tag pool
        return this._debugByTagPool;
    };
    /**
     * Adds one or more tags to next log entry's context,
     * returns a context-aware list of console wrappers for main methods:
     * `trace`, `debug`, `info`, `warn`, `error`.
     *
     * Example with multiple calls:
     * ```
     * const taggedLog = log.tag('example');
     * taggedLog.info('Test message');
     * taggedLog.warn('Test warning');
     * ```
     *
     * Example with chaining:
     * ```
     * log.tag('example')
     *    .info('Test message');
     * ```
     *
     * @param tags
     */
    VistaDiagnosticsLog.prototype.tag = function (tags) {
        var _this = this;
        // array-ize input type, if needed
        var contextTags = Array.isArray(tags) ? tags : [tags];
        // tag context rich methods
        var taggedMethods = {};
        // build wrappers
        log_constants_1.SUPPORTED_METHODS.forEach(function (m, idx) {
            taggedMethods[m] = function (message) {
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                _this.logEntry(idx, m, message, contextTags, args);
            };
        });
        // return context rich methods to allow chaining
        return taggedMethods;
    };
    /**
     * Trace wrapper
     *
     * @param message
     * @param args
     */
    VistaDiagnosticsLog.prototype.trace = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.logEntry(0, 'trace', message, [], args);
    };
    /**
     * Debug wrapper
     *
     * @param message
     * @param args
     */
    VistaDiagnosticsLog.prototype.debug = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        // todo: Starting with Chromium 58 this method only appears in
        // Chromium browser consoles when level "Verbose" is selected.
        // see https://developer.mozilla.org/en-US/docs/Web/API/console
        this.logEntry(1, 'debug', message, [], args);
    };
    /**
     * Info wrapper
     *
     * @param message
     * @param args
     */
    VistaDiagnosticsLog.prototype.info = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        // console.info('message');
        // this._console['info']('message');
        this.logEntry(2, 'info', message, [], args);
    };
    /**
     * Warn wrapper
     *
     * @param message
     * @param args
     */
    VistaDiagnosticsLog.prototype.warn = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.logEntry(3, 'warn', message, [], args);
    };
    /**
     * Error wrapper
     *
     * @param message
     * @param args
     */
    VistaDiagnosticsLog.prototype.error = function (message) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        this.logEntry(4, 'error', message, [], args);
    };
    /**
     * Logs and optionally persist remotely entry depending on threshold and tag matching
     */
    VistaDiagnosticsLog.prototype.logEntry = function (severity, method, message, tags, args) {
        var _this = this;
        // iterate to each registered provider and
        Object.keys(this._providers).forEach(function (key) {
            _this._providers[key].log(_this._configuration[key], _this._debugByTagPool, severity, method, message, tags, args);
        });
    };
    return VistaDiagnosticsLog;
}());
exports.VistaDiagnosticsLog = VistaDiagnosticsLog;
// export const log = new VistaDiagnosticsLog();
//# sourceMappingURL=log.js.map